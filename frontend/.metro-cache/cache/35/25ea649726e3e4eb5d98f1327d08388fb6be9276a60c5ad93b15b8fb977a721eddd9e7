{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":29,"index":44},"end":{"line":3,"column":84,"index":99}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/objectSpread2","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":44,"index":213},"end":{"line":6,"column":91,"index":260}}],"key":"F+ExrfS9dcoZxXJOBwTmx09hji8=","exportNames":["*"],"imports":1}},{"name":"fbjs/lib/invariant","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":40,"index":303},"end":{"line":7,"column":69,"index":332}}],"key":"ePiUN85REKH0vTLGPPDgdWgjFww=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\").default;\n  exports.__esModule = true;\n  exports.CellRenderMask = void 0;\n  var _objectSpread2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/objectSpread2\"));\n  var _invariant = _interopRequireDefault(require(_dependencyMap[2], \"fbjs/lib/invariant\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  class CellRenderMask {\n    constructor(numCells) {\n      (0, _invariant.default)(numCells >= 0, 'CellRenderMask must contain a non-negative number os cells');\n      this._numCells = numCells;\n      if (numCells === 0) {\n        this._regions = [];\n      } else {\n        this._regions = [{\n          first: 0,\n          last: numCells - 1,\n          isSpacer: true\n        }];\n      }\n    }\n    enumerateRegions() {\n      return this._regions;\n    }\n    addCells(cells) {\n      (0, _invariant.default)(cells.first >= 0 && cells.first < this._numCells && cells.last >= -1 && cells.last < this._numCells && cells.last >= cells.first - 1, 'CellRenderMask.addCells called with invalid cell range');\n\n      // VirtualizedList uses inclusive ranges, where zero-count states are\n      // possible. E.g. [0, -1] for no cells, starting at 0.\n      if (cells.last < cells.first) {\n        return;\n      }\n      var _this$_findRegion = this._findRegion(cells.first),\n        firstIntersect = _this$_findRegion[0],\n        firstIntersectIdx = _this$_findRegion[1];\n      var _this$_findRegion2 = this._findRegion(cells.last),\n        lastIntersect = _this$_findRegion2[0],\n        lastIntersectIdx = _this$_findRegion2[1];\n\n      // Fast-path if the cells to add are already all present in the mask. We\n      // will otherwise need to do some mutation.\n      if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {\n        return;\n      }\n\n      // We need to replace the existing covered regions with 1-3 new regions\n      // depending whether we need to split spacers out of overlapping regions.\n      var newLeadRegion = [];\n      var newTailRegion = [];\n      var newMainRegion = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, cells), {}, {\n        isSpacer: false\n      });\n      if (firstIntersect.first < newMainRegion.first) {\n        if (firstIntersect.isSpacer) {\n          newLeadRegion.push({\n            first: firstIntersect.first,\n            last: newMainRegion.first - 1,\n            isSpacer: true\n          });\n        } else {\n          newMainRegion.first = firstIntersect.first;\n        }\n      }\n      if (lastIntersect.last > newMainRegion.last) {\n        if (lastIntersect.isSpacer) {\n          newTailRegion.push({\n            first: newMainRegion.last + 1,\n            last: lastIntersect.last,\n            isSpacer: true\n          });\n        } else {\n          newMainRegion.last = lastIntersect.last;\n        }\n      }\n      var replacementRegions = [...newLeadRegion, newMainRegion, ...newTailRegion];\n      var numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;\n      this._regions.splice(firstIntersectIdx, numRegionsToDelete, ...replacementRegions);\n    }\n    numCells() {\n      return this._numCells;\n    }\n    equals(other) {\n      return this._numCells === other._numCells && this._regions.length === other._regions.length && this._regions.every((region, i) => region.first === other._regions[i].first && region.last === other._regions[i].last && region.isSpacer === other._regions[i].isSpacer);\n    }\n    _findRegion(cellIdx) {\n      var firstIdx = 0;\n      var lastIdx = this._regions.length - 1;\n      while (firstIdx <= lastIdx) {\n        var middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n        var middleRegion = this._regions[middleIdx];\n        if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {\n          return [middleRegion, middleIdx];\n        } else if (cellIdx < middleRegion.first) {\n          lastIdx = middleIdx - 1;\n        } else if (cellIdx > middleRegion.last) {\n          firstIdx = middleIdx + 1;\n        }\n      }\n      (0, _invariant.default)(false, \"A region was not found containing cellIdx \" + cellIdx);\n    }\n  }\n  exports.CellRenderMask = CellRenderMask;\n});","lineCount":114,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"_interopRequireDefault"],[4,28,3,26],[4,31,3,29,"require"],[4,38,3,36],[4,39,3,36,"_dependencyMap"],[4,53,3,36],[4,104,3,83],[4,105,3,84],[4,106,3,85,"default"],[4,113,3,92],[5,2,4,0,"exports"],[5,9,4,7],[5,10,4,8,"__esModule"],[5,20,4,18],[5,23,4,21],[5,27,4,25],[6,2,5,0,"exports"],[6,9,5,7],[6,10,5,8,"CellRenderMask"],[6,24,5,22],[6,27,5,25],[6,32,5,30],[6,33,5,31],[7,2,6,0],[7,6,6,4,"_objectSpread2"],[7,20,6,18],[7,23,6,21,"_interopRequireDefault"],[7,45,6,43],[7,46,6,44,"require"],[7,53,6,51],[7,54,6,51,"_dependencyMap"],[7,68,6,51],[7,111,6,90],[7,112,6,91],[7,113,6,92],[8,2,7,0],[8,6,7,4,"_invariant"],[8,16,7,14],[8,19,7,17,"_interopRequireDefault"],[8,41,7,39],[8,42,7,40,"require"],[8,49,7,47],[8,50,7,47,"_dependencyMap"],[8,64,7,47],[8,89,7,68],[8,90,7,69],[8,91,7,70],[9,2,8,0],[10,0,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[19,2,18,0],[19,8,18,6,"CellRenderMask"],[19,22,18,20],[19,23,18,21],[20,4,19,2,"constructor"],[20,15,19,13,"constructor"],[20,16,19,14,"numCells"],[20,24,19,22],[20,26,19,24],[21,6,20,4],[21,7,20,5],[21,8,20,6],[21,10,20,8,"_invariant"],[21,20,20,18],[21,21,20,19,"default"],[21,28,20,26],[21,30,20,28,"numCells"],[21,38,20,36],[21,42,20,40],[21,43,20,41],[21,45,20,43],[21,105,20,103],[21,106,20,104],[22,6,21,4],[22,10,21,8],[22,11,21,9,"_numCells"],[22,20,21,18],[22,23,21,21,"numCells"],[22,31,21,29],[23,6,22,4],[23,10,22,8,"numCells"],[23,18,22,16],[23,23,22,21],[23,24,22,22],[23,26,22,24],[24,8,23,6],[24,12,23,10],[24,13,23,11,"_regions"],[24,21,23,19],[24,24,23,22],[24,26,23,24],[25,6,24,4],[25,7,24,5],[25,13,24,11],[26,8,25,6],[26,12,25,10],[26,13,25,11,"_regions"],[26,21,25,19],[26,24,25,22],[26,25,25,23],[27,10,26,8,"first"],[27,15,26,13],[27,17,26,15],[27,18,26,16],[28,10,27,8,"last"],[28,14,27,12],[28,16,27,14,"numCells"],[28,24,27,22],[28,27,27,25],[28,28,27,26],[29,10,28,8,"isSpacer"],[29,18,28,16],[29,20,28,18],[30,8,29,6],[30,9,29,7],[30,10,29,8],[31,6,30,4],[32,4,31,2],[33,4,32,2,"enumerateRegions"],[33,20,32,18,"enumerateRegions"],[33,21,32,18],[33,23,32,21],[34,6,33,4],[34,13,33,11],[34,17,33,15],[34,18,33,16,"_regions"],[34,26,33,24],[35,4,34,2],[36,4,35,2,"addCells"],[36,12,35,10,"addCells"],[36,13,35,11,"cells"],[36,18,35,16],[36,20,35,18],[37,6,36,4],[37,7,36,5],[37,8,36,6],[37,10,36,8,"_invariant"],[37,20,36,18],[37,21,36,19,"default"],[37,28,36,26],[37,30,36,28,"cells"],[37,35,36,33],[37,36,36,34,"first"],[37,41,36,39],[37,45,36,43],[37,46,36,44],[37,50,36,48,"cells"],[37,55,36,53],[37,56,36,54,"first"],[37,61,36,59],[37,64,36,62],[37,68,36,66],[37,69,36,67,"_numCells"],[37,78,36,76],[37,82,36,80,"cells"],[37,87,36,85],[37,88,36,86,"last"],[37,92,36,90],[37,96,36,94],[37,97,36,95],[37,98,36,96],[37,102,36,100,"cells"],[37,107,36,105],[37,108,36,106,"last"],[37,112,36,110],[37,115,36,113],[37,119,36,117],[37,120,36,118,"_numCells"],[37,129,36,127],[37,133,36,131,"cells"],[37,138,36,136],[37,139,36,137,"last"],[37,143,36,141],[37,147,36,145,"cells"],[37,152,36,150],[37,153,36,151,"first"],[37,158,36,156],[37,161,36,159],[37,162,36,160],[37,164,36,162],[37,220,36,218],[37,221,36,219],[39,6,38,4],[40,6,39,4],[41,6,40,4],[41,10,40,8,"cells"],[41,15,40,13],[41,16,40,14,"last"],[41,20,40,18],[41,23,40,21,"cells"],[41,28,40,26],[41,29,40,27,"first"],[41,34,40,32],[41,36,40,34],[42,8,41,6],[43,6,42,4],[44,6,43,4],[44,10,43,8,"_this$_findRegion"],[44,27,43,25],[44,30,43,28],[44,34,43,32],[44,35,43,33,"_findRegion"],[44,46,43,44],[44,47,43,45,"cells"],[44,52,43,50],[44,53,43,51,"first"],[44,58,43,56],[44,59,43,57],[45,8,44,6,"firstIntersect"],[45,22,44,20],[45,25,44,23,"_this$_findRegion"],[45,42,44,40],[45,43,44,41],[45,44,44,42],[45,45,44,43],[46,8,45,6,"firstIntersectIdx"],[46,25,45,23],[46,28,45,26,"_this$_findRegion"],[46,45,45,43],[46,46,45,44],[46,47,45,45],[46,48,45,46],[47,6,46,4],[47,10,46,8,"_this$_findRegion2"],[47,28,46,26],[47,31,46,29],[47,35,46,33],[47,36,46,34,"_findRegion"],[47,47,46,45],[47,48,46,46,"cells"],[47,53,46,51],[47,54,46,52,"last"],[47,58,46,56],[47,59,46,57],[48,8,47,6,"lastIntersect"],[48,21,47,19],[48,24,47,22,"_this$_findRegion2"],[48,42,47,40],[48,43,47,41],[48,44,47,42],[48,45,47,43],[49,8,48,6,"lastIntersectIdx"],[49,24,48,22],[49,27,48,25,"_this$_findRegion2"],[49,45,48,43],[49,46,48,44],[49,47,48,45],[49,48,48,46],[51,6,50,4],[52,6,51,4],[53,6,52,4],[53,10,52,8,"firstIntersectIdx"],[53,27,52,25],[53,32,52,30,"lastIntersectIdx"],[53,48,52,46],[53,52,52,50],[53,53,52,51,"firstIntersect"],[53,67,52,65],[53,68,52,66,"isSpacer"],[53,76,52,74],[53,78,52,76],[54,8,53,6],[55,6,54,4],[57,6,56,4],[58,6,57,4],[59,6,58,4],[59,10,58,8,"newLeadRegion"],[59,23,58,21],[59,26,58,24],[59,28,58,26],[60,6,59,4],[60,10,59,8,"newTailRegion"],[60,23,59,21],[60,26,59,24],[60,28,59,26],[61,6,60,4],[61,10,60,8,"newMainRegion"],[61,23,60,21],[61,26,60,24],[61,27,60,25],[61,28,60,26],[61,30,60,28,"_objectSpread2"],[61,44,60,42],[61,45,60,43,"default"],[61,52,60,50],[61,54,60,52],[61,55,60,53],[61,56,60,54],[61,58,60,56,"_objectSpread2"],[61,72,60,70],[61,73,60,71,"default"],[61,80,60,78],[61,82,60,80],[61,83,60,81],[61,84,60,82],[61,86,60,84,"cells"],[61,91,60,89],[61,92,60,90],[61,94,60,92],[61,95,60,93],[61,96,60,94],[61,98,60,96],[62,8,61,6,"isSpacer"],[62,16,61,14],[62,18,61,16],[63,6,62,4],[63,7,62,5],[63,8,62,6],[64,6,63,4],[64,10,63,8,"firstIntersect"],[64,24,63,22],[64,25,63,23,"first"],[64,30,63,28],[64,33,63,31,"newMainRegion"],[64,46,63,44],[64,47,63,45,"first"],[64,52,63,50],[64,54,63,52],[65,8,64,6],[65,12,64,10,"firstIntersect"],[65,26,64,24],[65,27,64,25,"isSpacer"],[65,35,64,33],[65,37,64,35],[66,10,65,8,"newLeadRegion"],[66,23,65,21],[66,24,65,22,"push"],[66,28,65,26],[66,29,65,27],[67,12,66,10,"first"],[67,17,66,15],[67,19,66,17,"firstIntersect"],[67,33,66,31],[67,34,66,32,"first"],[67,39,66,37],[68,12,67,10,"last"],[68,16,67,14],[68,18,67,16,"newMainRegion"],[68,31,67,29],[68,32,67,30,"first"],[68,37,67,35],[68,40,67,38],[68,41,67,39],[69,12,68,10,"isSpacer"],[69,20,68,18],[69,22,68,20],[70,10,69,8],[70,11,69,9],[70,12,69,10],[71,8,70,6],[71,9,70,7],[71,15,70,13],[72,10,71,8,"newMainRegion"],[72,23,71,21],[72,24,71,22,"first"],[72,29,71,27],[72,32,71,30,"firstIntersect"],[72,46,71,44],[72,47,71,45,"first"],[72,52,71,50],[73,8,72,6],[74,6,73,4],[75,6,74,4],[75,10,74,8,"lastIntersect"],[75,23,74,21],[75,24,74,22,"last"],[75,28,74,26],[75,31,74,29,"newMainRegion"],[75,44,74,42],[75,45,74,43,"last"],[75,49,74,47],[75,51,74,49],[76,8,75,6],[76,12,75,10,"lastIntersect"],[76,25,75,23],[76,26,75,24,"isSpacer"],[76,34,75,32],[76,36,75,34],[77,10,76,8,"newTailRegion"],[77,23,76,21],[77,24,76,22,"push"],[77,28,76,26],[77,29,76,27],[78,12,77,10,"first"],[78,17,77,15],[78,19,77,17,"newMainRegion"],[78,32,77,30],[78,33,77,31,"last"],[78,37,77,35],[78,40,77,38],[78,41,77,39],[79,12,78,10,"last"],[79,16,78,14],[79,18,78,16,"lastIntersect"],[79,31,78,29],[79,32,78,30,"last"],[79,36,78,34],[80,12,79,10,"isSpacer"],[80,20,79,18],[80,22,79,20],[81,10,80,8],[81,11,80,9],[81,12,80,10],[82,8,81,6],[82,9,81,7],[82,15,81,13],[83,10,82,8,"newMainRegion"],[83,23,82,21],[83,24,82,22,"last"],[83,28,82,26],[83,31,82,29,"lastIntersect"],[83,44,82,42],[83,45,82,43,"last"],[83,49,82,47],[84,8,83,6],[85,6,84,4],[86,6,85,4],[86,10,85,8,"replacementRegions"],[86,28,85,26],[86,31,85,29],[86,32,85,30],[86,35,85,33,"newLeadRegion"],[86,48,85,46],[86,50,85,48,"newMainRegion"],[86,63,85,61],[86,65,85,63],[86,68,85,66,"newTailRegion"],[86,81,85,79],[86,82,85,80],[87,6,86,4],[87,10,86,8,"numRegionsToDelete"],[87,28,86,26],[87,31,86,29,"lastIntersectIdx"],[87,47,86,45],[87,50,86,48,"firstIntersectIdx"],[87,67,86,65],[87,70,86,68],[87,71,86,69],[88,6,87,4],[88,10,87,8],[88,11,87,9,"_regions"],[88,19,87,17],[88,20,87,18,"splice"],[88,26,87,24],[88,27,87,25,"firstIntersectIdx"],[88,44,87,42],[88,46,87,44,"numRegionsToDelete"],[88,64,87,62],[88,66,87,64],[88,69,87,67,"replacementRegions"],[88,87,87,85],[88,88,87,86],[89,4,88,2],[90,4,89,2,"numCells"],[90,12,89,10,"numCells"],[90,13,89,10],[90,15,89,13],[91,6,90,4],[91,13,90,11],[91,17,90,15],[91,18,90,16,"_numCells"],[91,27,90,25],[92,4,91,2],[93,4,92,2,"equals"],[93,10,92,8,"equals"],[93,11,92,9,"other"],[93,16,92,14],[93,18,92,16],[94,6,93,4],[94,13,93,11],[94,17,93,15],[94,18,93,16,"_numCells"],[94,27,93,25],[94,32,93,30,"other"],[94,37,93,35],[94,38,93,36,"_numCells"],[94,47,93,45],[94,51,93,49],[94,55,93,53],[94,56,93,54,"_regions"],[94,64,93,62],[94,65,93,63,"length"],[94,71,93,69],[94,76,93,74,"other"],[94,81,93,79],[94,82,93,80,"_regions"],[94,90,93,88],[94,91,93,89,"length"],[94,97,93,95],[94,101,93,99],[94,105,93,103],[94,106,93,104,"_regions"],[94,114,93,112],[94,115,93,113,"every"],[94,120,93,118],[94,121,93,119],[94,122,93,120,"region"],[94,128,93,126],[94,130,93,128,"i"],[94,131,93,129],[94,136,93,134,"region"],[94,142,93,140],[94,143,93,141,"first"],[94,148,93,146],[94,153,93,151,"other"],[94,158,93,156],[94,159,93,157,"_regions"],[94,167,93,165],[94,168,93,166,"i"],[94,169,93,167],[94,170,93,168],[94,171,93,169,"first"],[94,176,93,174],[94,180,93,178,"region"],[94,186,93,184],[94,187,93,185,"last"],[94,191,93,189],[94,196,93,194,"other"],[94,201,93,199],[94,202,93,200,"_regions"],[94,210,93,208],[94,211,93,209,"i"],[94,212,93,210],[94,213,93,211],[94,214,93,212,"last"],[94,218,93,216],[94,222,93,220,"region"],[94,228,93,226],[94,229,93,227,"isSpacer"],[94,237,93,235],[94,242,93,240,"other"],[94,247,93,245],[94,248,93,246,"_regions"],[94,256,93,254],[94,257,93,255,"i"],[94,258,93,256],[94,259,93,257],[94,260,93,258,"isSpacer"],[94,268,93,266],[94,269,93,267],[95,4,94,2],[96,4,95,2,"_findRegion"],[96,15,95,13,"_findRegion"],[96,16,95,14,"cellIdx"],[96,23,95,21],[96,25,95,23],[97,6,96,4],[97,10,96,8,"firstIdx"],[97,18,96,16],[97,21,96,19],[97,22,96,20],[98,6,97,4],[98,10,97,8,"lastIdx"],[98,17,97,15],[98,20,97,18],[98,24,97,22],[98,25,97,23,"_regions"],[98,33,97,31],[98,34,97,32,"length"],[98,40,97,38],[98,43,97,41],[98,44,97,42],[99,6,98,4],[99,13,98,11,"firstIdx"],[99,21,98,19],[99,25,98,23,"lastIdx"],[99,32,98,30],[99,34,98,32],[100,8,99,6],[100,12,99,10,"middleIdx"],[100,21,99,19],[100,24,99,22,"Math"],[100,28,99,26],[100,29,99,27,"floor"],[100,34,99,32],[100,35,99,33],[100,36,99,34,"firstIdx"],[100,44,99,42],[100,47,99,45,"lastIdx"],[100,54,99,52],[100,58,99,56],[100,59,99,57],[100,60,99,58],[101,8,100,6],[101,12,100,10,"middleRegion"],[101,24,100,22],[101,27,100,25],[101,31,100,29],[101,32,100,30,"_regions"],[101,40,100,38],[101,41,100,39,"middleIdx"],[101,50,100,48],[101,51,100,49],[102,8,101,6],[102,12,101,10,"cellIdx"],[102,19,101,17],[102,23,101,21,"middleRegion"],[102,35,101,33],[102,36,101,34,"first"],[102,41,101,39],[102,45,101,43,"cellIdx"],[102,52,101,50],[102,56,101,54,"middleRegion"],[102,68,101,66],[102,69,101,67,"last"],[102,73,101,71],[102,75,101,73],[103,10,102,8],[103,17,102,15],[103,18,102,16,"middleRegion"],[103,30,102,28],[103,32,102,30,"middleIdx"],[103,41,102,39],[103,42,102,40],[104,8,103,6],[104,9,103,7],[104,15,103,13],[104,19,103,17,"cellIdx"],[104,26,103,24],[104,29,103,27,"middleRegion"],[104,41,103,39],[104,42,103,40,"first"],[104,47,103,45],[104,49,103,47],[105,10,104,8,"lastIdx"],[105,17,104,15],[105,20,104,18,"middleIdx"],[105,29,104,27],[105,32,104,30],[105,33,104,31],[106,8,105,6],[106,9,105,7],[106,15,105,13],[106,19,105,17,"cellIdx"],[106,26,105,24],[106,29,105,27,"middleRegion"],[106,41,105,39],[106,42,105,40,"last"],[106,46,105,44],[106,48,105,46],[107,10,106,8,"firstIdx"],[107,18,106,16],[107,21,106,19,"middleIdx"],[107,30,106,28],[107,33,106,31],[107,34,106,32],[108,8,107,6],[109,6,108,4],[110,6,109,4],[110,7,109,5],[110,8,109,6],[110,10,109,8,"_invariant"],[110,20,109,18],[110,21,109,19,"default"],[110,28,109,26],[110,30,109,28],[110,35,109,33],[110,37,109,35],[110,81,109,79],[110,84,109,82,"cellIdx"],[110,91,109,89],[110,92,109,90],[111,4,110,2],[112,2,111,0],[113,2,112,0,"exports"],[113,9,112,7],[113,10,112,8,"CellRenderMask"],[113,24,112,22],[113,27,112,25,"CellRenderMask"],[113,41,112,39],[114,0,112,40],[114,3]],"functionMap":{"names":["<global>","CellRenderMask","constructor","enumerateRegions","addCells","numCells","equals","_regions.every$argument_0","_findRegion"],"mappings":"AAA;ACiB;ECC;GDY;EEC;GFE;EGC;GHqD;EIC;GJE;EKC;uHCC,mJD;GLC;EOC;GPe;CDC"},"hasCjsExports":true},"type":"js/module"}]}