{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.parsePathAndParamsFromExpoGoLink = parsePathAndParamsFromExpoGoLink;\n  exports.parsePathFromExpoGoLink = parsePathFromExpoGoLink;\n  exports.extractExpoPathFromURL = extractExpoPathFromURL;\n  function parsePathAndParamsFromExpoGoLink(url) {\n    // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n    // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n    const href = parsePathFromExpoGoLink(url);\n    const results = href.match(/([^?]*)(\\?.*)?/);\n    return {\n      pathname: results?.[1] ?? '',\n      queryString: results?.[2] ?? ''\n    };\n  }\n  function parsePathFromExpoGoLink(url) {\n    // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n    // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n    return url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)?.[1] ?? '';\n  }\n  // This is only run on native.\n  function extractExactPathFromURL(url) {\n    if (\n    // If a universal link / app link / web URL is used, we should use the path\n    // from the URL, while stripping the origin.\n    url.match(/^https?:\\/\\//)) {\n      const {\n        origin,\n        href,\n        hostname\n      } = new URL(url);\n      if (hostname === 'exp.host' || hostname === 'u.expo.dev') {\n        // These are QR code generate deep-link that always like to the '/' path\n        // TODO: In the future, QR code may link to a specific path and this logic will need to be udpated\n        return '';\n      }\n      return href.replace(origin, '');\n    }\n    const isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\n    // Handle special URLs used in Expo Go: `/--/pathname` -> `pathname`\n    if (isExpoGo &&\n    // while not exhaustive, `exp` and `exps` are the only two schemes which\n    // are passed through to other apps in Expo Go.\n    url.match(/^exp(s)?:\\/\\//)) {\n      const pathname = parsePathFromExpoGoLink(url);\n      if (pathname) {\n        return fromDeepLink('a://' + pathname);\n      }\n      // Match the `?.*` segment of the URL.\n      const queryParams = url.match(/exps?:\\/\\/.*\\?(.*)/)?.[1];\n      if (queryParams) {\n        return fromDeepLink('a://?' + queryParams);\n      }\n      return '';\n    }\n    // TODO: Support dev client URLs\n    return fromDeepLink(url);\n  }\n  /** Major hack to support the makeshift expo-development-client system. */\n  function isExpoDevelopmentClient(url) {\n    return url.hostname === 'expo-development-client';\n  }\n  function fromDeepLink(url) {\n    let res;\n    try {\n      // This is for all standard deep links, e.g. `foobar://` where everything\n      // after the `://` is the path.\n      res = new URL(url);\n    } catch {\n      /**\n       * We failed to parse the URL. This can occur for a variety of reasons, including:\n       * - Its a partial URL (e.g. `/route?query=param`).\n       * - It has a valid App scheme, but the scheme isn't a valid URL scheme (e.g. `my_app://`)\n       */\n      // If `url` is already a path (starts with `/`), return it as-is\n      if (url.startsWith('/')) {\n        return url;\n      }\n      /**\n       * App schemes are not valid URL schemes, so they will fail to parse.\n       * We need to strip the scheme from these URLs\n       */\n      return url.replace(/^[^:]+:\\/\\//, '');\n    }\n    if (isExpoDevelopmentClient(res)) {\n      if (!res.searchParams.get('url')) {\n        return '';\n      }\n      const incomingUrl = res.searchParams.get('url');\n      return extractExactPathFromURL(decodeURI(incomingUrl));\n    }\n    let results = '';\n    if (res.host) {\n      results += res.host;\n    }\n    if (res.pathname) {\n      results += res.pathname;\n    }\n    const qs = !res.search ? '' :\n    // @ts-ignore: `entries` is not on `URLSearchParams` in some typechecks.\n    [...res.searchParams.entries()].map(([k, v]) => `${k}=${decodeURIComponent(v)}`).join('&');\n    if (qs) {\n      results += '?' + qs;\n    }\n    return results;\n  }\n  function extractExpoPathFromURL(_prefixes, url = '') {\n    return extractExactPathFromURL(url)\n    // TODO: We should get rid of this, dropping specificities is not good\n    .replace(/^\\//, '');\n  }\n});","lineCount":116,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"parsePathAndParamsFromExpoGoLink"],[7,42,3,40],[7,45,3,43,"parsePathAndParamsFromExpoGoLink"],[7,77,3,75],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"parsePathFromExpoGoLink"],[8,33,4,31],[8,36,4,34,"parsePathFromExpoGoLink"],[8,59,4,57],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"extractExpoPathFromURL"],[9,32,5,30],[9,35,5,33,"extractExpoPathFromURL"],[9,57,5,55],[10,2,6,0],[10,11,6,9,"parsePathAndParamsFromExpoGoLink"],[10,43,6,41,"parsePathAndParamsFromExpoGoLink"],[10,44,6,42,"url"],[10,47,6,45],[10,49,6,47],[11,4,7,4],[12,4,8,4],[13,4,9,4],[13,10,9,10,"href"],[13,14,9,14],[13,17,9,17,"parsePathFromExpoGoLink"],[13,40,9,40],[13,41,9,41,"url"],[13,44,9,44],[13,45,9,45],[14,4,10,4],[14,10,10,10,"results"],[14,17,10,17],[14,20,10,20,"href"],[14,24,10,24],[14,25,10,25,"match"],[14,30,10,30],[14,31,10,31],[14,47,10,47],[14,48,10,48],[15,4,11,4],[15,11,11,11],[16,6,12,8,"pathname"],[16,14,12,16],[16,16,12,18,"results"],[16,23,12,25],[16,26,12,28],[16,27,12,29],[16,28,12,30],[16,32,12,34],[16,34,12,36],[17,6,13,8,"queryString"],[17,17,13,19],[17,19,13,21,"results"],[17,26,13,28],[17,29,13,31],[17,30,13,32],[17,31,13,33],[17,35,13,37],[18,4,14,4],[18,5,14,5],[19,2,15,0],[20,2,16,0],[20,11,16,9,"parsePathFromExpoGoLink"],[20,34,16,32,"parsePathFromExpoGoLink"],[20,35,16,33,"url"],[20,38,16,36],[20,40,16,38],[21,4,17,4],[22,4,18,4],[23,4,19,4],[23,11,19,11,"url"],[23,14,19,14],[23,15,19,15,"match"],[23,20,19,20],[23,21,19,21],[23,46,19,46],[23,47,19,47],[23,50,19,50],[23,51,19,51],[23,52,19,52],[23,56,19,56],[23,58,19,58],[24,2,20,0],[25,2,21,0],[26,2,22,0],[26,11,22,9,"extractExactPathFromURL"],[26,34,22,32,"extractExactPathFromURL"],[26,35,22,33,"url"],[26,38,22,36],[26,40,22,38],[27,4,23,4],[28,4,24,4],[29,4,25,4],[30,4,26,4,"url"],[30,7,26,7],[30,8,26,8,"match"],[30,13,26,13],[30,14,26,14],[30,28,26,28],[30,29,26,29],[30,31,26,31],[31,6,27,8],[31,12,27,14],[32,8,27,16,"origin"],[32,14,27,22],[33,8,27,24,"href"],[33,12,27,28],[34,8,27,30,"hostname"],[35,6,27,39],[35,7,27,40],[35,10,27,43],[35,14,27,47,"URL"],[35,17,27,50],[35,18,27,51,"url"],[35,21,27,54],[35,22,27,55],[36,6,28,8],[36,10,28,12,"hostname"],[36,18,28,20],[36,23,28,25],[36,33,28,35],[36,37,28,39,"hostname"],[36,45,28,47],[36,50,28,52],[36,62,28,64],[36,64,28,66],[37,8,29,12],[38,8,30,12],[39,8,31,12],[39,15,31,19],[39,17,31,21],[40,6,32,8],[41,6,33,8],[41,13,33,15,"href"],[41,17,33,19],[41,18,33,20,"replace"],[41,25,33,27],[41,26,33,28,"origin"],[41,32,33,34],[41,34,33,36],[41,36,33,38],[41,37,33,39],[42,4,34,4],[43,4,35,4],[43,10,35,10,"isExpoGo"],[43,18,35,18],[43,21,35,21],[43,28,35,28,"expo"],[43,32,35,32],[43,37,35,37],[43,48,35,48],[43,52,35,52,"globalThis"],[43,62,35,62],[43,63,35,63,"expo"],[43,67,35,67],[43,69,35,69,"modules"],[43,76,35,76],[43,78,35,78,"ExpoGo"],[43,84,35,84],[44,4,36,4],[45,4,37,4],[45,8,37,8,"isExpoGo"],[45,16,37,16],[46,4,38,8],[47,4,39,8],[48,4,40,8,"url"],[48,7,40,11],[48,8,40,12,"match"],[48,13,40,17],[48,14,40,18],[48,29,40,33],[48,30,40,34],[48,32,40,36],[49,6,41,8],[49,12,41,14,"pathname"],[49,20,41,22],[49,23,41,25,"parsePathFromExpoGoLink"],[49,46,41,48],[49,47,41,49,"url"],[49,50,41,52],[49,51,41,53],[50,6,42,8],[50,10,42,12,"pathname"],[50,18,42,20],[50,20,42,22],[51,8,43,12],[51,15,43,19,"fromDeepLink"],[51,27,43,31],[51,28,43,32],[51,34,43,38],[51,37,43,41,"pathname"],[51,45,43,49],[51,46,43,50],[52,6,44,8],[53,6,45,8],[54,6,46,8],[54,12,46,14,"queryParams"],[54,23,46,25],[54,26,46,28,"url"],[54,29,46,31],[54,30,46,32,"match"],[54,35,46,37],[54,36,46,38],[54,56,46,58],[54,57,46,59],[54,60,46,62],[54,61,46,63],[54,62,46,64],[55,6,47,8],[55,10,47,12,"queryParams"],[55,21,47,23],[55,23,47,25],[56,8,48,12],[56,15,48,19,"fromDeepLink"],[56,27,48,31],[56,28,48,32],[56,35,48,39],[56,38,48,42,"queryParams"],[56,49,48,53],[56,50,48,54],[57,6,49,8],[58,6,50,8],[58,13,50,15],[58,15,50,17],[59,4,51,4],[60,4,52,4],[61,4,53,4],[61,11,53,11,"fromDeepLink"],[61,23,53,23],[61,24,53,24,"url"],[61,27,53,27],[61,28,53,28],[62,2,54,0],[63,2,55,0],[64,2,56,0],[64,11,56,9,"isExpoDevelopmentClient"],[64,34,56,32,"isExpoDevelopmentClient"],[64,35,56,33,"url"],[64,38,56,36],[64,40,56,38],[65,4,57,4],[65,11,57,11,"url"],[65,14,57,14],[65,15,57,15,"hostname"],[65,23,57,23],[65,28,57,28],[65,53,57,53],[66,2,58,0],[67,2,59,0],[67,11,59,9,"fromDeepLink"],[67,23,59,21,"fromDeepLink"],[67,24,59,22,"url"],[67,27,59,25],[67,29,59,27],[68,4,60,4],[68,8,60,8,"res"],[68,11,60,11],[69,4,61,4],[69,8,61,8],[70,6,62,8],[71,6,63,8],[72,6,64,8,"res"],[72,9,64,11],[72,12,64,14],[72,16,64,18,"URL"],[72,19,64,21],[72,20,64,22,"url"],[72,23,64,25],[72,24,64,26],[73,4,65,4],[73,5,65,5],[73,6,66,4],[73,12,66,10],[74,6,67,8],[75,0,68,0],[76,0,69,0],[77,0,70,0],[78,0,71,0],[79,6,72,8],[80,6,73,8],[80,10,73,12,"url"],[80,13,73,15],[80,14,73,16,"startsWith"],[80,24,73,26],[80,25,73,27],[80,28,73,30],[80,29,73,31],[80,31,73,33],[81,8,74,12],[81,15,74,19,"url"],[81,18,74,22],[82,6,75,8],[83,6,76,8],[84,0,77,0],[85,0,78,0],[86,0,79,0],[87,6,80,8],[87,13,80,15,"url"],[87,16,80,18],[87,17,80,19,"replace"],[87,24,80,26],[87,25,80,27],[87,38,80,40],[87,40,80,42],[87,42,80,44],[87,43,80,45],[88,4,81,4],[89,4,82,4],[89,8,82,8,"isExpoDevelopmentClient"],[89,31,82,31],[89,32,82,32,"res"],[89,35,82,35],[89,36,82,36],[89,38,82,38],[90,6,83,8],[90,10,83,12],[90,11,83,13,"res"],[90,14,83,16],[90,15,83,17,"searchParams"],[90,27,83,29],[90,28,83,30,"get"],[90,31,83,33],[90,32,83,34],[90,37,83,39],[90,38,83,40],[90,40,83,42],[91,8,84,12],[91,15,84,19],[91,17,84,21],[92,6,85,8],[93,6,86,8],[93,12,86,14,"incomingUrl"],[93,23,86,25],[93,26,86,28,"res"],[93,29,86,31],[93,30,86,32,"searchParams"],[93,42,86,44],[93,43,86,45,"get"],[93,46,86,48],[93,47,86,49],[93,52,86,54],[93,53,86,55],[94,6,87,8],[94,13,87,15,"extractExactPathFromURL"],[94,36,87,38],[94,37,87,39,"decodeURI"],[94,46,87,48],[94,47,87,49,"incomingUrl"],[94,58,87,60],[94,59,87,61],[94,60,87,62],[95,4,88,4],[96,4,89,4],[96,8,89,8,"results"],[96,15,89,15],[96,18,89,18],[96,20,89,20],[97,4,90,4],[97,8,90,8,"res"],[97,11,90,11],[97,12,90,12,"host"],[97,16,90,16],[97,18,90,18],[98,6,91,8,"results"],[98,13,91,15],[98,17,91,19,"res"],[98,20,91,22],[98,21,91,23,"host"],[98,25,91,27],[99,4,92,4],[100,4,93,4],[100,8,93,8,"res"],[100,11,93,11],[100,12,93,12,"pathname"],[100,20,93,20],[100,22,93,22],[101,6,94,8,"results"],[101,13,94,15],[101,17,94,19,"res"],[101,20,94,22],[101,21,94,23,"pathname"],[101,29,94,31],[102,4,95,4],[103,4,96,4],[103,10,96,10,"qs"],[103,12,96,12],[103,15,96,15],[103,16,96,16,"res"],[103,19,96,19],[103,20,96,20,"search"],[103,26,96,26],[103,29,97,10],[103,31,97,12],[104,4,98,10],[105,4,99,12],[105,5,99,13],[105,8,99,16,"res"],[105,11,99,19],[105,12,99,20,"searchParams"],[105,24,99,32],[105,25,99,33,"entries"],[105,32,99,40],[105,33,99,41],[105,34,99,42],[105,35,99,43],[105,36,99,44,"map"],[105,39,99,47],[105,40,99,48],[105,41,99,49],[105,42,99,50,"k"],[105,43,99,51],[105,45,99,53,"v"],[105,46,99,54],[105,47,99,55],[105,52,99,60],[105,55,99,63,"k"],[105,56,99,64],[105,60,99,68,"decodeURIComponent"],[105,78,99,86],[105,79,99,87,"v"],[105,80,99,88],[105,81,99,89],[105,83,99,91],[105,84,99,92],[105,85,99,93,"join"],[105,89,99,97],[105,90,99,98],[105,93,99,101],[105,94,99,102],[106,4,100,4],[106,8,100,8,"qs"],[106,10,100,10],[106,12,100,12],[107,6,101,8,"results"],[107,13,101,15],[107,17,101,19],[107,20,101,22],[107,23,101,25,"qs"],[107,25,101,27],[108,4,102,4],[109,4,103,4],[109,11,103,11,"results"],[109,18,103,18],[110,2,104,0],[111,2,105,0],[111,11,105,9,"extractExpoPathFromURL"],[111,33,105,31,"extractExpoPathFromURL"],[111,34,105,32,"_prefixes"],[111,43,105,41],[111,45,105,43,"url"],[111,48,105,46],[111,51,105,49],[111,53,105,51],[111,55,105,53],[112,4,106,4],[112,11,106,12,"extractExactPathFromURL"],[112,34,106,35],[112,35,106,36,"url"],[112,38,106,39],[113,4,107,8],[114,4,107,8],[114,5,108,9,"replace"],[114,12,108,16],[114,13,108,17],[114,18,108,22],[114,20,108,24],[114,22,108,26],[114,23,108,27],[115,2,109,0],[116,0,109,1],[116,3]],"functionMap":{"names":["<global>","parsePathAndParamsFromExpoGoLink","parsePathFromExpoGoLink","extractExactPathFromURL","isExpoDevelopmentClient","fromDeepLink","map$argument_0","extractExpoPathFromURL"],"mappings":"AAA;ACK;CDS;AEC;CFI;AGE;CHgC;AIE;CJE;AKC;gDCwC,2CD;CLK;AOC;CPI"},"hasCjsExports":true},"type":"js/module"}]}