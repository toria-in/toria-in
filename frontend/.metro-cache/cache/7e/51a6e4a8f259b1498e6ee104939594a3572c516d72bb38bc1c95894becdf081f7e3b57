{"dependencies":[{"name":"tslib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":14,"index":135},"end":{"line":4,"column":30,"index":151}}],"key":"vm88vOsSPZItrLOmMEyUuGkd1y4=","exportNames":["*"],"imports":1}},{"name":"./LayoutManager","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":22,"index":175},"end":{"line":5,"column":48,"index":201}}],"key":"zvYNKl5We8eXKq0On0iqzaQXh50=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.RVLinearLayoutManagerImpl = void 0;\n  var tslib_1 = require(_dependencyMap[0], \"tslib\");\n  var LayoutManager_1 = require(_dependencyMap[1], \"./LayoutManager\");\n  /**\n   * LinearLayoutManager implementation that arranges items in a single row or column.\n   * Supports both horizontal and vertical layouts with dynamic item sizing.\n   */\n  var RVLinearLayoutManagerImpl = /** @class */function (_super) {\n    tslib_1.__extends(RVLinearLayoutManagerImpl, _super);\n    function RVLinearLayoutManagerImpl(params, previousLayoutManager) {\n      var _this = _super.call(this, params, previousLayoutManager) || this;\n      /** Whether the bounded size has been set */\n      _this.hasSize = false;\n      /** Height of the tallest item */\n      _this.tallestItemHeight = 0;\n      _this.boundedSize = _this.horizontal ? params.windowSize.height : params.windowSize.width;\n      _this.hasSize = _this.boundedSize > 0;\n      return _this;\n    }\n    /**\n     * Updates layout parameters and triggers recomputation if necessary.\n     * @param params New layout parameters\n     */\n    RVLinearLayoutManagerImpl.prototype.updateLayoutParams = function (params) {\n      var prevHorizontal = this.horizontal;\n      _super.prototype.updateLayoutParams.call(this, params);\n      var oldBoundedSize = this.boundedSize;\n      this.boundedSize = this.horizontal ? params.windowSize.height : params.windowSize.width;\n      if (oldBoundedSize !== this.boundedSize || prevHorizontal !== this.horizontal) {\n        if (this.layouts.length > 0) {\n          // console.log(\"-----> recomputeLayouts\", this.horizontal);\n          this.recomputeLayouts(0, this.layouts.length - 1);\n          this.requiresRepaint = true;\n        }\n      }\n    };\n    /**\n     * Processes layout information for items, updating their dimensions.\n     * For horizontal layouts, also normalizes heights of items.\n     * @param layoutInfo Array of layout information for items\n     * @param itemCount Total number of items in the list\n     */\n    RVLinearLayoutManagerImpl.prototype.processLayoutInfo = function (layoutInfo, itemCount) {\n      var e_1, _a;\n      try {\n        // Update layout information\n        for (var layoutInfo_1 = tslib_1.__values(layoutInfo), layoutInfo_1_1 = layoutInfo_1.next(); !layoutInfo_1_1.done; layoutInfo_1_1 = layoutInfo_1.next()) {\n          var info = layoutInfo_1_1.value;\n          var index = info.index,\n            dimensions = info.dimensions;\n          var layout = this.layouts[index];\n          layout.width = this.horizontal ? dimensions.width : this.boundedSize;\n          layout.isHeightMeasured = true;\n          layout.isWidthMeasured = true;\n          layout.height = dimensions.height;\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (layoutInfo_1_1 && !layoutInfo_1_1.done && (_a = layoutInfo_1.return)) _a.call(layoutInfo_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      if (this.horizontal && !this.hasSize) {\n        this.normalizeLayoutHeights(layoutInfo);\n      }\n    };\n    /**\n     * Estimates layout dimensions for an item at the given index.\n     * @param index Index of the item to estimate layout for\n     */\n    RVLinearLayoutManagerImpl.prototype.estimateLayout = function (index) {\n      var layout = this.layouts[index];\n      layout.width = this.horizontal ? this.getEstimatedWidth(index) : this.boundedSize;\n      layout.height = this.getEstimatedHeight(index);\n      layout.isWidthMeasured = !this.horizontal;\n      layout.enforcedWidth = !this.horizontal;\n    };\n    /**\n     * Returns the total size of the layout area.\n     * @returns RVDimension containing width and height of the layout\n     */\n    RVLinearLayoutManagerImpl.prototype.getLayoutSize = function () {\n      var _a, _b;\n      if (this.layouts.length === 0) return {\n        width: 0,\n        height: 0\n      };\n      var lastLayout = this.layouts[this.layouts.length - 1];\n      return {\n        width: this.horizontal ? lastLayout.x + lastLayout.width : this.boundedSize,\n        height: this.horizontal ? (_b = (_a = this.tallestItem) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : this.boundedSize : lastLayout.y + lastLayout.height\n      };\n    };\n    /**\n     * Normalizes heights of items in horizontal layout to match the tallest item.\n     * @param layoutInfo Array of layout information for items\n     */\n    RVLinearLayoutManagerImpl.prototype.normalizeLayoutHeights = function (layoutInfo) {\n      var e_2, _a, e_3, _b;\n      var _c, _d;\n      var newTallestItem;\n      try {\n        for (var layoutInfo_2 = tslib_1.__values(layoutInfo), layoutInfo_2_1 = layoutInfo_2.next(); !layoutInfo_2_1.done; layoutInfo_2_1 = layoutInfo_2.next()) {\n          var info = layoutInfo_2_1.value;\n          var index = info.index;\n          var layout = this.layouts[index];\n          if (layout.height > ((_c = layout.minHeight) !== null && _c !== void 0 ? _c : 0) && layout.height > ((_d = newTallestItem === null || newTallestItem === void 0 ? void 0 : newTallestItem.height) !== null && _d !== void 0 ? _d : 0)) {\n            newTallestItem = layout;\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (layoutInfo_2_1 && !layoutInfo_2_1.done && (_a = layoutInfo_2.return)) _a.call(layoutInfo_2);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n      if (newTallestItem && newTallestItem.height !== this.tallestItemHeight) {\n        var targetMinHeight = newTallestItem.height;\n        if (newTallestItem.height < this.tallestItemHeight) {\n          this.requiresRepaint = true;\n          targetMinHeight = 0;\n        }\n        try {\n          // set minHeight for all layouts\n          for (var _e = tslib_1.__values(this.layouts), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var layout = _f.value;\n            if (targetMinHeight > 0) {\n              layout.height = newTallestItem.height;\n            }\n            layout.minHeight = targetMinHeight;\n          }\n        } catch (e_3_1) {\n          e_3 = {\n            error: e_3_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_3) throw e_3.error;\n          }\n        }\n        newTallestItem.minHeight = 0;\n        this.tallestItem = newTallestItem;\n        this.tallestItemHeight = newTallestItem.height;\n      }\n    };\n    /**\n     * Recomputes layouts for items in the given range.\n     * Positions items sequentially based on layout direction.\n     * @param startIndex Starting index of items to recompute\n     * @param endIndex Ending index of items to recompute\n     */\n    RVLinearLayoutManagerImpl.prototype.recomputeLayouts = function (startIndex, endIndex) {\n      for (var i = startIndex; i <= endIndex; i++) {\n        var layout = this.getLayout(i);\n        // Set positions based on whether this is the first item or not\n        if (i === 0) {\n          layout.x = 0;\n          layout.y = 0;\n        } else {\n          var prevLayout = this.getLayout(i - 1);\n          layout.x = this.horizontal ? prevLayout.x + prevLayout.width : 0;\n          layout.y = this.horizontal ? 0 : prevLayout.y + prevLayout.height;\n        }\n        // Set width for vertical layouts\n        if (!this.horizontal) {\n          layout.width = this.boundedSize;\n        } else if (this.hasSize) {\n          layout.minHeight = this.boundedSize;\n        }\n      }\n    };\n    return RVLinearLayoutManagerImpl;\n  }(LayoutManager_1.RVLayoutManager);\n  exports.RVLinearLayoutManagerImpl = RVLinearLayoutManagerImpl;\n});","lineCount":193,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"RVLinearLayoutManagerImpl"],[7,35,3,33],[7,38,3,36],[7,43,3,41],[7,44,3,42],[8,2,4,0],[8,6,4,4,"tslib_1"],[8,13,4,11],[8,16,4,14,"require"],[8,23,4,21],[8,24,4,21,"_dependencyMap"],[8,38,4,21],[8,50,4,29],[8,51,4,30],[9,2,5,0],[9,6,5,4,"LayoutManager_1"],[9,21,5,19],[9,24,5,22,"require"],[9,31,5,29],[9,32,5,29,"_dependencyMap"],[9,46,5,29],[9,68,5,47],[9,69,5,48],[10,2,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,2,10,0],[14,6,10,4,"RVLinearLayoutManagerImpl"],[14,31,10,29],[14,34,10,32],[14,47,10,47],[14,57,10,57,"_super"],[14,63,10,63],[14,65,10,65],[15,4,11,4,"tslib_1"],[15,11,11,11],[15,12,11,12,"__extends"],[15,21,11,21],[15,22,11,22,"RVLinearLayoutManagerImpl"],[15,47,11,47],[15,49,11,49,"_super"],[15,55,11,55],[15,56,11,56],[16,4,12,4],[16,13,12,13,"RVLinearLayoutManagerImpl"],[16,38,12,38,"RVLinearLayoutManagerImpl"],[16,39,12,39,"params"],[16,45,12,45],[16,47,12,47,"previousLayoutManager"],[16,68,12,68],[16,70,12,70],[17,6,13,8],[17,10,13,12,"_this"],[17,15,13,17],[17,18,13,20,"_super"],[17,24,13,26],[17,25,13,27,"call"],[17,29,13,31],[17,30,13,32],[17,34,13,36],[17,36,13,38,"params"],[17,42,13,44],[17,44,13,46,"previousLayoutManager"],[17,65,13,67],[17,66,13,68],[17,70,13,72],[17,74,13,76],[18,6,14,8],[19,6,15,8,"_this"],[19,11,15,13],[19,12,15,14,"hasSize"],[19,19,15,21],[19,22,15,24],[19,27,15,29],[20,6,16,8],[21,6,17,8,"_this"],[21,11,17,13],[21,12,17,14,"tallestItemHeight"],[21,29,17,31],[21,32,17,34],[21,33,17,35],[22,6,18,8,"_this"],[22,11,18,13],[22,12,18,14,"boundedSize"],[22,23,18,25],[22,26,18,28,"_this"],[22,31,18,33],[22,32,18,34,"horizontal"],[22,42,18,44],[22,45,19,14,"params"],[22,51,19,20],[22,52,19,21,"windowSize"],[22,62,19,31],[22,63,19,32,"height"],[22,69,19,38],[22,72,20,14,"params"],[22,78,20,20],[22,79,20,21,"windowSize"],[22,89,20,31],[22,90,20,32,"width"],[22,95,20,37],[23,6,21,8,"_this"],[23,11,21,13],[23,12,21,14,"hasSize"],[23,19,21,21],[23,22,21,24,"_this"],[23,27,21,29],[23,28,21,30,"boundedSize"],[23,39,21,41],[23,42,21,44],[23,43,21,45],[24,6,22,8],[24,13,22,15,"_this"],[24,18,22,20],[25,4,23,4],[26,4,24,4],[27,0,25,0],[28,0,26,0],[29,0,27,0],[30,4,28,4,"RVLinearLayoutManagerImpl"],[30,29,28,29],[30,30,28,30,"prototype"],[30,39,28,39],[30,40,28,40,"updateLayoutParams"],[30,58,28,58],[30,61,28,61],[30,71,28,71,"params"],[30,77,28,77],[30,79,28,79],[31,6,29,8],[31,10,29,12,"prevHorizontal"],[31,24,29,26],[31,27,29,29],[31,31,29,33],[31,32,29,34,"horizontal"],[31,42,29,44],[32,6,30,8,"_super"],[32,12,30,14],[32,13,30,15,"prototype"],[32,22,30,24],[32,23,30,25,"updateLayoutParams"],[32,41,30,43],[32,42,30,44,"call"],[32,46,30,48],[32,47,30,49],[32,51,30,53],[32,53,30,55,"params"],[32,59,30,61],[32,60,30,62],[33,6,31,8],[33,10,31,12,"oldBoundedSize"],[33,24,31,26],[33,27,31,29],[33,31,31,33],[33,32,31,34,"boundedSize"],[33,43,31,45],[34,6,32,8],[34,10,32,12],[34,11,32,13,"boundedSize"],[34,22,32,24],[34,25,32,27],[34,29,32,31],[34,30,32,32,"horizontal"],[34,40,32,42],[34,43,33,14,"params"],[34,49,33,20],[34,50,33,21,"windowSize"],[34,60,33,31],[34,61,33,32,"height"],[34,67,33,38],[34,70,34,14,"params"],[34,76,34,20],[34,77,34,21,"windowSize"],[34,87,34,31],[34,88,34,32,"width"],[34,93,34,37],[35,6,35,8],[35,10,35,12,"oldBoundedSize"],[35,24,35,26],[35,29,35,31],[35,33,35,35],[35,34,35,36,"boundedSize"],[35,45,35,47],[35,49,36,12,"prevHorizontal"],[35,63,36,26],[35,68,36,31],[35,72,36,35],[35,73,36,36,"horizontal"],[35,83,36,46],[35,85,36,48],[36,8,37,12],[36,12,37,16],[36,16,37,20],[36,17,37,21,"layouts"],[36,24,37,28],[36,25,37,29,"length"],[36,31,37,35],[36,34,37,38],[36,35,37,39],[36,37,37,41],[37,10,38,16],[38,10,39,16],[38,14,39,20],[38,15,39,21,"recomputeLayouts"],[38,31,39,37],[38,32,39,38],[38,33,39,39],[38,35,39,41],[38,39,39,45],[38,40,39,46,"layouts"],[38,47,39,53],[38,48,39,54,"length"],[38,54,39,60],[38,57,39,63],[38,58,39,64],[38,59,39,65],[39,10,40,16],[39,14,40,20],[39,15,40,21,"requiresRepaint"],[39,30,40,36],[39,33,40,39],[39,37,40,43],[40,8,41,12],[41,6,42,8],[42,4,43,4],[42,5,43,5],[43,4,44,4],[44,0,45,0],[45,0,46,0],[46,0,47,0],[47,0,48,0],[48,0,49,0],[49,4,50,4,"RVLinearLayoutManagerImpl"],[49,29,50,29],[49,30,50,30,"prototype"],[49,39,50,39],[49,40,50,40,"processLayoutInfo"],[49,57,50,57],[49,60,50,60],[49,70,50,70,"layoutInfo"],[49,80,50,80],[49,82,50,82,"itemCount"],[49,91,50,91],[49,93,50,93],[50,6,51,8],[50,10,51,12,"e_1"],[50,13,51,15],[50,15,51,17,"_a"],[50,17,51,19],[51,6,52,8],[51,10,52,12],[52,8,53,12],[53,8,54,12],[53,13,54,17],[53,17,54,21,"layoutInfo_1"],[53,29,54,33],[53,32,54,36,"tslib_1"],[53,39,54,43],[53,40,54,44,"__values"],[53,48,54,52],[53,49,54,53,"layoutInfo"],[53,59,54,63],[53,60,54,64],[53,62,54,66,"layoutInfo_1_1"],[53,76,54,80],[53,79,54,83,"layoutInfo_1"],[53,91,54,95],[53,92,54,96,"next"],[53,96,54,100],[53,97,54,101],[53,98,54,102],[53,100,54,104],[53,101,54,105,"layoutInfo_1_1"],[53,115,54,119],[53,116,54,120,"done"],[53,120,54,124],[53,122,54,126,"layoutInfo_1_1"],[53,136,54,140],[53,139,54,143,"layoutInfo_1"],[53,151,54,155],[53,152,54,156,"next"],[53,156,54,160],[53,157,54,161],[53,158,54,162],[53,160,54,164],[54,10,55,16],[54,14,55,20,"info"],[54,18,55,24],[54,21,55,27,"layoutInfo_1_1"],[54,35,55,41],[54,36,55,42,"value"],[54,41,55,47],[55,10,56,16],[55,14,56,20,"index"],[55,19,56,25],[55,22,56,28,"info"],[55,26,56,32],[55,27,56,33,"index"],[55,32,56,38],[56,12,56,40,"dimensions"],[56,22,56,50],[56,25,56,53,"info"],[56,29,56,57],[56,30,56,58,"dimensions"],[56,40,56,68],[57,10,57,16],[57,14,57,20,"layout"],[57,20,57,26],[57,23,57,29],[57,27,57,33],[57,28,57,34,"layouts"],[57,35,57,41],[57,36,57,42,"index"],[57,41,57,47],[57,42,57,48],[58,10,58,16,"layout"],[58,16,58,22],[58,17,58,23,"width"],[58,22,58,28],[58,25,58,31],[58,29,58,35],[58,30,58,36,"horizontal"],[58,40,58,46],[58,43,58,49,"dimensions"],[58,53,58,59],[58,54,58,60,"width"],[58,59,58,65],[58,62,58,68],[58,66,58,72],[58,67,58,73,"boundedSize"],[58,78,58,84],[59,10,59,16,"layout"],[59,16,59,22],[59,17,59,23,"isHeightMeasured"],[59,33,59,39],[59,36,59,42],[59,40,59,46],[60,10,60,16,"layout"],[60,16,60,22],[60,17,60,23,"isWidthMeasured"],[60,32,60,38],[60,35,60,41],[60,39,60,45],[61,10,61,16,"layout"],[61,16,61,22],[61,17,61,23,"height"],[61,23,61,29],[61,26,61,32,"dimensions"],[61,36,61,42],[61,37,61,43,"height"],[61,43,61,49],[62,8,62,12],[63,6,63,8],[63,7,63,9],[63,8,64,8],[63,15,64,15,"e_1_1"],[63,20,64,20],[63,22,64,22],[64,8,64,24,"e_1"],[64,11,64,27],[64,14,64,30],[65,10,64,32,"error"],[65,15,64,37],[65,17,64,39,"e_1_1"],[66,8,64,45],[66,9,64,46],[67,6,64,48],[67,7,64,49],[67,16,65,16],[68,8,66,12],[68,12,66,16],[69,10,67,16],[69,14,67,20,"layoutInfo_1_1"],[69,28,67,34],[69,32,67,38],[69,33,67,39,"layoutInfo_1_1"],[69,47,67,53],[69,48,67,54,"done"],[69,52,67,58],[69,57,67,63,"_a"],[69,59,67,65],[69,62,67,68,"layoutInfo_1"],[69,74,67,80],[69,75,67,81,"return"],[69,81,67,87],[69,82,67,88],[69,84,67,90,"_a"],[69,86,67,92],[69,87,67,93,"call"],[69,91,67,97],[69,92,67,98,"layoutInfo_1"],[69,104,67,110],[69,105,67,111],[70,8,68,12],[70,9,68,13],[70,18,69,20],[71,10,69,22],[71,14,69,26,"e_1"],[71,17,69,29],[71,19,69,31],[71,25,69,37,"e_1"],[71,28,69,40],[71,29,69,41,"error"],[71,34,69,46],[72,8,69,48],[73,6,70,8],[74,6,71,8],[74,10,71,12],[74,14,71,16],[74,15,71,17,"horizontal"],[74,25,71,27],[74,29,71,31],[74,30,71,32],[74,34,71,36],[74,35,71,37,"hasSize"],[74,42,71,44],[74,44,71,46],[75,8,72,12],[75,12,72,16],[75,13,72,17,"normalizeLayoutHeights"],[75,35,72,39],[75,36,72,40,"layoutInfo"],[75,46,72,50],[75,47,72,51],[76,6,73,8],[77,4,74,4],[77,5,74,5],[78,4,75,4],[79,0,76,0],[80,0,77,0],[81,0,78,0],[82,4,79,4,"RVLinearLayoutManagerImpl"],[82,29,79,29],[82,30,79,30,"prototype"],[82,39,79,39],[82,40,79,40,"estimateLayout"],[82,54,79,54],[82,57,79,57],[82,67,79,67,"index"],[82,72,79,72],[82,74,79,74],[83,6,80,8],[83,10,80,12,"layout"],[83,16,80,18],[83,19,80,21],[83,23,80,25],[83,24,80,26,"layouts"],[83,31,80,33],[83,32,80,34,"index"],[83,37,80,39],[83,38,80,40],[84,6,81,8,"layout"],[84,12,81,14],[84,13,81,15,"width"],[84,18,81,20],[84,21,81,23],[84,25,81,27],[84,26,81,28,"horizontal"],[84,36,81,38],[84,39,82,14],[84,43,82,18],[84,44,82,19,"getEstimatedWidth"],[84,61,82,36],[84,62,82,37,"index"],[84,67,82,42],[84,68,82,43],[84,71,83,14],[84,75,83,18],[84,76,83,19,"boundedSize"],[84,87,83,30],[85,6,84,8,"layout"],[85,12,84,14],[85,13,84,15,"height"],[85,19,84,21],[85,22,84,24],[85,26,84,28],[85,27,84,29,"getEstimatedHeight"],[85,45,84,47],[85,46,84,48,"index"],[85,51,84,53],[85,52,84,54],[86,6,85,8,"layout"],[86,12,85,14],[86,13,85,15,"isWidthMeasured"],[86,28,85,30],[86,31,85,33],[86,32,85,34],[86,36,85,38],[86,37,85,39,"horizontal"],[86,47,85,49],[87,6,86,8,"layout"],[87,12,86,14],[87,13,86,15,"enforcedWidth"],[87,26,86,28],[87,29,86,31],[87,30,86,32],[87,34,86,36],[87,35,86,37,"horizontal"],[87,45,86,47],[88,4,87,4],[88,5,87,5],[89,4,88,4],[90,0,89,0],[91,0,90,0],[92,0,91,0],[93,4,92,4,"RVLinearLayoutManagerImpl"],[93,29,92,29],[93,30,92,30,"prototype"],[93,39,92,39],[93,40,92,40,"getLayoutSize"],[93,53,92,53],[93,56,92,56],[93,68,92,68],[94,6,93,8],[94,10,93,12,"_a"],[94,12,93,14],[94,14,93,16,"_b"],[94,16,93,18],[95,6,94,8],[95,10,94,12],[95,14,94,16],[95,15,94,17,"layouts"],[95,22,94,24],[95,23,94,25,"length"],[95,29,94,31],[95,34,94,36],[95,35,94,37],[95,37,95,12],[95,44,95,19],[96,8,95,21,"width"],[96,13,95,26],[96,15,95,28],[96,16,95,29],[97,8,95,31,"height"],[97,14,95,37],[97,16,95,39],[98,6,95,41],[98,7,95,42],[99,6,96,8],[99,10,96,12,"lastLayout"],[99,20,96,22],[99,23,96,25],[99,27,96,29],[99,28,96,30,"layouts"],[99,35,96,37],[99,36,96,38],[99,40,96,42],[99,41,96,43,"layouts"],[99,48,96,50],[99,49,96,51,"length"],[99,55,96,57],[99,58,96,60],[99,59,96,61],[99,60,96,62],[100,6,97,8],[100,13,97,15],[101,8,98,12,"width"],[101,13,98,17],[101,15,98,19],[101,19,98,23],[101,20,98,24,"horizontal"],[101,30,98,34],[101,33,99,18,"lastLayout"],[101,43,99,28],[101,44,99,29,"x"],[101,45,99,30],[101,48,99,33,"lastLayout"],[101,58,99,43],[101,59,99,44,"width"],[101,64,99,49],[101,67,100,18],[101,71,100,22],[101,72,100,23,"boundedSize"],[101,83,100,34],[102,8,101,12,"height"],[102,14,101,18],[102,16,101,20],[102,20,101,24],[102,21,101,25,"horizontal"],[102,31,101,35],[102,34,102,18],[102,35,102,19,"_b"],[102,37,102,21],[102,40,102,24],[102,41,102,25,"_a"],[102,43,102,27],[102,46,102,30],[102,50,102,34],[102,51,102,35,"tallestItem"],[102,62,102,46],[102,68,102,52],[102,72,102,56],[102,76,102,60,"_a"],[102,78,102,62],[102,83,102,67],[102,88,102,72],[102,89,102,73],[102,92,102,76],[102,97,102,81],[102,98,102,82],[102,101,102,85,"_a"],[102,103,102,87],[102,104,102,88,"height"],[102,110,102,94],[102,116,102,100],[102,120,102,104],[102,124,102,108,"_b"],[102,126,102,110],[102,131,102,115],[102,136,102,120],[102,137,102,121],[102,140,102,124,"_b"],[102,142,102,126],[102,145,102,129],[102,149,102,133],[102,150,102,134,"boundedSize"],[102,161,102,145],[102,164,103,18,"lastLayout"],[102,174,103,28],[102,175,103,29,"y"],[102,176,103,30],[102,179,103,33,"lastLayout"],[102,189,103,43],[102,190,103,44,"height"],[103,6,104,8],[103,7,104,9],[104,4,105,4],[104,5,105,5],[105,4,106,4],[106,0,107,0],[107,0,108,0],[108,0,109,0],[109,4,110,4,"RVLinearLayoutManagerImpl"],[109,29,110,29],[109,30,110,30,"prototype"],[109,39,110,39],[109,40,110,40,"normalizeLayoutHeights"],[109,62,110,62],[109,65,110,65],[109,75,110,75,"layoutInfo"],[109,85,110,85],[109,87,110,87],[110,6,111,8],[110,10,111,12,"e_2"],[110,13,111,15],[110,15,111,17,"_a"],[110,17,111,19],[110,19,111,21,"e_3"],[110,22,111,24],[110,24,111,26,"_b"],[110,26,111,28],[111,6,112,8],[111,10,112,12,"_c"],[111,12,112,14],[111,14,112,16,"_d"],[111,16,112,18],[112,6,113,8],[112,10,113,12,"newTallestItem"],[112,24,113,26],[113,6,114,8],[113,10,114,12],[114,8,115,12],[114,13,115,17],[114,17,115,21,"layoutInfo_2"],[114,29,115,33],[114,32,115,36,"tslib_1"],[114,39,115,43],[114,40,115,44,"__values"],[114,48,115,52],[114,49,115,53,"layoutInfo"],[114,59,115,63],[114,60,115,64],[114,62,115,66,"layoutInfo_2_1"],[114,76,115,80],[114,79,115,83,"layoutInfo_2"],[114,91,115,95],[114,92,115,96,"next"],[114,96,115,100],[114,97,115,101],[114,98,115,102],[114,100,115,104],[114,101,115,105,"layoutInfo_2_1"],[114,115,115,119],[114,116,115,120,"done"],[114,120,115,124],[114,122,115,126,"layoutInfo_2_1"],[114,136,115,140],[114,139,115,143,"layoutInfo_2"],[114,151,115,155],[114,152,115,156,"next"],[114,156,115,160],[114,157,115,161],[114,158,115,162],[114,160,115,164],[115,10,116,16],[115,14,116,20,"info"],[115,18,116,24],[115,21,116,27,"layoutInfo_2_1"],[115,35,116,41],[115,36,116,42,"value"],[115,41,116,47],[116,10,117,16],[116,14,117,20,"index"],[116,19,117,25],[116,22,117,28,"info"],[116,26,117,32],[116,27,117,33,"index"],[116,32,117,38],[117,10,118,16],[117,14,118,20,"layout"],[117,20,118,26],[117,23,118,29],[117,27,118,33],[117,28,118,34,"layouts"],[117,35,118,41],[117,36,118,42,"index"],[117,41,118,47],[117,42,118,48],[118,10,119,16],[118,14,119,20,"layout"],[118,20,119,26],[118,21,119,27,"height"],[118,27,119,33],[118,31,119,37],[118,32,119,38,"_c"],[118,34,119,40],[118,37,119,43,"layout"],[118,43,119,49],[118,44,119,50,"minHeight"],[118,53,119,59],[118,59,119,65],[118,63,119,69],[118,67,119,73,"_c"],[118,69,119,75],[118,74,119,80],[118,79,119,85],[118,80,119,86],[118,83,119,89,"_c"],[118,85,119,91],[118,88,119,94],[118,89,119,95],[118,90,119,96],[118,94,120,20,"layout"],[118,100,120,26],[118,101,120,27,"height"],[118,107,120,33],[118,111,120,37],[118,112,120,38,"_d"],[118,114,120,40],[118,117,120,43,"newTallestItem"],[118,131,120,57],[118,136,120,62],[118,140,120,66],[118,144,120,70,"newTallestItem"],[118,158,120,84],[118,163,120,89],[118,168,120,94],[118,169,120,95],[118,172,120,98],[118,177,120,103],[118,178,120,104],[118,181,120,107,"newTallestItem"],[118,195,120,121],[118,196,120,122,"height"],[118,202,120,128],[118,208,120,134],[118,212,120,138],[118,216,120,142,"_d"],[118,218,120,144],[118,223,120,149],[118,228,120,154],[118,229,120,155],[118,232,120,158,"_d"],[118,234,120,160],[118,237,120,163],[118,238,120,164],[118,239,120,165],[118,241,120,167],[119,12,121,20,"newTallestItem"],[119,26,121,34],[119,29,121,37,"layout"],[119,35,121,43],[120,10,122,16],[121,8,123,12],[122,6,124,8],[122,7,124,9],[122,8,125,8],[122,15,125,15,"e_2_1"],[122,20,125,20],[122,22,125,22],[123,8,125,24,"e_2"],[123,11,125,27],[123,14,125,30],[124,10,125,32,"error"],[124,15,125,37],[124,17,125,39,"e_2_1"],[125,8,125,45],[125,9,125,46],[126,6,125,48],[126,7,125,49],[126,16,126,16],[127,8,127,12],[127,12,127,16],[128,10,128,16],[128,14,128,20,"layoutInfo_2_1"],[128,28,128,34],[128,32,128,38],[128,33,128,39,"layoutInfo_2_1"],[128,47,128,53],[128,48,128,54,"done"],[128,52,128,58],[128,57,128,63,"_a"],[128,59,128,65],[128,62,128,68,"layoutInfo_2"],[128,74,128,80],[128,75,128,81,"return"],[128,81,128,87],[128,82,128,88],[128,84,128,90,"_a"],[128,86,128,92],[128,87,128,93,"call"],[128,91,128,97],[128,92,128,98,"layoutInfo_2"],[128,104,128,110],[128,105,128,111],[129,8,129,12],[129,9,129,13],[129,18,130,20],[130,10,130,22],[130,14,130,26,"e_2"],[130,17,130,29],[130,19,130,31],[130,25,130,37,"e_2"],[130,28,130,40],[130,29,130,41,"error"],[130,34,130,46],[131,8,130,48],[132,6,131,8],[133,6,132,8],[133,10,132,12,"newTallestItem"],[133,24,132,26],[133,28,132,30,"newTallestItem"],[133,42,132,44],[133,43,132,45,"height"],[133,49,132,51],[133,54,132,56],[133,58,132,60],[133,59,132,61,"tallestItemHeight"],[133,76,132,78],[133,78,132,80],[134,8,133,12],[134,12,133,16,"targetMinHeight"],[134,27,133,31],[134,30,133,34,"newTallestItem"],[134,44,133,48],[134,45,133,49,"height"],[134,51,133,55],[135,8,134,12],[135,12,134,16,"newTallestItem"],[135,26,134,30],[135,27,134,31,"height"],[135,33,134,37],[135,36,134,40],[135,40,134,44],[135,41,134,45,"tallestItemHeight"],[135,58,134,62],[135,60,134,64],[136,10,135,16],[136,14,135,20],[136,15,135,21,"requiresRepaint"],[136,30,135,36],[136,33,135,39],[136,37,135,43],[137,10,136,16,"targetMinHeight"],[137,25,136,31],[137,28,136,34],[137,29,136,35],[138,8,137,12],[139,8,138,12],[139,12,138,16],[140,10,139,16],[141,10,140,16],[141,15,140,21],[141,19,140,25,"_e"],[141,21,140,27],[141,24,140,30,"tslib_1"],[141,31,140,37],[141,32,140,38,"__values"],[141,40,140,46],[141,41,140,47],[141,45,140,51],[141,46,140,52,"layouts"],[141,53,140,59],[141,54,140,60],[141,56,140,62,"_f"],[141,58,140,64],[141,61,140,67,"_e"],[141,63,140,69],[141,64,140,70,"next"],[141,68,140,74],[141,69,140,75],[141,70,140,76],[141,72,140,78],[141,73,140,79,"_f"],[141,75,140,81],[141,76,140,82,"done"],[141,80,140,86],[141,82,140,88,"_f"],[141,84,140,90],[141,87,140,93,"_e"],[141,89,140,95],[141,90,140,96,"next"],[141,94,140,100],[141,95,140,101],[141,96,140,102],[141,98,140,104],[142,12,141,20],[142,16,141,24,"layout"],[142,22,141,30],[142,25,141,33,"_f"],[142,27,141,35],[142,28,141,36,"value"],[142,33,141,41],[143,12,142,20],[143,16,142,24,"targetMinHeight"],[143,31,142,39],[143,34,142,42],[143,35,142,43],[143,37,142,45],[144,14,143,24,"layout"],[144,20,143,30],[144,21,143,31,"height"],[144,27,143,37],[144,30,143,40,"newTallestItem"],[144,44,143,54],[144,45,143,55,"height"],[144,51,143,61],[145,12,144,20],[146,12,145,20,"layout"],[146,18,145,26],[146,19,145,27,"minHeight"],[146,28,145,36],[146,31,145,39,"targetMinHeight"],[146,46,145,54],[147,10,146,16],[148,8,147,12],[148,9,147,13],[148,10,148,12],[148,17,148,19,"e_3_1"],[148,22,148,24],[148,24,148,26],[149,10,148,28,"e_3"],[149,13,148,31],[149,16,148,34],[150,12,148,36,"error"],[150,17,148,41],[150,19,148,43,"e_3_1"],[151,10,148,49],[151,11,148,50],[152,8,148,52],[152,9,148,53],[152,18,149,20],[153,10,150,16],[153,14,150,20],[154,12,151,20],[154,16,151,24,"_f"],[154,18,151,26],[154,22,151,30],[154,23,151,31,"_f"],[154,25,151,33],[154,26,151,34,"done"],[154,30,151,38],[154,35,151,43,"_b"],[154,37,151,45],[154,40,151,48,"_e"],[154,42,151,50],[154,43,151,51,"return"],[154,49,151,57],[154,50,151,58],[154,52,151,60,"_b"],[154,54,151,62],[154,55,151,63,"call"],[154,59,151,67],[154,60,151,68,"_e"],[154,62,151,70],[154,63,151,71],[155,10,152,16],[155,11,152,17],[155,20,153,24],[156,12,153,26],[156,16,153,30,"e_3"],[156,19,153,33],[156,21,153,35],[156,27,153,41,"e_3"],[156,30,153,44],[156,31,153,45,"error"],[156,36,153,50],[157,10,153,52],[158,8,154,12],[159,8,155,12,"newTallestItem"],[159,22,155,26],[159,23,155,27,"minHeight"],[159,32,155,36],[159,35,155,39],[159,36,155,40],[160,8,156,12],[160,12,156,16],[160,13,156,17,"tallestItem"],[160,24,156,28],[160,27,156,31,"newTallestItem"],[160,41,156,45],[161,8,157,12],[161,12,157,16],[161,13,157,17,"tallestItemHeight"],[161,30,157,34],[161,33,157,37,"newTallestItem"],[161,47,157,51],[161,48,157,52,"height"],[161,54,157,58],[162,6,158,8],[163,4,159,4],[163,5,159,5],[164,4,160,4],[165,0,161,0],[166,0,162,0],[167,0,163,0],[168,0,164,0],[169,0,165,0],[170,4,166,4,"RVLinearLayoutManagerImpl"],[170,29,166,29],[170,30,166,30,"prototype"],[170,39,166,39],[170,40,166,40,"recomputeLayouts"],[170,56,166,56],[170,59,166,59],[170,69,166,69,"startIndex"],[170,79,166,79],[170,81,166,81,"endIndex"],[170,89,166,89],[170,91,166,91],[171,6,167,8],[171,11,167,13],[171,15,167,17,"i"],[171,16,167,18],[171,19,167,21,"startIndex"],[171,29,167,31],[171,31,167,33,"i"],[171,32,167,34],[171,36,167,38,"endIndex"],[171,44,167,46],[171,46,167,48,"i"],[171,47,167,49],[171,49,167,51],[171,51,167,53],[172,8,168,12],[172,12,168,16,"layout"],[172,18,168,22],[172,21,168,25],[172,25,168,29],[172,26,168,30,"getLayout"],[172,35,168,39],[172,36,168,40,"i"],[172,37,168,41],[172,38,168,42],[173,8,169,12],[174,8,170,12],[174,12,170,16,"i"],[174,13,170,17],[174,18,170,22],[174,19,170,23],[174,21,170,25],[175,10,171,16,"layout"],[175,16,171,22],[175,17,171,23,"x"],[175,18,171,24],[175,21,171,27],[175,22,171,28],[176,10,172,16,"layout"],[176,16,172,22],[176,17,172,23,"y"],[176,18,172,24],[176,21,172,27],[176,22,172,28],[177,8,173,12],[177,9,173,13],[177,15,174,17],[178,10,175,16],[178,14,175,20,"prevLayout"],[178,24,175,30],[178,27,175,33],[178,31,175,37],[178,32,175,38,"getLayout"],[178,41,175,47],[178,42,175,48,"i"],[178,43,175,49],[178,46,175,52],[178,47,175,53],[178,48,175,54],[179,10,176,16,"layout"],[179,16,176,22],[179,17,176,23,"x"],[179,18,176,24],[179,21,176,27],[179,25,176,31],[179,26,176,32,"horizontal"],[179,36,176,42],[179,39,176,45,"prevLayout"],[179,49,176,55],[179,50,176,56,"x"],[179,51,176,57],[179,54,176,60,"prevLayout"],[179,64,176,70],[179,65,176,71,"width"],[179,70,176,76],[179,73,176,79],[179,74,176,80],[180,10,177,16,"layout"],[180,16,177,22],[180,17,177,23,"y"],[180,18,177,24],[180,21,177,27],[180,25,177,31],[180,26,177,32,"horizontal"],[180,36,177,42],[180,39,177,45],[180,40,177,46],[180,43,177,49,"prevLayout"],[180,53,177,59],[180,54,177,60,"y"],[180,55,177,61],[180,58,177,64,"prevLayout"],[180,68,177,74],[180,69,177,75,"height"],[180,75,177,81],[181,8,178,12],[182,8,179,12],[183,8,180,12],[183,12,180,16],[183,13,180,17],[183,17,180,21],[183,18,180,22,"horizontal"],[183,28,180,32],[183,30,180,34],[184,10,181,16,"layout"],[184,16,181,22],[184,17,181,23,"width"],[184,22,181,28],[184,25,181,31],[184,29,181,35],[184,30,181,36,"boundedSize"],[184,41,181,47],[185,8,182,12],[185,9,182,13],[185,15,183,17],[185,19,183,21],[185,23,183,25],[185,24,183,26,"hasSize"],[185,31,183,33],[185,33,183,35],[186,10,184,16,"layout"],[186,16,184,22],[186,17,184,23,"minHeight"],[186,26,184,32],[186,29,184,35],[186,33,184,39],[186,34,184,40,"boundedSize"],[186,45,184,51],[187,8,185,12],[188,6,186,8],[189,4,187,4],[189,5,187,5],[190,4,188,4],[190,11,188,11,"RVLinearLayoutManagerImpl"],[190,36,188,36],[191,2,189,0],[191,3,189,1],[191,4,189,2,"LayoutManager_1"],[191,19,189,17],[191,20,189,18,"RVLayoutManager"],[191,35,189,33],[191,36,189,35],[192,2,190,0,"exports"],[192,9,190,7],[192,10,190,8,"RVLinearLayoutManagerImpl"],[192,35,190,33],[192,38,190,36,"RVLinearLayoutManagerImpl"],[192,63,190,61],[193,0,190,62],[193,3]],"functionMap":{"names":["<global>","<anonymous>","RVLinearLayoutManagerImpl","RVLinearLayoutManagerImpl.prototype.updateLayoutParams","RVLinearLayoutManagerImpl.prototype.processLayoutInfo","RVLinearLayoutManagerImpl.prototype.estimateLayout","RVLinearLayoutManagerImpl.prototype.getLayoutSize","RVLinearLayoutManagerImpl.prototype.normalizeLayoutHeights","RVLinearLayoutManagerImpl.prototype.recomputeLayouts"],"mappings":"AAA;+CCS;ICE;KDW;6DEK;KFe;4DGO;KHwB;yDIK;KJQ;wDKK;KLa;iEMK;KNiD;2DOO;KPqB;CDE"},"hasCjsExports":true},"type":"js/module"}]}