{"dependencies":[{"name":"./matchers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":19,"index":217},"end":{"line":6,"column":40,"index":238}}],"key":"89ylKT57ef0l7ma8+p1HhPaMj94=","exportNames":["*"],"imports":1}},{"name":"./utils/url","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":14,"index":254},"end":{"line":7,"column":36,"index":276}}],"key":"KwepoOiDJIvcZxDqcbtt8RBrwgA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getRoutes = getRoutes;\n  exports.extrapolateGroups = extrapolateGroups;\n  exports.generateDynamic = generateDynamic;\n  const matchers_1 = require(_dependencyMap[0], \"./matchers\");\n  const url_1 = require(_dependencyMap[1], \"./utils/url\");\n  const validPlatforms = new Set(['android', 'ios', 'native', 'web']);\n  /**\n   * Given a Metro context module, return an array of nested routes.\n   *\n   * This is a two step process:\n   *  1. Convert the RequireContext keys (file paths) into a directory tree.\n   *      - This should extrapolate array syntax into multiple routes\n   *      - Routes are given a specificity score\n   *  2. Flatten the directory tree into routes\n   *      - Routes in directories without _layout files are hoisted to the nearest _layout\n   *      - The name of the route is relative to the nearest _layout\n   *      - If multiple routes have the same name, the most specific route is used\n   */\n  function getRoutes(contextModule, options) {\n    const middleware = getMiddleware(contextModule, options);\n    const directoryTree = getDirectoryTree(contextModule, options);\n    // If there are no routes\n    if (!directoryTree) {\n      return null;\n    }\n    const rootNode = flattenDirectoryTreeToRoutes(directoryTree, options);\n    if (middleware) {\n      rootNode.middleware = middleware;\n    }\n    if (!options.ignoreEntryPoints) {\n      crawlAndAppendInitialRoutesAndEntryFiles(rootNode, options);\n    }\n    return rootNode;\n  }\n  /**\n   * Given a RequireContext, return the middleware node if one is found. If more than one middleware file is found, an error is thrown.\n   */\n  function getMiddleware(contextModule, options) {\n    const allMiddlewareFiles = contextModule.keys().filter(key => key.includes('+middleware'));\n    // Check if middleware is enabled via plugin config\n    if (!options.unstable_useServerMiddleware) {\n      if (allMiddlewareFiles.length > 0) {\n        console.warn('Server middleware is not enabled. Add unstable_useServerMiddleware: true to your `expo-router` plugin config.\\n\\n' + JSON.stringify({\n          expo: {\n            plugins: [['expo-router', {\n              unstable_useServerMiddleware: true\n            }]]\n          }\n        }, null, 2));\n      }\n      return null;\n    }\n    const isValidMiddleware = key => /^\\.\\/\\+middleware\\.[tj]sx?$/.test(key);\n    const rootMiddlewareFiles = allMiddlewareFiles.filter(isValidMiddleware);\n    const nonRootMiddleware = allMiddlewareFiles.filter(file => !rootMiddlewareFiles.includes(file));\n    if (nonRootMiddleware.length > 0) {\n      throw new Error(`The middleware file can only be placed at the root level. Remove the following files: ${nonRootMiddleware.join(', ')}`);\n    }\n    if (rootMiddlewareFiles.length === 0) {\n      return null;\n    }\n    // In development, throw an error if there are multiple root-level middleware files\n    if (rootMiddlewareFiles.length > 1) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(`Only one middleware file is allowed. Keep one of the conflicting files: ${rootMiddlewareFiles.map(p => `\"${p}\"`).join(' or ')}`);\n      }\n    }\n    const middlewareFilePath = rootMiddlewareFiles[0];\n    const middleware = {\n      loadRoute() {\n        if (options.ignoreRequireErrors) {\n          try {\n            return contextModule(middlewareFilePath);\n          } catch {\n            return {};\n          }\n        } else {\n          return contextModule(middlewareFilePath);\n        }\n      },\n      contextKey: middlewareFilePath\n    };\n    if (options.internal_stripLoadRoute) {\n      delete middleware.loadRoute;\n    }\n    return middleware;\n  }\n  /**\n   * Converts the RequireContext keys (file paths) into a directory tree.\n   */\n  function getDirectoryTree(contextModule, options) {\n    const importMode = options.importMode || \"sync\";\n    const ignoreList = [/^\\.\\/\\+(html|native-intent)\\.[tj]sx?$/]; // Ignore the top level ./+html file\n    if (options.ignore) {\n      ignoreList.push(...options.ignore);\n    }\n    if (!options.preserveApiRoutes) {\n      ignoreList.push(/\\+api$/, /\\+api\\.[tj]sx?$/);\n    }\n    // Always ignore middleware files in regular route processing\n    ignoreList.push(/\\+middleware$/, /\\+middleware\\.[tj]sx?$/);\n    const rootDirectory = {\n      files: new Map(),\n      subdirectories: new Map()\n    };\n    let hasRoutes = false;\n    let isValid = false;\n    const contextKeys = contextModule.keys();\n    const redirects = {};\n    const rewrites = {};\n    let validRedirectDestinations;\n    const getValidDestinations = () => {\n      // Loop over contexts once and cache the valid destinations\n      validRedirectDestinations ??= contextKeys.map(key => {\n        return {\n          contextKey: key,\n          nameWithoutInvisible: getNameWithoutInvisibleSegmentsFromRedirectPath((0, matchers_1.removeSupportedExtensions)(key))\n        };\n      });\n      return validRedirectDestinations;\n    };\n    // If we are keeping redirects as valid routes, then we need to add them to the contextKeys\n    // This is useful for generating a sitemap with redirects, or static site generation that includes redirects\n    if (options.preserveRedirectAndRewrites) {\n      if (options.redirects) {\n        for (const redirect of options.redirects) {\n          const sourceContextKey = getSourceContextKeyFromRedirectSource(redirect.source);\n          const sourceName = getNameFromRedirectPath(redirect.source);\n          const isExternalRedirect = (0, url_1.shouldLinkExternally)(redirect.destination);\n          const targetDestinationName = isExternalRedirect ? redirect.destination : getNameWithoutInvisibleSegmentsFromRedirectPath(redirect.destination);\n          if (ignoreList.some(regex => regex.test(sourceContextKey))) {\n            continue;\n          }\n          const validDestination = isExternalRedirect ? undefined : getValidDestinations().find(key => key.nameWithoutInvisible === targetDestinationName);\n          const destination = isExternalRedirect ? targetDestinationName : validDestination?.nameWithoutInvisible;\n          const destinationContextKey = isExternalRedirect ? targetDestinationName : validDestination?.contextKey;\n          if (!destinationContextKey || destination === undefined) {\n            /*\n             * Only throw the error when we are preserving the api routes\n             * When doing a static export, API routes will not exist so the redirect destination may not exist.\n             * The desired behavior for this error is to warn the user when running `expo start`, so its ok if\n             * `expo export` swallows this error.\n             */\n            if (options.preserveApiRoutes) {\n              throw new Error(`Redirect destination \"${redirect.destination}\" does not exist.`);\n            }\n            continue;\n          }\n          contextKeys.push(sourceContextKey);\n          redirects[sourceName] = {\n            source: sourceName,\n            destination,\n            destinationContextKey,\n            permanent: Boolean(redirect.permanent),\n            external: isExternalRedirect,\n            methods: redirect.methods\n          };\n        }\n      }\n      if (options.rewrites) {\n        for (const rewrite of options.rewrites) {\n          const sourceContextKey = getSourceContextKeyFromRedirectSource(rewrite.source);\n          const sourceName = getNameFromRedirectPath(rewrite.source);\n          // We check to see if the context key is already known so that we don't create a rewrite for\n          // a route that already exists on disk\n          const isSourceContextKeyAlreadyKnown = contextKeys.includes(sourceContextKey);\n          const targetDestinationName = isSourceContextKeyAlreadyKnown ? getNameFromRedirectPath(rewrite.destination) : getNameWithoutInvisibleSegmentsFromRedirectPath(rewrite.destination);\n          if (ignoreList.some(regex => regex.test(sourceContextKey))) {\n            continue;\n          }\n          const validDestination = getValidDestinations().find(key => key.nameWithoutInvisible === targetDestinationName);\n          const destination = validDestination?.nameWithoutInvisible;\n          const destinationContextKey = validDestination?.contextKey;\n          if (!destinationContextKey || destination === undefined) {\n            /*\n             * Only throw the error when we are preserving the api routes\n             * When doing a static export, API routes will not exist so the redirect destination may not exist.\n             * The desired behavior for this error is to warn the user when running `expo start`, so its ok if\n             * `expo export` swallows this error.\n             */\n            if (options.preserveApiRoutes) {\n              throw new Error(`Rewrite destination \"${rewrite.destination}\" does not exist.`);\n            }\n            continue;\n          }\n          contextKeys.push(sourceContextKey);\n          rewrites[sourceName] = {\n            source: sourceName,\n            destination,\n            destinationContextKey,\n            methods: rewrite.methods\n          };\n        }\n      }\n    }\n    const processedRedirectsRewrites = new Set();\n    for (const filePath of contextKeys) {\n      if (ignoreList.some(regex => regex.test(filePath))) {\n        continue;\n      }\n      isValid = true;\n      const meta = getFileMeta(filePath, options, redirects, rewrites);\n      // This is a file that should be ignored. e.g maybe it has an invalid platform?\n      if (meta.specificity < 0) {\n        continue;\n      }\n      let node = {\n        type: meta.isApi ? 'api' : meta.isLayout ? 'layout' : 'route',\n        loadRoute() {\n          let routeModule;\n          if (options.ignoreRequireErrors) {\n            try {\n              routeModule = contextModule(filePath);\n            } catch {\n              routeModule = {};\n            }\n          } else {\n            routeModule = contextModule(filePath);\n          }\n          if (process.env.NODE_ENV === 'development' && importMode === 'sync') {\n            // In development mode, when async routes are disabled, add some extra error handling to improve the developer experience.\n            // This can be useful when you accidentally use an async function in a route file for the default export.\n            if (routeModule instanceof Promise) {\n              throw new Error(`Route \"${filePath}\" cannot be a promise when async routes is disabled.`);\n            }\n            const defaultExport = routeModule?.default;\n            if (defaultExport instanceof Promise) {\n              throw new Error(`The default export from route \"${filePath}\" is a promise. Ensure the React Component does not use async or promises.`);\n            }\n            // check if default is an async function without invoking it\n            if (defaultExport instanceof Function &&\n            // This only works on web because Hermes support async functions so we have to transform them out.\n            defaultExport.constructor.name === 'AsyncFunction') {\n              throw new Error(`The default export from route \"${filePath}\" is an async function. Ensure the React Component does not use async or promises.`);\n            }\n          }\n          return routeModule;\n        },\n        contextKey: filePath,\n        route: '',\n        // This is overwritten during hoisting based upon the _layout\n        dynamic: null,\n        children: [] // While we are building the directory tree, we don't know the node's children just yet. This is added during hoisting\n      };\n      if (meta.isRedirect) {\n        if (processedRedirectsRewrites.has(meta.route)) {\n          continue;\n        }\n        const redirect = redirects[meta.route];\n        node.destinationContextKey = redirect.destinationContextKey;\n        node.permanent = redirect.permanent;\n        node.generated = true;\n        if (node.type === 'route') {\n          node = options.getSystemRoute({\n            type: 'redirect',\n            route: redirect.destination,\n            defaults: node,\n            redirectConfig: redirect\n          });\n        }\n        if (redirect.methods) {\n          node.methods = redirect.methods;\n        }\n        node.type = 'redirect';\n        processedRedirectsRewrites.add(meta.route);\n      }\n      if (meta.isRewrite) {\n        if (processedRedirectsRewrites.has(meta.route)) {\n          continue;\n        }\n        const rewrite = rewrites[meta.route];\n        node.destinationContextKey = rewrite.destinationContextKey;\n        node.generated = true;\n        if (node.type === 'route') {\n          node = options.getSystemRoute({\n            type: 'rewrite',\n            route: rewrite.destination,\n            defaults: node,\n            rewriteConfig: rewrite\n          });\n        }\n        if (rewrite.methods) {\n          node.methods = rewrite.methods;\n        }\n        node.type = 'rewrite';\n        processedRedirectsRewrites.add(meta.route);\n      }\n      if (process.env.NODE_ENV === 'development') {\n        // If the user has set the `EXPO_ROUTER_IMPORT_MODE` to `sync` then we should\n        // filter the missing routes.\n        if (node.type !== 'api' && importMode === 'sync') {\n          const routeItem = node.loadRoute();\n          // Have a warning for nullish ex\n          const route = routeItem?.default;\n          if (route == null) {\n            // Do not throw an error since a user may just be creating a new route.\n            console.warn(`Route \"${filePath}\" is missing the required default export. Ensure a React component is exported as default.`);\n            continue;\n          }\n          if (['boolean', 'number', 'string'].includes(typeof route)) {\n            throw new Error(`The default export from route \"${filePath}\" is an unsupported type: \"${typeof route}\". Only React Components are supported as default exports from route files.`);\n          }\n        }\n      }\n      /**\n       * A single filepath may be extrapolated into multiple routes if it contains array syntax.\n       * Another way to thinking about is that a filepath node is present in multiple leaves of the directory tree.\n       */\n      for (const route of extrapolateGroups(meta.route)) {\n        // Traverse the directory tree to its leaf node, creating any missing directories along the way\n        const subdirectoryParts = route.split('/').slice(0, -1);\n        // Start at the root directory and traverse the path to the leaf directory\n        let directory = rootDirectory;\n        for (const part of subdirectoryParts) {\n          let subDirectory = directory.subdirectories.get(part);\n          // Create any missing subdirectories\n          if (!subDirectory) {\n            subDirectory = {\n              files: new Map(),\n              subdirectories: new Map()\n            };\n            directory.subdirectories.set(part, subDirectory);\n          }\n          directory = subDirectory;\n        }\n        // Clone the node for this route\n        node = {\n          ...node,\n          route\n        };\n        if (meta.isLayout) {\n          directory.layout ??= [];\n          const existing = directory.layout[meta.specificity];\n          if (existing) {\n            // In production, use the first route found\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`The layouts \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Remove or rename one of these files.`);\n            }\n          } else {\n            node = getLayoutNode(node, options);\n            directory.layout[meta.specificity] = node;\n          }\n        } else if (meta.isApi) {\n          const fileKey = `${route}+api`;\n          let nodes = directory.files.get(fileKey);\n          if (!nodes) {\n            nodes = [];\n            directory.files.set(fileKey, nodes);\n          }\n          // API Routes have no specificity, they are always the first node\n          const existing = nodes[0];\n          if (existing) {\n            // In production, use the first route found\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`The API route file \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Remove or rename one of these files.`);\n            }\n          } else {\n            nodes[0] = node;\n          }\n        } else {\n          let nodes = directory.files.get(route);\n          if (!nodes) {\n            nodes = [];\n            directory.files.set(route, nodes);\n          }\n          /**\n           * If there is an existing node with the same specificity, then we have a conflict.\n           * NOTE(Platform Routes):\n           *    We cannot check for specificity conflicts here, as we haven't processed all the context keys yet!\n           *    This will be checked during hoisting, as well as enforcing that all routes have a non-platform route.\n           */\n          const existing = nodes[meta.specificity];\n          if (existing) {\n            // In production, use the first route found\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`The route files \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Remove or rename one of these files.`);\n            }\n          } else {\n            hasRoutes ||= true;\n            nodes[meta.specificity] = node;\n          }\n        }\n      }\n    }\n    // If there are no routes/layouts then we should display the tutorial.\n    if (!isValid) {\n      return null;\n    }\n    /**\n     * If there are no top-level _layout, add a default _layout\n     * While this is a generated route, it will still be generated even if skipGenerated is true.\n     */\n    if (!rootDirectory.layout) {\n      rootDirectory.layout = [options.getSystemRoute({\n        type: 'layout',\n        route: ''\n      })];\n    }\n    // Only include the sitemap if there are routes.\n    if (!options.skipGenerated) {\n      if (hasRoutes && options.sitemap !== false) {\n        appendSitemapRoute(rootDirectory, options);\n      }\n      if (options.notFound !== false) {\n        appendNotFoundRoute(rootDirectory, options);\n      }\n    }\n    return rootDirectory;\n  }\n  function getNameFromRedirectPath(path) {\n    // Removing only the filesystem extensions, to be able to handle +api, +html\n    return (0, matchers_1.removeFileSystemExtensions)((0, matchers_1.removeFileSystemDots)(path))\n    // Remove the leading `/`\n    .replace(/^\\//, '');\n  }\n  function getNameWithoutInvisibleSegmentsFromRedirectPath(path) {\n    return (0, matchers_1.stripInvisibleSegmentsFromPath)(getNameFromRedirectPath(path));\n  }\n  // Creates fake context key for redirects and rewrites\n  function getSourceContextKeyFromRedirectSource(source) {\n    const name = getNameFromRedirectPath(source);\n    const prefix = './';\n    const suffix = /\\.[tj]sx?$/.test(name) ? '' : '.js'; // Ensure it has a file extension\n    return `${prefix}${name}${suffix}`;\n  }\n  /**\n   * Flatten the directory tree into routes, hoisting routes to the nearest _layout.\n   */\n  function flattenDirectoryTreeToRoutes(directory, options, /* The nearest _layout file in the directory tree */\n  layout, /* Route names are relative to their layout */\n  pathToRemove = '') {\n    /**\n     * This directory has a _layout file so it becomes the new target for hoisting routes.\n     */\n    if (directory.layout) {\n      const previousLayout = layout;\n      layout = getMostSpecific(directory.layout);\n      // Add the new layout as a child of its parent\n      if (previousLayout) {\n        previousLayout.children.push(layout);\n      }\n      if (options.internal_stripLoadRoute) {\n        delete layout.loadRoute;\n      }\n      // `route` is the absolute pathname. We need to make this relative to the last _layout\n      const newRoute = layout.route.replace(pathToRemove, '');\n      pathToRemove = layout.route ? `${layout.route}/` : '';\n      // Now update this layout with the new relative route and dynamic conventions\n      layout.route = newRoute;\n      layout.dynamic = generateDynamic(layout.contextKey.slice(0));\n    }\n    // This should never occur as there will always be a root layout, but it makes the type system happy\n    if (!layout) throw new Error('Expo Router Internal Error: No nearest layout');\n    for (const routes of directory.files.values()) {\n      const routeNode = getMostSpecific(routes);\n      // `route` is the absolute pathname. We need to make this relative to the nearest layout\n      routeNode.route = routeNode.route.replace(pathToRemove, '');\n      routeNode.dynamic = generateDynamic(routeNode.route);\n      if (options.internal_stripLoadRoute) {\n        delete routeNode.loadRoute;\n      }\n      layout.children.push(routeNode);\n    }\n    // Recursively flatten the subdirectories\n    for (const child of directory.subdirectories.values()) {\n      flattenDirectoryTreeToRoutes(child, options, layout, pathToRemove);\n    }\n    return layout;\n  }\n  function getFileMeta(originalKey, options, redirects, rewrites) {\n    // Remove the leading `./`\n    const key = (0, matchers_1.removeSupportedExtensions)((0, matchers_1.removeFileSystemDots)(originalKey));\n    let route = key;\n    const parts = (0, matchers_1.removeFileSystemDots)(originalKey).split('/');\n    const filename = parts[parts.length - 1];\n    const [filenameWithoutExtensions, platformExtension] = (0, matchers_1.removeSupportedExtensions)(filename).split('.');\n    const isLayout = filenameWithoutExtensions === '_layout';\n    const isApi = originalKey.match(/\\+api\\.(\\w+\\.)?[jt]sx?$/);\n    if (filenameWithoutExtensions.startsWith('(') && filenameWithoutExtensions.endsWith(')')) {\n      throw new Error(`Invalid route ${originalKey}. Routes cannot end with '(group)' syntax`);\n    }\n    // Nested routes cannot start with the '+' character, except for the '+not-found' route\n    if (!isApi && filename.startsWith('+') && filenameWithoutExtensions !== '+not-found') {\n      const renamedRoute = [...parts.slice(0, -1), filename.slice(1)].join('/');\n      throw new Error(`Invalid route ${originalKey}. Route nodes cannot start with the '+' character. \"Rename it to ${renamedRoute}\"`);\n    }\n    let specificity = 0;\n    const hasPlatformExtension = validPlatforms.has(platformExtension);\n    const usePlatformRoutes = options.platformRoutes ?? true;\n    if (hasPlatformExtension) {\n      if (!usePlatformRoutes) {\n        // If the user has disabled platform routes, then we should ignore this file\n        specificity = -1;\n      } else if (!options.platform) {\n        // If we don't have a platform, then we should ignore this file\n        // This used by typed routes, sitemap, etc\n        specificity = -1;\n      } else if (platformExtension === options.platform) {\n        // If the platform extension is the same as the options.platform, then it is the most specific\n        specificity = 2;\n      } else if (platformExtension === 'native' && options.platform !== 'web') {\n        // `native` is allow but isn't as specific as the platform\n        specificity = 1;\n      } else if (platformExtension !== options.platform) {\n        // Somehow we have a platform extension that doesn't match the options.platform and it isn't native\n        // This is an invalid file and we will ignore it\n        specificity = -1;\n      }\n      if (isApi && specificity !== 0) {\n        throw new Error(`API routes cannot have platform extensions. Remove '.${platformExtension}' from '${originalKey}'`);\n      }\n      route = route.replace(new RegExp(`.${platformExtension}$`), '');\n    }\n    return {\n      route,\n      specificity,\n      isLayout,\n      isApi,\n      isRedirect: key in redirects,\n      isRewrite: key in rewrites\n    };\n  }\n  /**\n   * Generates a set of strings which have the router array syntax extrapolated.\n   *\n   * /(a,b)/(c,d)/e.tsx => new Set(['a/c/e.tsx', 'a/d/e.tsx', 'b/c/e.tsx', 'b/d/e.tsx'])\n   */\n  function extrapolateGroups(key, keys = new Set()) {\n    const match = (0, matchers_1.matchArrayGroupName)(key);\n    if (!match) {\n      keys.add(key);\n      return keys;\n    }\n    const groups = match.split(',');\n    const groupsSet = new Set(groups);\n    if (groupsSet.size !== groups.length) {\n      throw new Error(`Array syntax cannot contain duplicate group name \"${groups}\" in \"${key}\".`);\n    }\n    if (groups.length === 1) {\n      keys.add(key);\n      return keys;\n    }\n    for (const group of groups) {\n      extrapolateGroups(key.replace(match, group.trim()), keys);\n    }\n    return keys;\n  }\n  function generateDynamic(path) {\n    const dynamic = path.split('/').map(part => {\n      if (part === '+not-found') {\n        return {\n          name: '+not-found',\n          deep: true,\n          notFound: true\n        };\n      }\n      return (0, matchers_1.matchDynamicName)(part) ?? null;\n    }).filter(part => !!part);\n    return dynamic.length === 0 ? null : dynamic;\n  }\n  function appendSitemapRoute(directory, options) {\n    if (!directory.files.has('_sitemap') && options.getSystemRoute) {\n      directory.files.set('_sitemap', [options.getSystemRoute({\n        type: 'route',\n        route: '_sitemap'\n      })]);\n    }\n  }\n  function appendNotFoundRoute(directory, options) {\n    if (!directory.files.has('+not-found') && options.getSystemRoute) {\n      directory.files.set('+not-found', [options.getSystemRoute({\n        type: 'route',\n        route: '+not-found'\n      })]);\n    }\n  }\n  function getLayoutNode(node, options) {\n    /**\n     * A file called `(a,b)/(c)/_layout.tsx` will generate two _layout routes: `(a)/(c)/_layout` and `(b)/(c)/_layout`.\n     * Each of these layouts will have a different anchor based upon the first group name.\n     */\n    // We may strip loadRoute during testing\n    const groupName = (0, matchers_1.matchLastGroupName)(node.route);\n    const childMatchingGroup = node.children.find(child => {\n      return child.route.replace(/\\/index$/, '') === groupName;\n    });\n    let anchor = childMatchingGroup?.route;\n    const loaded = node.loadRoute();\n    if (loaded?.unstable_settings) {\n      try {\n        // Allow unstable_settings={ initialRouteName: '...' } to override the default initial route name.\n        anchor = loaded.unstable_settings.anchor ?? loaded.unstable_settings.initialRouteName ?? anchor;\n      } catch (error) {\n        if (error instanceof Error) {\n          if (!error.message.match(/You cannot dot into a client module/)) {\n            throw error;\n          }\n        }\n      }\n      if (groupName) {\n        // Allow unstable_settings={ 'custom': { initialRouteName: '...' } } to override the less specific initial route name.\n        const groupSpecificInitialRouteName = loaded.unstable_settings?.[groupName]?.anchor ?? loaded.unstable_settings?.[groupName]?.initialRouteName;\n        anchor = groupSpecificInitialRouteName ?? anchor;\n      }\n    }\n    return {\n      ...node,\n      route: node.route.replace(/\\/?_layout$/, ''),\n      children: [],\n      // Each layout should have its own children\n      initialRouteName: anchor\n    };\n  }\n  function crawlAndAppendInitialRoutesAndEntryFiles(node, options, entryPoints = []) {\n    if (node.type === 'route') {\n      node.entryPoints = [...new Set([...entryPoints, node.contextKey])];\n    } else if (node.type === 'redirect') {\n      node.entryPoints = [...new Set([...entryPoints, node.destinationContextKey])];\n    } else if (node.type === 'layout') {\n      if (!node.children) {\n        throw new Error(`Layout \"${node.contextKey}\" does not contain any child routes`);\n      }\n      // Every node below this layout will have it as an entryPoint\n      entryPoints = [...entryPoints, node.contextKey];\n      /**\n       * Calculate the initialRouteNode\n       *\n       * A file called `(a,b)/(c)/_layout.tsx` will generate two _layout routes: `(a)/(c)/_layout` and `(b)/(c)/_layout`.\n       * Each of these layouts will have a different anchor based upon the first group.\n       */\n      const groupName = (0, matchers_1.matchGroupName)(node.route);\n      const childMatchingGroup = node.children.find(child => {\n        return child.route.replace(/\\/index$/, '') === groupName;\n      });\n      let anchor = childMatchingGroup?.route;\n      // We may strip loadRoute during testing\n      if (!options.internal_stripLoadRoute) {\n        const loaded = node.loadRoute();\n        if (loaded?.unstable_settings) {\n          try {\n            // Allow unstable_settings={ initialRouteName: '...' } to override the default initial route name.\n            anchor = loaded.unstable_settings.anchor ?? loaded.unstable_settings.initialRouteName ?? anchor;\n          } catch (error) {\n            if (error instanceof Error) {\n              if (!error.message.match(/You cannot dot into a client module/)) {\n                throw error;\n              }\n            }\n          }\n          if (groupName) {\n            // Allow unstable_settings={ 'custom': { initialRouteName: '...' } } to override the less specific initial route name.\n            const groupSpecificInitialRouteName = loaded.unstable_settings?.[groupName]?.anchor ?? loaded.unstable_settings?.[groupName]?.initialRouteName;\n            anchor = groupSpecificInitialRouteName ?? anchor;\n          }\n        }\n      }\n      if (anchor) {\n        const anchorRoute = node.children.find(child => child.route === anchor);\n        if (!anchorRoute) {\n          const validAnchorRoutes = node.children.filter(child => !child.generated).map(child => `'${child.route}'`).join(', ');\n          if (groupName) {\n            throw new Error(`Layout ${node.contextKey} has invalid anchor '${anchor}' for group '(${groupName})'. Valid options are: ${validAnchorRoutes}`);\n          } else {\n            throw new Error(`Layout ${node.contextKey} has invalid anchor '${anchor}'. Valid options are: ${validAnchorRoutes}`);\n          }\n        }\n        // Navigators can add initialsRoutes into the history, so they need to be to be included in the entryPoints\n        node.initialRouteName = anchor;\n        entryPoints.push(anchorRoute.contextKey);\n      }\n      for (const child of node.children) {\n        crawlAndAppendInitialRoutesAndEntryFiles(child, options, entryPoints);\n      }\n    }\n  }\n  function getMostSpecific(routes) {\n    const route = routes[routes.length - 1];\n    if (!routes[0]) {\n      throw new Error(`The file ${route.contextKey} does not have a fallback sibling file without a platform extension.`);\n    }\n    // This works even tho routes is holey array (e.g it might have index 0 and 2 but not 1)\n    // `.length` includes the holes in its count\n    return routes[routes.length - 1];\n  }\n});","lineCount":691,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"getRoutes"],[7,19,3,17],[7,22,3,20,"getRoutes"],[7,31,3,29],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"extrapolateGroups"],[8,27,4,25],[8,30,4,28,"extrapolateGroups"],[8,47,4,45],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"generateDynamic"],[9,25,5,23],[9,28,5,26,"generateDynamic"],[9,43,5,41],[10,2,6,0],[10,8,6,6,"matchers_1"],[10,18,6,16],[10,21,6,19,"require"],[10,28,6,26],[10,29,6,26,"_dependencyMap"],[10,43,6,26],[10,60,6,39],[10,61,6,40],[11,2,7,0],[11,8,7,6,"url_1"],[11,13,7,11],[11,16,7,14,"require"],[11,23,7,21],[11,24,7,21,"_dependencyMap"],[11,38,7,21],[11,56,7,35],[11,57,7,36],[12,2,8,0],[12,8,8,6,"validPlatforms"],[12,22,8,20],[12,25,8,23],[12,29,8,27,"Set"],[12,32,8,30],[12,33,8,31],[12,34,8,32],[12,43,8,41],[12,45,8,43],[12,50,8,48],[12,52,8,50],[12,60,8,58],[12,62,8,60],[12,67,8,65],[12,68,8,66],[12,69,8,67],[13,2,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,0,19,0],[24,0,20,0],[25,2,21,0],[25,11,21,9,"getRoutes"],[25,20,21,18,"getRoutes"],[25,21,21,19,"contextModule"],[25,34,21,32],[25,36,21,34,"options"],[25,43,21,41],[25,45,21,43],[26,4,22,4],[26,10,22,10,"middleware"],[26,20,22,20],[26,23,22,23,"getMiddleware"],[26,36,22,36],[26,37,22,37,"contextModule"],[26,50,22,50],[26,52,22,52,"options"],[26,59,22,59],[26,60,22,60],[27,4,23,4],[27,10,23,10,"directoryTree"],[27,23,23,23],[27,26,23,26,"getDirectoryTree"],[27,42,23,42],[27,43,23,43,"contextModule"],[27,56,23,56],[27,58,23,58,"options"],[27,65,23,65],[27,66,23,66],[28,4,24,4],[29,4,25,4],[29,8,25,8],[29,9,25,9,"directoryTree"],[29,22,25,22],[29,24,25,24],[30,6,26,8],[30,13,26,15],[30,17,26,19],[31,4,27,4],[32,4,28,4],[32,10,28,10,"rootNode"],[32,18,28,18],[32,21,28,21,"flattenDirectoryTreeToRoutes"],[32,49,28,49],[32,50,28,50,"directoryTree"],[32,63,28,63],[32,65,28,65,"options"],[32,72,28,72],[32,73,28,73],[33,4,29,4],[33,8,29,8,"middleware"],[33,18,29,18],[33,20,29,20],[34,6,30,8,"rootNode"],[34,14,30,16],[34,15,30,17,"middleware"],[34,25,30,27],[34,28,30,30,"middleware"],[34,38,30,40],[35,4,31,4],[36,4,32,4],[36,8,32,8],[36,9,32,9,"options"],[36,16,32,16],[36,17,32,17,"ignoreEntryPoints"],[36,34,32,34],[36,36,32,36],[37,6,33,8,"crawlAndAppendInitialRoutesAndEntryFiles"],[37,46,33,48],[37,47,33,49,"rootNode"],[37,55,33,57],[37,57,33,59,"options"],[37,64,33,66],[37,65,33,67],[38,4,34,4],[39,4,35,4],[39,11,35,11,"rootNode"],[39,19,35,19],[40,2,36,0],[41,2,37,0],[42,0,38,0],[43,0,39,0],[44,2,40,0],[44,11,40,9,"getMiddleware"],[44,24,40,22,"getMiddleware"],[44,25,40,23,"contextModule"],[44,38,40,36],[44,40,40,38,"options"],[44,47,40,45],[44,49,40,47],[45,4,41,4],[45,10,41,10,"allMiddlewareFiles"],[45,28,41,28],[45,31,41,31,"contextModule"],[45,44,41,44],[45,45,41,45,"keys"],[45,49,41,49],[45,50,41,50],[45,51,41,51],[45,52,41,52,"filter"],[45,58,41,58],[45,59,41,60,"key"],[45,62,41,63],[45,66,41,68,"key"],[45,69,41,71],[45,70,41,72,"includes"],[45,78,41,80],[45,79,41,81],[45,92,41,94],[45,93,41,95],[45,94,41,96],[46,4,42,4],[47,4,43,4],[47,8,43,8],[47,9,43,9,"options"],[47,16,43,16],[47,17,43,17,"unstable_useServerMiddleware"],[47,45,43,45],[47,47,43,47],[48,6,44,8],[48,10,44,12,"allMiddlewareFiles"],[48,28,44,30],[48,29,44,31,"length"],[48,35,44,37],[48,38,44,40],[48,39,44,41],[48,41,44,43],[49,8,45,12,"console"],[49,15,45,19],[49,16,45,20,"warn"],[49,20,45,24],[49,21,45,25],[49,136,45,140],[49,139,46,16,"JSON"],[49,143,46,20],[49,144,46,21,"stringify"],[49,153,46,30],[49,154,46,31],[50,10,47,20,"expo"],[50,14,47,24],[50,16,47,26],[51,12,48,24,"plugins"],[51,19,48,31],[51,21,48,33],[51,22,48,34],[51,23,48,35],[51,36,48,48],[51,38,48,50],[52,14,48,52,"unstable_useServerMiddleware"],[52,42,48,80],[52,44,48,82],[53,12,48,87],[53,13,48,88],[53,14,48,89],[54,10,49,20],[55,8,50,16],[55,9,50,17],[55,11,50,19],[55,15,50,23],[55,17,50,25],[55,18,50,26],[55,19,50,27],[55,20,50,28],[56,6,51,8],[57,6,52,8],[57,13,52,15],[57,17,52,19],[58,4,53,4],[59,4,54,4],[59,10,54,10,"isValidMiddleware"],[59,27,54,27],[59,30,54,31,"key"],[59,33,54,34],[59,37,54,39],[59,66,54,68],[59,67,54,69,"test"],[59,71,54,73],[59,72,54,74,"key"],[59,75,54,77],[59,76,54,78],[60,4,55,4],[60,10,55,10,"rootMiddlewareFiles"],[60,29,55,29],[60,32,55,32,"allMiddlewareFiles"],[60,50,55,50],[60,51,55,51,"filter"],[60,57,55,57],[60,58,55,58,"isValidMiddleware"],[60,75,55,75],[60,76,55,76],[61,4,56,4],[61,10,56,10,"nonRootMiddleware"],[61,27,56,27],[61,30,56,30,"allMiddlewareFiles"],[61,48,56,48],[61,49,56,49,"filter"],[61,55,56,55],[61,56,56,57,"file"],[61,60,56,61],[61,64,56,66],[61,65,56,67,"rootMiddlewareFiles"],[61,84,56,86],[61,85,56,87,"includes"],[61,93,56,95],[61,94,56,96,"file"],[61,98,56,100],[61,99,56,101],[61,100,56,102],[62,4,57,4],[62,8,57,8,"nonRootMiddleware"],[62,25,57,25],[62,26,57,26,"length"],[62,32,57,32],[62,35,57,35],[62,36,57,36],[62,38,57,38],[63,6,58,8],[63,12,58,14],[63,16,58,18,"Error"],[63,21,58,23],[63,22,58,24],[63,111,58,113,"nonRootMiddleware"],[63,128,58,130],[63,129,58,131,"join"],[63,133,58,135],[63,134,58,136],[63,138,58,140],[63,139,58,141],[63,141,58,143],[63,142,58,144],[64,4,59,4],[65,4,60,4],[65,8,60,8,"rootMiddlewareFiles"],[65,27,60,27],[65,28,60,28,"length"],[65,34,60,34],[65,39,60,39],[65,40,60,40],[65,42,60,42],[66,6,61,8],[66,13,61,15],[66,17,61,19],[67,4,62,4],[68,4,63,4],[69,4,64,4],[69,8,64,8,"rootMiddlewareFiles"],[69,27,64,27],[69,28,64,28,"length"],[69,34,64,34],[69,37,64,37],[69,38,64,38],[69,40,64,40],[70,6,65,8],[70,10,65,12,"process"],[70,17,65,19],[70,18,65,20,"env"],[70,21,65,23],[70,22,65,24,"NODE_ENV"],[70,30,65,32],[70,35,65,37],[70,47,65,49],[70,49,65,51],[71,8,66,12],[71,14,66,18],[71,18,66,22,"Error"],[71,23,66,27],[71,24,66,28],[71,99,66,103,"rootMiddlewareFiles"],[71,118,66,122],[71,119,66,123,"map"],[71,122,66,126],[71,123,66,128,"p"],[71,124,66,129],[71,128,66,134],[71,132,66,138,"p"],[71,133,66,139],[71,136,66,142],[71,137,66,143],[71,138,66,144,"join"],[71,142,66,148],[71,143,66,149],[71,149,66,155],[71,150,66,156],[71,152,66,158],[71,153,66,159],[72,6,67,8],[73,4,68,4],[74,4,69,4],[74,10,69,10,"middlewareFilePath"],[74,28,69,28],[74,31,69,31,"rootMiddlewareFiles"],[74,50,69,50],[74,51,69,51],[74,52,69,52],[74,53,69,53],[75,4,70,4],[75,10,70,10,"middleware"],[75,20,70,20],[75,23,70,23],[76,6,71,8,"loadRoute"],[76,15,71,17,"loadRoute"],[76,16,71,17],[76,18,71,20],[77,8,72,12],[77,12,72,16,"options"],[77,19,72,23],[77,20,72,24,"ignoreRequireErrors"],[77,39,72,43],[77,41,72,45],[78,10,73,16],[78,14,73,20],[79,12,74,20],[79,19,74,27,"contextModule"],[79,32,74,40],[79,33,74,41,"middlewareFilePath"],[79,51,74,59],[79,52,74,60],[80,10,75,16],[80,11,75,17],[80,12,76,16],[80,18,76,22],[81,12,77,20],[81,19,77,27],[81,20,77,28],[81,21,77,29],[82,10,78,16],[83,8,79,12],[83,9,79,13],[83,15,80,17],[84,10,81,16],[84,17,81,23,"contextModule"],[84,30,81,36],[84,31,81,37,"middlewareFilePath"],[84,49,81,55],[84,50,81,56],[85,8,82,12],[86,6,83,8],[86,7,83,9],[87,6,84,8,"contextKey"],[87,16,84,18],[87,18,84,20,"middlewareFilePath"],[88,4,85,4],[88,5,85,5],[89,4,86,4],[89,8,86,8,"options"],[89,15,86,15],[89,16,86,16,"internal_stripLoadRoute"],[89,39,86,39],[89,41,86,41],[90,6,87,8],[90,13,87,15,"middleware"],[90,23,87,25],[90,24,87,26,"loadRoute"],[90,33,87,35],[91,4,88,4],[92,4,89,4],[92,11,89,11,"middleware"],[92,21,89,21],[93,2,90,0],[94,2,91,0],[95,0,92,0],[96,0,93,0],[97,2,94,0],[97,11,94,9,"getDirectoryTree"],[97,27,94,25,"getDirectoryTree"],[97,28,94,26,"contextModule"],[97,41,94,39],[97,43,94,41,"options"],[97,50,94,48],[97,52,94,50],[98,4,95,4],[98,10,95,10,"importMode"],[98,20,95,20],[98,23,95,23,"options"],[98,30,95,30],[98,31,95,31,"importMode"],[98,41,95,41],[98,51,95,80],[99,4,96,4],[99,10,96,10,"ignoreList"],[99,20,96,20],[99,23,96,23],[99,24,96,24],[99,63,96,63],[99,64,96,64],[99,65,96,65],[99,66,96,66],[100,4,97,4],[100,8,97,8,"options"],[100,15,97,15],[100,16,97,16,"ignore"],[100,22,97,22],[100,24,97,24],[101,6,98,8,"ignoreList"],[101,16,98,18],[101,17,98,19,"push"],[101,21,98,23],[101,22,98,24],[101,25,98,27,"options"],[101,32,98,34],[101,33,98,35,"ignore"],[101,39,98,41],[101,40,98,42],[102,4,99,4],[103,4,100,4],[103,8,100,8],[103,9,100,9,"options"],[103,16,100,16],[103,17,100,17,"preserveApiRoutes"],[103,34,100,34],[103,36,100,36],[104,6,101,8,"ignoreList"],[104,16,101,18],[104,17,101,19,"push"],[104,21,101,23],[104,22,101,24],[104,30,101,32],[104,32,101,34],[104,49,101,51],[104,50,101,52],[105,4,102,4],[106,4,103,4],[107,4,104,4,"ignoreList"],[107,14,104,14],[107,15,104,15,"push"],[107,19,104,19],[107,20,104,20],[107,35,104,35],[107,37,104,37],[107,61,104,61],[107,62,104,62],[108,4,105,4],[108,10,105,10,"rootDirectory"],[108,23,105,23],[108,26,105,26],[109,6,106,8,"files"],[109,11,106,13],[109,13,106,15],[109,17,106,19,"Map"],[109,20,106,22],[109,21,106,23],[109,22,106,24],[110,6,107,8,"subdirectories"],[110,20,107,22],[110,22,107,24],[110,26,107,28,"Map"],[110,29,107,31],[110,30,107,32],[111,4,108,4],[111,5,108,5],[112,4,109,4],[112,8,109,8,"hasRoutes"],[112,17,109,17],[112,20,109,20],[112,25,109,25],[113,4,110,4],[113,8,110,8,"isValid"],[113,15,110,15],[113,18,110,18],[113,23,110,23],[114,4,111,4],[114,10,111,10,"contextKeys"],[114,21,111,21],[114,24,111,24,"contextModule"],[114,37,111,37],[114,38,111,38,"keys"],[114,42,111,42],[114,43,111,43],[114,44,111,44],[115,4,112,4],[115,10,112,10,"redirects"],[115,19,112,19],[115,22,112,22],[115,23,112,23],[115,24,112,24],[116,4,113,4],[116,10,113,10,"rewrites"],[116,18,113,18],[116,21,113,21],[116,22,113,22],[116,23,113,23],[117,4,114,4],[117,8,114,8,"validRedirectDestinations"],[117,33,114,33],[118,4,115,4],[118,10,115,10,"getValidDestinations"],[118,30,115,30],[118,33,115,33,"getValidDestinations"],[118,34,115,33],[118,39,115,39],[119,6,116,8],[120,6,117,8,"validRedirectDestinations"],[120,31,117,33],[120,36,117,38,"contextKeys"],[120,47,117,49],[120,48,117,50,"map"],[120,51,117,53],[120,52,117,55,"key"],[120,55,117,58],[120,59,117,63],[121,8,118,12],[121,15,118,19],[122,10,119,16,"contextKey"],[122,20,119,26],[122,22,119,28,"key"],[122,25,119,31],[123,10,120,16,"nameWithoutInvisible"],[123,30,120,36],[123,32,120,38,"getNameWithoutInvisibleSegmentsFromRedirectPath"],[123,79,120,85],[123,80,120,86],[123,81,120,87],[123,82,120,88],[123,84,120,90,"matchers_1"],[123,94,120,100],[123,95,120,101,"removeSupportedExtensions"],[123,120,120,126],[123,122,120,128,"key"],[123,125,120,131],[123,126,120,132],[124,8,121,12],[124,9,121,13],[125,6,122,8],[125,7,122,9],[125,8,122,10],[126,6,123,8],[126,13,123,15,"validRedirectDestinations"],[126,38,123,40],[127,4,124,4],[127,5,124,5],[128,4,125,4],[129,4,126,4],[130,4,127,4],[130,8,127,8,"options"],[130,15,127,15],[130,16,127,16,"preserveRedirectAndRewrites"],[130,43,127,43],[130,45,127,45],[131,6,128,8],[131,10,128,12,"options"],[131,17,128,19],[131,18,128,20,"redirects"],[131,27,128,29],[131,29,128,31],[132,8,129,12],[132,13,129,17],[132,19,129,23,"redirect"],[132,27,129,31],[132,31,129,35,"options"],[132,38,129,42],[132,39,129,43,"redirects"],[132,48,129,52],[132,50,129,54],[133,10,130,16],[133,16,130,22,"sourceContextKey"],[133,32,130,38],[133,35,130,41,"getSourceContextKeyFromRedirectSource"],[133,72,130,78],[133,73,130,79,"redirect"],[133,81,130,87],[133,82,130,88,"source"],[133,88,130,94],[133,89,130,95],[134,10,131,16],[134,16,131,22,"sourceName"],[134,26,131,32],[134,29,131,35,"getNameFromRedirectPath"],[134,52,131,58],[134,53,131,59,"redirect"],[134,61,131,67],[134,62,131,68,"source"],[134,68,131,74],[134,69,131,75],[135,10,132,16],[135,16,132,22,"isExternalRedirect"],[135,34,132,40],[135,37,132,43],[135,38,132,44],[135,39,132,45],[135,41,132,47,"url_1"],[135,46,132,52],[135,47,132,53,"shouldLinkExternally"],[135,67,132,73],[135,69,132,75,"redirect"],[135,77,132,83],[135,78,132,84,"destination"],[135,89,132,95],[135,90,132,96],[136,10,133,16],[136,16,133,22,"targetDestinationName"],[136,37,133,43],[136,40,133,46,"isExternalRedirect"],[136,58,133,64],[136,61,134,22,"redirect"],[136,69,134,30],[136,70,134,31,"destination"],[136,81,134,42],[136,84,135,22,"getNameWithoutInvisibleSegmentsFromRedirectPath"],[136,131,135,69],[136,132,135,70,"redirect"],[136,140,135,78],[136,141,135,79,"destination"],[136,152,135,90],[136,153,135,91],[137,10,136,16],[137,14,136,20,"ignoreList"],[137,24,136,30],[137,25,136,31,"some"],[137,29,136,35],[137,30,136,37,"regex"],[137,35,136,42],[137,39,136,47,"regex"],[137,44,136,52],[137,45,136,53,"test"],[137,49,136,57],[137,50,136,58,"sourceContextKey"],[137,66,136,74],[137,67,136,75],[137,68,136,76],[137,70,136,78],[138,12,137,20],[139,10,138,16],[140,10,139,16],[140,16,139,22,"validDestination"],[140,32,139,38],[140,35,139,41,"isExternalRedirect"],[140,53,139,59],[140,56,140,22,"undefined"],[140,65,140,31],[140,68,141,22,"getValidDestinations"],[140,88,141,42],[140,89,141,43],[140,90,141,44],[140,91,141,45,"find"],[140,95,141,49],[140,96,141,51,"key"],[140,99,141,54],[140,103,141,59,"key"],[140,106,141,62],[140,107,141,63,"nameWithoutInvisible"],[140,127,141,83],[140,132,141,88,"targetDestinationName"],[140,153,141,109],[140,154,141,110],[141,10,142,16],[141,16,142,22,"destination"],[141,27,142,33],[141,30,142,36,"isExternalRedirect"],[141,48,142,54],[141,51,143,22,"targetDestinationName"],[141,72,143,43],[141,75,144,22,"validDestination"],[141,91,144,38],[141,93,144,40,"nameWithoutInvisible"],[141,113,144,60],[142,10,145,16],[142,16,145,22,"destinationContextKey"],[142,37,145,43],[142,40,145,46,"isExternalRedirect"],[142,58,145,64],[142,61,146,22,"targetDestinationName"],[142,82,146,43],[142,85,147,22,"validDestination"],[142,101,147,38],[142,103,147,40,"contextKey"],[142,113,147,50],[143,10,148,16],[143,14,148,20],[143,15,148,21,"destinationContextKey"],[143,36,148,42],[143,40,148,46,"destination"],[143,51,148,57],[143,56,148,62,"undefined"],[143,65,148,71],[143,67,148,73],[144,12,149,20],[145,0,150,0],[146,0,151,0],[147,0,152,0],[148,0,153,0],[149,0,154,0],[150,12,155,20],[150,16,155,24,"options"],[150,23,155,31],[150,24,155,32,"preserveApiRoutes"],[150,41,155,49],[150,43,155,51],[151,14,156,24],[151,20,156,30],[151,24,156,34,"Error"],[151,29,156,39],[151,30,156,40],[151,55,156,65,"redirect"],[151,63,156,73],[151,64,156,74,"destination"],[151,75,156,85],[151,94,156,104],[151,95,156,105],[152,12,157,20],[153,12,158,20],[154,10,159,16],[155,10,160,16,"contextKeys"],[155,21,160,27],[155,22,160,28,"push"],[155,26,160,32],[155,27,160,33,"sourceContextKey"],[155,43,160,49],[155,44,160,50],[156,10,161,16,"redirects"],[156,19,161,25],[156,20,161,26,"sourceName"],[156,30,161,36],[156,31,161,37],[156,34,161,40],[157,12,162,20,"source"],[157,18,162,26],[157,20,162,28,"sourceName"],[157,30,162,38],[158,12,163,20,"destination"],[158,23,163,31],[159,12,164,20,"destinationContextKey"],[159,33,164,41],[160,12,165,20,"permanent"],[160,21,165,29],[160,23,165,31,"Boolean"],[160,30,165,38],[160,31,165,39,"redirect"],[160,39,165,47],[160,40,165,48,"permanent"],[160,49,165,57],[160,50,165,58],[161,12,166,20,"external"],[161,20,166,28],[161,22,166,30,"isExternalRedirect"],[161,40,166,48],[162,12,167,20,"methods"],[162,19,167,27],[162,21,167,29,"redirect"],[162,29,167,37],[162,30,167,38,"methods"],[163,10,168,16],[163,11,168,17],[164,8,169,12],[165,6,170,8],[166,6,171,8],[166,10,171,12,"options"],[166,17,171,19],[166,18,171,20,"rewrites"],[166,26,171,28],[166,28,171,30],[167,8,172,12],[167,13,172,17],[167,19,172,23,"rewrite"],[167,26,172,30],[167,30,172,34,"options"],[167,37,172,41],[167,38,172,42,"rewrites"],[167,46,172,50],[167,48,172,52],[168,10,173,16],[168,16,173,22,"sourceContextKey"],[168,32,173,38],[168,35,173,41,"getSourceContextKeyFromRedirectSource"],[168,72,173,78],[168,73,173,79,"rewrite"],[168,80,173,86],[168,81,173,87,"source"],[168,87,173,93],[168,88,173,94],[169,10,174,16],[169,16,174,22,"sourceName"],[169,26,174,32],[169,29,174,35,"getNameFromRedirectPath"],[169,52,174,58],[169,53,174,59,"rewrite"],[169,60,174,66],[169,61,174,67,"source"],[169,67,174,73],[169,68,174,74],[170,10,175,16],[171,10,176,16],[172,10,177,16],[172,16,177,22,"isSourceContextKeyAlreadyKnown"],[172,46,177,52],[172,49,177,55,"contextKeys"],[172,60,177,66],[172,61,177,67,"includes"],[172,69,177,75],[172,70,177,76,"sourceContextKey"],[172,86,177,92],[172,87,177,93],[173,10,178,16],[173,16,178,22,"targetDestinationName"],[173,37,178,43],[173,40,178,46,"isSourceContextKeyAlreadyKnown"],[173,70,178,76],[173,73,179,22,"getNameFromRedirectPath"],[173,96,179,45],[173,97,179,46,"rewrite"],[173,104,179,53],[173,105,179,54,"destination"],[173,116,179,65],[173,117,179,66],[173,120,180,22,"getNameWithoutInvisibleSegmentsFromRedirectPath"],[173,167,180,69],[173,168,180,70,"rewrite"],[173,175,180,77],[173,176,180,78,"destination"],[173,187,180,89],[173,188,180,90],[174,10,181,16],[174,14,181,20,"ignoreList"],[174,24,181,30],[174,25,181,31,"some"],[174,29,181,35],[174,30,181,37,"regex"],[174,35,181,42],[174,39,181,47,"regex"],[174,44,181,52],[174,45,181,53,"test"],[174,49,181,57],[174,50,181,58,"sourceContextKey"],[174,66,181,74],[174,67,181,75],[174,68,181,76],[174,70,181,78],[175,12,182,20],[176,10,183,16],[177,10,184,16],[177,16,184,22,"validDestination"],[177,32,184,38],[177,35,184,41,"getValidDestinations"],[177,55,184,61],[177,56,184,62],[177,57,184,63],[177,58,184,64,"find"],[177,62,184,68],[177,63,184,70,"key"],[177,66,184,73],[177,70,184,78,"key"],[177,73,184,81],[177,74,184,82,"nameWithoutInvisible"],[177,94,184,102],[177,99,184,107,"targetDestinationName"],[177,120,184,128],[177,121,184,129],[178,10,185,16],[178,16,185,22,"destination"],[178,27,185,33],[178,30,185,36,"validDestination"],[178,46,185,52],[178,48,185,54,"nameWithoutInvisible"],[178,68,185,74],[179,10,186,16],[179,16,186,22,"destinationContextKey"],[179,37,186,43],[179,40,186,46,"validDestination"],[179,56,186,62],[179,58,186,64,"contextKey"],[179,68,186,74],[180,10,187,16],[180,14,187,20],[180,15,187,21,"destinationContextKey"],[180,36,187,42],[180,40,187,46,"destination"],[180,51,187,57],[180,56,187,62,"undefined"],[180,65,187,71],[180,67,187,73],[181,12,188,20],[182,0,189,0],[183,0,190,0],[184,0,191,0],[185,0,192,0],[186,0,193,0],[187,12,194,20],[187,16,194,24,"options"],[187,23,194,31],[187,24,194,32,"preserveApiRoutes"],[187,41,194,49],[187,43,194,51],[188,14,195,24],[188,20,195,30],[188,24,195,34,"Error"],[188,29,195,39],[188,30,195,40],[188,54,195,64,"rewrite"],[188,61,195,71],[188,62,195,72,"destination"],[188,73,195,83],[188,92,195,102],[188,93,195,103],[189,12,196,20],[190,12,197,20],[191,10,198,16],[192,10,199,16,"contextKeys"],[192,21,199,27],[192,22,199,28,"push"],[192,26,199,32],[192,27,199,33,"sourceContextKey"],[192,43,199,49],[192,44,199,50],[193,10,200,16,"rewrites"],[193,18,200,24],[193,19,200,25,"sourceName"],[193,29,200,35],[193,30,200,36],[193,33,200,39],[194,12,201,20,"source"],[194,18,201,26],[194,20,201,28,"sourceName"],[194,30,201,38],[195,12,202,20,"destination"],[195,23,202,31],[196,12,203,20,"destinationContextKey"],[196,33,203,41],[197,12,204,20,"methods"],[197,19,204,27],[197,21,204,29,"rewrite"],[197,28,204,36],[197,29,204,37,"methods"],[198,10,205,16],[198,11,205,17],[199,8,206,12],[200,6,207,8],[201,4,208,4],[202,4,209,4],[202,10,209,10,"processedRedirectsRewrites"],[202,36,209,36],[202,39,209,39],[202,43,209,43,"Set"],[202,46,209,46],[202,47,209,47],[202,48,209,48],[203,4,210,4],[203,9,210,9],[203,15,210,15,"filePath"],[203,23,210,23],[203,27,210,27,"contextKeys"],[203,38,210,38],[203,40,210,40],[204,6,211,8],[204,10,211,12,"ignoreList"],[204,20,211,22],[204,21,211,23,"some"],[204,25,211,27],[204,26,211,29,"regex"],[204,31,211,34],[204,35,211,39,"regex"],[204,40,211,44],[204,41,211,45,"test"],[204,45,211,49],[204,46,211,50,"filePath"],[204,54,211,58],[204,55,211,59],[204,56,211,60],[204,58,211,62],[205,8,212,12],[206,6,213,8],[207,6,214,8,"isValid"],[207,13,214,15],[207,16,214,18],[207,20,214,22],[208,6,215,8],[208,12,215,14,"meta"],[208,16,215,18],[208,19,215,21,"getFileMeta"],[208,30,215,32],[208,31,215,33,"filePath"],[208,39,215,41],[208,41,215,43,"options"],[208,48,215,50],[208,50,215,52,"redirects"],[208,59,215,61],[208,61,215,63,"rewrites"],[208,69,215,71],[208,70,215,72],[209,6,216,8],[210,6,217,8],[210,10,217,12,"meta"],[210,14,217,16],[210,15,217,17,"specificity"],[210,26,217,28],[210,29,217,31],[210,30,217,32],[210,32,217,34],[211,8,218,12],[212,6,219,8],[213,6,220,8],[213,10,220,12,"node"],[213,14,220,16],[213,17,220,19],[214,8,221,12,"type"],[214,12,221,16],[214,14,221,18,"meta"],[214,18,221,22],[214,19,221,23,"isApi"],[214,24,221,28],[214,27,221,31],[214,32,221,36],[214,35,221,39,"meta"],[214,39,221,43],[214,40,221,44,"isLayout"],[214,48,221,52],[214,51,221,55],[214,59,221,63],[214,62,221,66],[214,69,221,73],[215,8,222,12,"loadRoute"],[215,17,222,21,"loadRoute"],[215,18,222,21],[215,20,222,24],[216,10,223,16],[216,14,223,20,"routeModule"],[216,25,223,31],[217,10,224,16],[217,14,224,20,"options"],[217,21,224,27],[217,22,224,28,"ignoreRequireErrors"],[217,41,224,47],[217,43,224,49],[218,12,225,20],[218,16,225,24],[219,14,226,24,"routeModule"],[219,25,226,35],[219,28,226,38,"contextModule"],[219,41,226,51],[219,42,226,52,"filePath"],[219,50,226,60],[219,51,226,61],[220,12,227,20],[220,13,227,21],[220,14,228,20],[220,20,228,26],[221,14,229,24,"routeModule"],[221,25,229,35],[221,28,229,38],[221,29,229,39],[221,30,229,40],[222,12,230,20],[223,10,231,16],[223,11,231,17],[223,17,232,21],[224,12,233,20,"routeModule"],[224,23,233,31],[224,26,233,34,"contextModule"],[224,39,233,47],[224,40,233,48,"filePath"],[224,48,233,56],[224,49,233,57],[225,10,234,16],[226,10,235,16],[226,14,235,20,"process"],[226,21,235,27],[226,22,235,28,"env"],[226,25,235,31],[226,26,235,32,"NODE_ENV"],[226,34,235,40],[226,39,235,45],[226,52,235,58],[226,56,235,62,"importMode"],[226,66,235,72],[226,71,235,77],[226,77,235,83],[226,79,235,85],[227,12,236,20],[228,12,237,20],[229,12,238,20],[229,16,238,24,"routeModule"],[229,27,238,35],[229,39,238,47,"Promise"],[229,46,238,54],[229,48,238,56],[230,14,239,24],[230,20,239,30],[230,24,239,34,"Error"],[230,29,239,39],[230,30,239,40],[230,40,239,50,"filePath"],[230,48,239,58],[230,102,239,112],[230,103,239,113],[231,12,240,20],[232,12,241,20],[232,18,241,26,"defaultExport"],[232,31,241,39],[232,34,241,42,"routeModule"],[232,45,241,53],[232,47,241,55,"default"],[232,54,241,62],[233,12,242,20],[233,16,242,24,"defaultExport"],[233,29,242,37],[233,41,242,49,"Promise"],[233,48,242,56],[233,50,242,58],[234,14,243,24],[234,20,243,30],[234,24,243,34,"Error"],[234,29,243,39],[234,30,243,40],[234,64,243,74,"filePath"],[234,72,243,82],[234,148,243,158],[234,149,243,159],[235,12,244,20],[236,12,245,20],[237,12,246,20],[237,16,246,24,"defaultExport"],[237,29,246,37],[237,41,246,49,"Function"],[237,49,246,57],[238,12,247,24],[239,12,248,24,"defaultExport"],[239,25,248,37],[239,26,248,38,"constructor"],[239,37,248,49],[239,38,248,50,"name"],[239,42,248,54],[239,47,248,59],[239,62,248,74],[239,64,248,76],[240,14,249,24],[240,20,249,30],[240,24,249,34,"Error"],[240,29,249,39],[240,30,249,40],[240,64,249,74,"filePath"],[240,72,249,82],[240,156,249,166],[240,157,249,167],[241,12,250,20],[242,10,251,16],[243,10,252,16],[243,17,252,23,"routeModule"],[243,28,252,34],[244,8,253,12],[244,9,253,13],[245,8,254,12,"contextKey"],[245,18,254,22],[245,20,254,24,"filePath"],[245,28,254,32],[246,8,255,12,"route"],[246,13,255,17],[246,15,255,19],[246,17,255,21],[247,8,255,23],[248,8,256,12,"dynamic"],[248,15,256,19],[248,17,256,21],[248,21,256,25],[249,8,257,12,"children"],[249,16,257,20],[249,18,257,22],[249,20,257,24],[249,21,257,26],[250,6,258,8],[250,7,258,9],[251,6,259,8],[251,10,259,12,"meta"],[251,14,259,16],[251,15,259,17,"isRedirect"],[251,25,259,27],[251,27,259,29],[252,8,260,12],[252,12,260,16,"processedRedirectsRewrites"],[252,38,260,42],[252,39,260,43,"has"],[252,42,260,46],[252,43,260,47,"meta"],[252,47,260,51],[252,48,260,52,"route"],[252,53,260,57],[252,54,260,58],[252,56,260,60],[253,10,261,16],[254,8,262,12],[255,8,263,12],[255,14,263,18,"redirect"],[255,22,263,26],[255,25,263,29,"redirects"],[255,34,263,38],[255,35,263,39,"meta"],[255,39,263,43],[255,40,263,44,"route"],[255,45,263,49],[255,46,263,50],[256,8,264,12,"node"],[256,12,264,16],[256,13,264,17,"destinationContextKey"],[256,34,264,38],[256,37,264,41,"redirect"],[256,45,264,49],[256,46,264,50,"destinationContextKey"],[256,67,264,71],[257,8,265,12,"node"],[257,12,265,16],[257,13,265,17,"permanent"],[257,22,265,26],[257,25,265,29,"redirect"],[257,33,265,37],[257,34,265,38,"permanent"],[257,43,265,47],[258,8,266,12,"node"],[258,12,266,16],[258,13,266,17,"generated"],[258,22,266,26],[258,25,266,29],[258,29,266,33],[259,8,267,12],[259,12,267,16,"node"],[259,16,267,20],[259,17,267,21,"type"],[259,21,267,25],[259,26,267,30],[259,33,267,37],[259,35,267,39],[260,10,268,16,"node"],[260,14,268,20],[260,17,268,23,"options"],[260,24,268,30],[260,25,268,31,"getSystemRoute"],[260,39,268,45],[260,40,268,46],[261,12,269,20,"type"],[261,16,269,24],[261,18,269,26],[261,28,269,36],[262,12,270,20,"route"],[262,17,270,25],[262,19,270,27,"redirect"],[262,27,270,35],[262,28,270,36,"destination"],[262,39,270,47],[263,12,271,20,"defaults"],[263,20,271,28],[263,22,271,30,"node"],[263,26,271,34],[264,12,272,20,"redirectConfig"],[264,26,272,34],[264,28,272,36,"redirect"],[265,10,273,16],[265,11,273,17],[265,12,273,18],[266,8,274,12],[267,8,275,12],[267,12,275,16,"redirect"],[267,20,275,24],[267,21,275,25,"methods"],[267,28,275,32],[267,30,275,34],[268,10,276,16,"node"],[268,14,276,20],[268,15,276,21,"methods"],[268,22,276,28],[268,25,276,31,"redirect"],[268,33,276,39],[268,34,276,40,"methods"],[268,41,276,47],[269,8,277,12],[270,8,278,12,"node"],[270,12,278,16],[270,13,278,17,"type"],[270,17,278,21],[270,20,278,24],[270,30,278,34],[271,8,279,12,"processedRedirectsRewrites"],[271,34,279,38],[271,35,279,39,"add"],[271,38,279,42],[271,39,279,43,"meta"],[271,43,279,47],[271,44,279,48,"route"],[271,49,279,53],[271,50,279,54],[272,6,280,8],[273,6,281,8],[273,10,281,12,"meta"],[273,14,281,16],[273,15,281,17,"isRewrite"],[273,24,281,26],[273,26,281,28],[274,8,282,12],[274,12,282,16,"processedRedirectsRewrites"],[274,38,282,42],[274,39,282,43,"has"],[274,42,282,46],[274,43,282,47,"meta"],[274,47,282,51],[274,48,282,52,"route"],[274,53,282,57],[274,54,282,58],[274,56,282,60],[275,10,283,16],[276,8,284,12],[277,8,285,12],[277,14,285,18,"rewrite"],[277,21,285,25],[277,24,285,28,"rewrites"],[277,32,285,36],[277,33,285,37,"meta"],[277,37,285,41],[277,38,285,42,"route"],[277,43,285,47],[277,44,285,48],[278,8,286,12,"node"],[278,12,286,16],[278,13,286,17,"destinationContextKey"],[278,34,286,38],[278,37,286,41,"rewrite"],[278,44,286,48],[278,45,286,49,"destinationContextKey"],[278,66,286,70],[279,8,287,12,"node"],[279,12,287,16],[279,13,287,17,"generated"],[279,22,287,26],[279,25,287,29],[279,29,287,33],[280,8,288,12],[280,12,288,16,"node"],[280,16,288,20],[280,17,288,21,"type"],[280,21,288,25],[280,26,288,30],[280,33,288,37],[280,35,288,39],[281,10,289,16,"node"],[281,14,289,20],[281,17,289,23,"options"],[281,24,289,30],[281,25,289,31,"getSystemRoute"],[281,39,289,45],[281,40,289,46],[282,12,290,20,"type"],[282,16,290,24],[282,18,290,26],[282,27,290,35],[283,12,291,20,"route"],[283,17,291,25],[283,19,291,27,"rewrite"],[283,26,291,34],[283,27,291,35,"destination"],[283,38,291,46],[284,12,292,20,"defaults"],[284,20,292,28],[284,22,292,30,"node"],[284,26,292,34],[285,12,293,20,"rewriteConfig"],[285,25,293,33],[285,27,293,35,"rewrite"],[286,10,294,16],[286,11,294,17],[286,12,294,18],[287,8,295,12],[288,8,296,12],[288,12,296,16,"rewrite"],[288,19,296,23],[288,20,296,24,"methods"],[288,27,296,31],[288,29,296,33],[289,10,297,16,"node"],[289,14,297,20],[289,15,297,21,"methods"],[289,22,297,28],[289,25,297,31,"rewrite"],[289,32,297,38],[289,33,297,39,"methods"],[289,40,297,46],[290,8,298,12],[291,8,299,12,"node"],[291,12,299,16],[291,13,299,17,"type"],[291,17,299,21],[291,20,299,24],[291,29,299,33],[292,8,300,12,"processedRedirectsRewrites"],[292,34,300,38],[292,35,300,39,"add"],[292,38,300,42],[292,39,300,43,"meta"],[292,43,300,47],[292,44,300,48,"route"],[292,49,300,53],[292,50,300,54],[293,6,301,8],[294,6,302,8],[294,10,302,12,"process"],[294,17,302,19],[294,18,302,20,"env"],[294,21,302,23],[294,22,302,24,"NODE_ENV"],[294,30,302,32],[294,35,302,37],[294,48,302,50],[294,50,302,52],[295,8,303,12],[296,8,304,12],[297,8,305,12],[297,12,305,16,"node"],[297,16,305,20],[297,17,305,21,"type"],[297,21,305,25],[297,26,305,30],[297,31,305,35],[297,35,305,39,"importMode"],[297,45,305,49],[297,50,305,54],[297,56,305,60],[297,58,305,62],[298,10,306,16],[298,16,306,22,"routeItem"],[298,25,306,31],[298,28,306,34,"node"],[298,32,306,38],[298,33,306,39,"loadRoute"],[298,42,306,48],[298,43,306,49],[298,44,306,50],[299,10,307,16],[300,10,308,16],[300,16,308,22,"route"],[300,21,308,27],[300,24,308,30,"routeItem"],[300,33,308,39],[300,35,308,41,"default"],[300,42,308,48],[301,10,309,16],[301,14,309,20,"route"],[301,19,309,25],[301,23,309,29],[301,27,309,33],[301,29,309,35],[302,12,310,20],[303,12,311,20,"console"],[303,19,311,27],[303,20,311,28,"warn"],[303,24,311,32],[303,25,311,33],[303,35,311,43,"filePath"],[303,43,311,51],[303,135,311,143],[303,136,311,144],[304,12,312,20],[305,10,313,16],[306,10,314,16],[306,14,314,20],[306,15,314,21],[306,24,314,30],[306,26,314,32],[306,34,314,40],[306,36,314,42],[306,44,314,50],[306,45,314,51],[306,46,314,52,"includes"],[306,54,314,60],[306,55,314,61],[306,62,314,68,"route"],[306,67,314,73],[306,68,314,74],[306,70,314,76],[307,12,315,20],[307,18,315,26],[307,22,315,30,"Error"],[307,27,315,35],[307,28,315,36],[307,62,315,70,"filePath"],[307,70,315,78],[307,100,315,108],[307,107,315,115,"route"],[307,112,315,120],[307,189,315,197],[307,190,315,198],[308,10,316,16],[309,8,317,12],[310,6,318,8],[311,6,319,8],[312,0,320,0],[313,0,321,0],[314,0,322,0],[315,6,323,8],[315,11,323,13],[315,17,323,19,"route"],[315,22,323,24],[315,26,323,28,"extrapolateGroups"],[315,43,323,45],[315,44,323,46,"meta"],[315,48,323,50],[315,49,323,51,"route"],[315,54,323,56],[315,55,323,57],[315,57,323,59],[316,8,324,12],[317,8,325,12],[317,14,325,18,"subdirectoryParts"],[317,31,325,35],[317,34,325,38,"route"],[317,39,325,43],[317,40,325,44,"split"],[317,45,325,49],[317,46,325,50],[317,49,325,53],[317,50,325,54],[317,51,325,55,"slice"],[317,56,325,60],[317,57,325,61],[317,58,325,62],[317,60,325,64],[317,61,325,65],[317,62,325,66],[317,63,325,67],[318,8,326,12],[319,8,327,12],[319,12,327,16,"directory"],[319,21,327,25],[319,24,327,28,"rootDirectory"],[319,37,327,41],[320,8,328,12],[320,13,328,17],[320,19,328,23,"part"],[320,23,328,27],[320,27,328,31,"subdirectoryParts"],[320,44,328,48],[320,46,328,50],[321,10,329,16],[321,14,329,20,"subDirectory"],[321,26,329,32],[321,29,329,35,"directory"],[321,38,329,44],[321,39,329,45,"subdirectories"],[321,53,329,59],[321,54,329,60,"get"],[321,57,329,63],[321,58,329,64,"part"],[321,62,329,68],[321,63,329,69],[322,10,330,16],[323,10,331,16],[323,14,331,20],[323,15,331,21,"subDirectory"],[323,27,331,33],[323,29,331,35],[324,12,332,20,"subDirectory"],[324,24,332,32],[324,27,332,35],[325,14,333,24,"files"],[325,19,333,29],[325,21,333,31],[325,25,333,35,"Map"],[325,28,333,38],[325,29,333,39],[325,30,333,40],[326,14,334,24,"subdirectories"],[326,28,334,38],[326,30,334,40],[326,34,334,44,"Map"],[326,37,334,47],[326,38,334,48],[327,12,335,20],[327,13,335,21],[328,12,336,20,"directory"],[328,21,336,29],[328,22,336,30,"subdirectories"],[328,36,336,44],[328,37,336,45,"set"],[328,40,336,48],[328,41,336,49,"part"],[328,45,336,53],[328,47,336,55,"subDirectory"],[328,59,336,67],[328,60,336,68],[329,10,337,16],[330,10,338,16,"directory"],[330,19,338,25],[330,22,338,28,"subDirectory"],[330,34,338,40],[331,8,339,12],[332,8,340,12],[333,8,341,12,"node"],[333,12,341,16],[333,15,341,19],[334,10,341,21],[334,13,341,24,"node"],[334,17,341,28],[335,10,341,30,"route"],[336,8,341,36],[336,9,341,37],[337,8,342,12],[337,12,342,16,"meta"],[337,16,342,20],[337,17,342,21,"isLayout"],[337,25,342,29],[337,27,342,31],[338,10,343,16,"directory"],[338,19,343,25],[338,20,343,26,"layout"],[338,26,343,32],[338,31,343,37],[338,33,343,39],[339,10,344,16],[339,16,344,22,"existing"],[339,24,344,30],[339,27,344,33,"directory"],[339,36,344,42],[339,37,344,43,"layout"],[339,43,344,49],[339,44,344,50,"meta"],[339,48,344,54],[339,49,344,55,"specificity"],[339,60,344,66],[339,61,344,67],[340,10,345,16],[340,14,345,20,"existing"],[340,22,345,28],[340,24,345,30],[341,12,346,20],[342,12,347,20],[342,16,347,24,"process"],[342,23,347,31],[342,24,347,32,"env"],[342,27,347,35],[342,28,347,36,"NODE_ENV"],[342,36,347,44],[342,41,347,49],[342,53,347,61],[342,55,347,63],[343,14,348,24],[343,20,348,30],[343,24,348,34,"Error"],[343,29,348,39],[343,30,348,40],[343,46,348,56,"filePath"],[343,54,348,64],[343,64,348,74,"existing"],[343,72,348,82],[343,73,348,83,"contextKey"],[343,83,348,93],[343,112,348,122,"route"],[343,117,348,127],[343,158,348,168],[343,159,348,169],[344,12,349,20],[345,10,350,16],[345,11,350,17],[345,17,351,21],[346,12,352,20,"node"],[346,16,352,24],[346,19,352,27,"getLayoutNode"],[346,32,352,40],[346,33,352,41,"node"],[346,37,352,45],[346,39,352,47,"options"],[346,46,352,54],[346,47,352,55],[347,12,353,20,"directory"],[347,21,353,29],[347,22,353,30,"layout"],[347,28,353,36],[347,29,353,37,"meta"],[347,33,353,41],[347,34,353,42,"specificity"],[347,45,353,53],[347,46,353,54],[347,49,353,57,"node"],[347,53,353,61],[348,10,354,16],[349,8,355,12],[349,9,355,13],[349,15,356,17],[349,19,356,21,"meta"],[349,23,356,25],[349,24,356,26,"isApi"],[349,29,356,31],[349,31,356,33],[350,10,357,16],[350,16,357,22,"fileKey"],[350,23,357,29],[350,26,357,32],[350,29,357,35,"route"],[350,34,357,40],[350,40,357,46],[351,10,358,16],[351,14,358,20,"nodes"],[351,19,358,25],[351,22,358,28,"directory"],[351,31,358,37],[351,32,358,38,"files"],[351,37,358,43],[351,38,358,44,"get"],[351,41,358,47],[351,42,358,48,"fileKey"],[351,49,358,55],[351,50,358,56],[352,10,359,16],[352,14,359,20],[352,15,359,21,"nodes"],[352,20,359,26],[352,22,359,28],[353,12,360,20,"nodes"],[353,17,360,25],[353,20,360,28],[353,22,360,30],[354,12,361,20,"directory"],[354,21,361,29],[354,22,361,30,"files"],[354,27,361,35],[354,28,361,36,"set"],[354,31,361,39],[354,32,361,40,"fileKey"],[354,39,361,47],[354,41,361,49,"nodes"],[354,46,361,54],[354,47,361,55],[355,10,362,16],[356,10,363,16],[357,10,364,16],[357,16,364,22,"existing"],[357,24,364,30],[357,27,364,33,"nodes"],[357,32,364,38],[357,33,364,39],[357,34,364,40],[357,35,364,41],[358,10,365,16],[358,14,365,20,"existing"],[358,22,365,28],[358,24,365,30],[359,12,366,20],[360,12,367,20],[360,16,367,24,"process"],[360,23,367,31],[360,24,367,32,"env"],[360,27,367,35],[360,28,367,36,"NODE_ENV"],[360,36,367,44],[360,41,367,49],[360,53,367,61],[360,55,367,63],[361,14,368,24],[361,20,368,30],[361,24,368,34,"Error"],[361,29,368,39],[361,30,368,40],[361,53,368,63,"filePath"],[361,61,368,71],[361,71,368,81,"existing"],[361,79,368,89],[361,80,368,90,"contextKey"],[361,90,368,100],[361,119,368,129,"route"],[361,124,368,134],[361,165,368,175],[361,166,368,176],[362,12,369,20],[363,10,370,16],[363,11,370,17],[363,17,371,21],[364,12,372,20,"nodes"],[364,17,372,25],[364,18,372,26],[364,19,372,27],[364,20,372,28],[364,23,372,31,"node"],[364,27,372,35],[365,10,373,16],[366,8,374,12],[366,9,374,13],[366,15,375,17],[367,10,376,16],[367,14,376,20,"nodes"],[367,19,376,25],[367,22,376,28,"directory"],[367,31,376,37],[367,32,376,38,"files"],[367,37,376,43],[367,38,376,44,"get"],[367,41,376,47],[367,42,376,48,"route"],[367,47,376,53],[367,48,376,54],[368,10,377,16],[368,14,377,20],[368,15,377,21,"nodes"],[368,20,377,26],[368,22,377,28],[369,12,378,20,"nodes"],[369,17,378,25],[369,20,378,28],[369,22,378,30],[370,12,379,20,"directory"],[370,21,379,29],[370,22,379,30,"files"],[370,27,379,35],[370,28,379,36,"set"],[370,31,379,39],[370,32,379,40,"route"],[370,37,379,45],[370,39,379,47,"nodes"],[370,44,379,52],[370,45,379,53],[371,10,380,16],[372,10,381,16],[373,0,382,0],[374,0,383,0],[375,0,384,0],[376,0,385,0],[377,0,386,0],[378,10,387,16],[378,16,387,22,"existing"],[378,24,387,30],[378,27,387,33,"nodes"],[378,32,387,38],[378,33,387,39,"meta"],[378,37,387,43],[378,38,387,44,"specificity"],[378,49,387,55],[378,50,387,56],[379,10,388,16],[379,14,388,20,"existing"],[379,22,388,28],[379,24,388,30],[380,12,389,20],[381,12,390,20],[381,16,390,24,"process"],[381,23,390,31],[381,24,390,32,"env"],[381,27,390,35],[381,28,390,36,"NODE_ENV"],[381,36,390,44],[381,41,390,49],[381,53,390,61],[381,55,390,63],[382,14,391,24],[382,20,391,30],[382,24,391,34,"Error"],[382,29,391,39],[382,30,391,40],[382,50,391,60,"filePath"],[382,58,391,68],[382,68,391,78,"existing"],[382,76,391,86],[382,77,391,87,"contextKey"],[382,87,391,97],[382,116,391,126,"route"],[382,121,391,131],[382,162,391,172],[382,163,391,173],[383,12,392,20],[384,10,393,16],[384,11,393,17],[384,17,394,21],[385,12,395,20,"hasRoutes"],[385,21,395,29],[385,26,395,34],[385,30,395,38],[386,12,396,20,"nodes"],[386,17,396,25],[386,18,396,26,"meta"],[386,22,396,30],[386,23,396,31,"specificity"],[386,34,396,42],[386,35,396,43],[386,38,396,46,"node"],[386,42,396,50],[387,10,397,16],[388,8,398,12],[389,6,399,8],[390,4,400,4],[391,4,401,4],[392,4,402,4],[392,8,402,8],[392,9,402,9,"isValid"],[392,16,402,16],[392,18,402,18],[393,6,403,8],[393,13,403,15],[393,17,403,19],[394,4,404,4],[395,4,405,4],[396,0,406,0],[397,0,407,0],[398,0,408,0],[399,4,409,4],[399,8,409,8],[399,9,409,9,"rootDirectory"],[399,22,409,22],[399,23,409,23,"layout"],[399,29,409,29],[399,31,409,31],[400,6,410,8,"rootDirectory"],[400,19,410,21],[400,20,410,22,"layout"],[400,26,410,28],[400,29,410,31],[400,30,411,12,"options"],[400,37,411,19],[400,38,411,20,"getSystemRoute"],[400,52,411,34],[400,53,411,35],[401,8,412,16,"type"],[401,12,412,20],[401,14,412,22],[401,22,412,30],[402,8,413,16,"route"],[402,13,413,21],[402,15,413,23],[403,6,414,12],[403,7,414,13],[403,8,414,14],[403,9,415,9],[404,4,416,4],[405,4,417,4],[406,4,418,4],[406,8,418,8],[406,9,418,9,"options"],[406,16,418,16],[406,17,418,17,"skipGenerated"],[406,30,418,30],[406,32,418,32],[407,6,419,8],[407,10,419,12,"hasRoutes"],[407,19,419,21],[407,23,419,25,"options"],[407,30,419,32],[407,31,419,33,"sitemap"],[407,38,419,40],[407,43,419,45],[407,48,419,50],[407,50,419,52],[408,8,420,12,"appendSitemapRoute"],[408,26,420,30],[408,27,420,31,"rootDirectory"],[408,40,420,44],[408,42,420,46,"options"],[408,49,420,53],[408,50,420,54],[409,6,421,8],[410,6,422,8],[410,10,422,12,"options"],[410,17,422,19],[410,18,422,20,"notFound"],[410,26,422,28],[410,31,422,33],[410,36,422,38],[410,38,422,40],[411,8,423,12,"appendNotFoundRoute"],[411,27,423,31],[411,28,423,32,"rootDirectory"],[411,41,423,45],[411,43,423,47,"options"],[411,50,423,54],[411,51,423,55],[412,6,424,8],[413,4,425,4],[414,4,426,4],[414,11,426,11,"rootDirectory"],[414,24,426,24],[415,2,427,0],[416,2,428,0],[416,11,428,9,"getNameFromRedirectPath"],[416,34,428,32,"getNameFromRedirectPath"],[416,35,428,33,"path"],[416,39,428,37],[416,41,428,39],[417,4,429,4],[418,4,430,4],[418,11,430,12],[418,12,430,13],[418,13,430,14],[418,15,430,16,"matchers_1"],[418,25,430,26],[418,26,430,27,"removeFileSystemExtensions"],[418,52,430,53],[418,54,430,55],[418,55,430,56],[418,56,430,57],[418,58,430,59,"matchers_1"],[418,68,430,69],[418,69,430,70,"removeFileSystemDots"],[418,89,430,90],[418,91,430,92,"path"],[418,95,430,96],[418,96,430,97],[419,4,431,8],[420,4,431,8],[420,5,432,9,"replace"],[420,12,432,16],[420,13,432,17],[420,18,432,22],[420,20,432,24],[420,22,432,26],[420,23,432,27],[421,2,433,0],[422,2,434,0],[422,11,434,9,"getNameWithoutInvisibleSegmentsFromRedirectPath"],[422,58,434,56,"getNameWithoutInvisibleSegmentsFromRedirectPath"],[422,59,434,57,"path"],[422,63,434,61],[422,65,434,63],[423,4,435,4],[423,11,435,11],[423,12,435,12],[423,13,435,13],[423,15,435,15,"matchers_1"],[423,25,435,25],[423,26,435,26,"stripInvisibleSegmentsFromPath"],[423,56,435,56],[423,58,435,58,"getNameFromRedirectPath"],[423,81,435,81],[423,82,435,82,"path"],[423,86,435,86],[423,87,435,87],[423,88,435,88],[424,2,436,0],[425,2,437,0],[426,2,438,0],[426,11,438,9,"getSourceContextKeyFromRedirectSource"],[426,48,438,46,"getSourceContextKeyFromRedirectSource"],[426,49,438,47,"source"],[426,55,438,53],[426,57,438,55],[427,4,439,4],[427,10,439,10,"name"],[427,14,439,14],[427,17,439,17,"getNameFromRedirectPath"],[427,40,439,40],[427,41,439,41,"source"],[427,47,439,47],[427,48,439,48],[428,4,440,4],[428,10,440,10,"prefix"],[428,16,440,16],[428,19,440,19],[428,23,440,23],[429,4,441,4],[429,10,441,10,"suffix"],[429,16,441,16],[429,19,441,19],[429,31,441,31],[429,32,441,32,"test"],[429,36,441,36],[429,37,441,37,"name"],[429,41,441,41],[429,42,441,42],[429,45,441,45],[429,47,441,47],[429,50,441,50],[429,55,441,55],[429,56,441,56],[429,57,441,57],[430,4,442,4],[430,11,442,11],[430,14,442,14,"prefix"],[430,20,442,20],[430,23,442,23,"name"],[430,27,442,27],[430,30,442,30,"suffix"],[430,36,442,36],[430,38,442,38],[431,2,443,0],[432,2,444,0],[433,0,445,0],[434,0,446,0],[435,2,447,0],[435,11,447,9,"flattenDirectoryTreeToRoutes"],[435,39,447,37,"flattenDirectoryTreeToRoutes"],[435,40,447,38,"directory"],[435,49,447,47],[435,51,447,49,"options"],[435,58,447,56],[435,60,448,0],[436,2,449,0,"layout"],[436,8,449,6],[436,10,450,0],[437,2,451,0,"pathToRemove"],[437,14,451,12],[437,17,451,15],[437,19,451,17],[437,21,451,19],[438,4,452,4],[439,0,453,0],[440,0,454,0],[441,4,455,4],[441,8,455,8,"directory"],[441,17,455,17],[441,18,455,18,"layout"],[441,24,455,24],[441,26,455,26],[442,6,456,8],[442,12,456,14,"previousLayout"],[442,26,456,28],[442,29,456,31,"layout"],[442,35,456,37],[443,6,457,8,"layout"],[443,12,457,14],[443,15,457,17,"getMostSpecific"],[443,30,457,32],[443,31,457,33,"directory"],[443,40,457,42],[443,41,457,43,"layout"],[443,47,457,49],[443,48,457,50],[444,6,458,8],[445,6,459,8],[445,10,459,12,"previousLayout"],[445,24,459,26],[445,26,459,28],[446,8,460,12,"previousLayout"],[446,22,460,26],[446,23,460,27,"children"],[446,31,460,35],[446,32,460,36,"push"],[446,36,460,40],[446,37,460,41,"layout"],[446,43,460,47],[446,44,460,48],[447,6,461,8],[448,6,462,8],[448,10,462,12,"options"],[448,17,462,19],[448,18,462,20,"internal_stripLoadRoute"],[448,41,462,43],[448,43,462,45],[449,8,463,12],[449,15,463,19,"layout"],[449,21,463,25],[449,22,463,26,"loadRoute"],[449,31,463,35],[450,6,464,8],[451,6,465,8],[452,6,466,8],[452,12,466,14,"newRoute"],[452,20,466,22],[452,23,466,25,"layout"],[452,29,466,31],[452,30,466,32,"route"],[452,35,466,37],[452,36,466,38,"replace"],[452,43,466,45],[452,44,466,46,"pathToRemove"],[452,56,466,58],[452,58,466,60],[452,60,466,62],[452,61,466,63],[453,6,467,8,"pathToRemove"],[453,18,467,20],[453,21,467,23,"layout"],[453,27,467,29],[453,28,467,30,"route"],[453,33,467,35],[453,36,467,38],[453,39,467,41,"layout"],[453,45,467,47],[453,46,467,48,"route"],[453,51,467,53],[453,54,467,56],[453,57,467,59],[453,59,467,61],[454,6,468,8],[455,6,469,8,"layout"],[455,12,469,14],[455,13,469,15,"route"],[455,18,469,20],[455,21,469,23,"newRoute"],[455,29,469,31],[456,6,470,8,"layout"],[456,12,470,14],[456,13,470,15,"dynamic"],[456,20,470,22],[456,23,470,25,"generateDynamic"],[456,38,470,40],[456,39,470,41,"layout"],[456,45,470,47],[456,46,470,48,"contextKey"],[456,56,470,58],[456,57,470,59,"slice"],[456,62,470,64],[456,63,470,65],[456,64,470,66],[456,65,470,67],[456,66,470,68],[457,4,471,4],[458,4,472,4],[459,4,473,4],[459,8,473,8],[459,9,473,9,"layout"],[459,15,473,15],[459,17,474,8],[459,23,474,14],[459,27,474,18,"Error"],[459,32,474,23],[459,33,474,24],[459,80,474,71],[459,81,474,72],[460,4,475,4],[460,9,475,9],[460,15,475,15,"routes"],[460,21,475,21],[460,25,475,25,"directory"],[460,34,475,34],[460,35,475,35,"files"],[460,40,475,40],[460,41,475,41,"values"],[460,47,475,47],[460,48,475,48],[460,49,475,49],[460,51,475,51],[461,6,476,8],[461,12,476,14,"routeNode"],[461,21,476,23],[461,24,476,26,"getMostSpecific"],[461,39,476,41],[461,40,476,42,"routes"],[461,46,476,48],[461,47,476,49],[462,6,477,8],[463,6,478,8,"routeNode"],[463,15,478,17],[463,16,478,18,"route"],[463,21,478,23],[463,24,478,26,"routeNode"],[463,33,478,35],[463,34,478,36,"route"],[463,39,478,41],[463,40,478,42,"replace"],[463,47,478,49],[463,48,478,50,"pathToRemove"],[463,60,478,62],[463,62,478,64],[463,64,478,66],[463,65,478,67],[464,6,479,8,"routeNode"],[464,15,479,17],[464,16,479,18,"dynamic"],[464,23,479,25],[464,26,479,28,"generateDynamic"],[464,41,479,43],[464,42,479,44,"routeNode"],[464,51,479,53],[464,52,479,54,"route"],[464,57,479,59],[464,58,479,60],[465,6,480,8],[465,10,480,12,"options"],[465,17,480,19],[465,18,480,20,"internal_stripLoadRoute"],[465,41,480,43],[465,43,480,45],[466,8,481,12],[466,15,481,19,"routeNode"],[466,24,481,28],[466,25,481,29,"loadRoute"],[466,34,481,38],[467,6,482,8],[468,6,483,8,"layout"],[468,12,483,14],[468,13,483,15,"children"],[468,21,483,23],[468,22,483,24,"push"],[468,26,483,28],[468,27,483,29,"routeNode"],[468,36,483,38],[468,37,483,39],[469,4,484,4],[470,4,485,4],[471,4,486,4],[471,9,486,9],[471,15,486,15,"child"],[471,20,486,20],[471,24,486,24,"directory"],[471,33,486,33],[471,34,486,34,"subdirectories"],[471,48,486,48],[471,49,486,49,"values"],[471,55,486,55],[471,56,486,56],[471,57,486,57],[471,59,486,59],[472,6,487,8,"flattenDirectoryTreeToRoutes"],[472,34,487,36],[472,35,487,37,"child"],[472,40,487,42],[472,42,487,44,"options"],[472,49,487,51],[472,51,487,53,"layout"],[472,57,487,59],[472,59,487,61,"pathToRemove"],[472,71,487,73],[472,72,487,74],[473,4,488,4],[474,4,489,4],[474,11,489,11,"layout"],[474,17,489,17],[475,2,490,0],[476,2,491,0],[476,11,491,9,"getFileMeta"],[476,22,491,20,"getFileMeta"],[476,23,491,21,"originalKey"],[476,34,491,32],[476,36,491,34,"options"],[476,43,491,41],[476,45,491,43,"redirects"],[476,54,491,52],[476,56,491,54,"rewrites"],[476,64,491,62],[476,66,491,64],[477,4,492,4],[478,4,493,4],[478,10,493,10,"key"],[478,13,493,13],[478,16,493,16],[478,17,493,17],[478,18,493,18],[478,20,493,20,"matchers_1"],[478,30,493,30],[478,31,493,31,"removeSupportedExtensions"],[478,56,493,56],[478,58,493,58],[478,59,493,59],[478,60,493,60],[478,62,493,62,"matchers_1"],[478,72,493,72],[478,73,493,73,"removeFileSystemDots"],[478,93,493,93],[478,95,493,95,"originalKey"],[478,106,493,106],[478,107,493,107],[478,108,493,108],[479,4,494,4],[479,8,494,8,"route"],[479,13,494,13],[479,16,494,16,"key"],[479,19,494,19],[480,4,495,4],[480,10,495,10,"parts"],[480,15,495,15],[480,18,495,18],[480,19,495,19],[480,20,495,20],[480,22,495,22,"matchers_1"],[480,32,495,32],[480,33,495,33,"removeFileSystemDots"],[480,53,495,53],[480,55,495,55,"originalKey"],[480,66,495,66],[480,67,495,67],[480,68,495,68,"split"],[480,73,495,73],[480,74,495,74],[480,77,495,77],[480,78,495,78],[481,4,496,4],[481,10,496,10,"filename"],[481,18,496,18],[481,21,496,21,"parts"],[481,26,496,26],[481,27,496,27,"parts"],[481,32,496,32],[481,33,496,33,"length"],[481,39,496,39],[481,42,496,42],[481,43,496,43],[481,44,496,44],[482,4,497,4],[482,10,497,10],[482,11,497,11,"filenameWithoutExtensions"],[482,36,497,36],[482,38,497,38,"platformExtension"],[482,55,497,55],[482,56,497,56],[482,59,497,59],[482,60,497,60],[482,61,497,61],[482,63,497,63,"matchers_1"],[482,73,497,73],[482,74,497,74,"removeSupportedExtensions"],[482,99,497,99],[482,101,497,101,"filename"],[482,109,497,109],[482,110,497,110],[482,111,497,111,"split"],[482,116,497,116],[482,117,497,117],[482,120,497,120],[482,121,497,121],[483,4,498,4],[483,10,498,10,"isLayout"],[483,18,498,18],[483,21,498,21,"filenameWithoutExtensions"],[483,46,498,46],[483,51,498,51],[483,60,498,60],[484,4,499,4],[484,10,499,10,"isApi"],[484,15,499,15],[484,18,499,18,"originalKey"],[484,29,499,29],[484,30,499,30,"match"],[484,35,499,35],[484,36,499,36],[484,61,499,61],[484,62,499,62],[485,4,500,4],[485,8,500,8,"filenameWithoutExtensions"],[485,33,500,33],[485,34,500,34,"startsWith"],[485,44,500,44],[485,45,500,45],[485,48,500,48],[485,49,500,49],[485,53,500,53,"filenameWithoutExtensions"],[485,78,500,78],[485,79,500,79,"endsWith"],[485,87,500,87],[485,88,500,88],[485,91,500,91],[485,92,500,92],[485,94,500,94],[486,6,501,8],[486,12,501,14],[486,16,501,18,"Error"],[486,21,501,23],[486,22,501,24],[486,39,501,41,"originalKey"],[486,50,501,52],[486,93,501,95],[486,94,501,96],[487,4,502,4],[488,4,503,4],[489,4,504,4],[489,8,504,8],[489,9,504,9,"isApi"],[489,14,504,14],[489,18,504,18,"filename"],[489,26,504,26],[489,27,504,27,"startsWith"],[489,37,504,37],[489,38,504,38],[489,41,504,41],[489,42,504,42],[489,46,504,46,"filenameWithoutExtensions"],[489,71,504,71],[489,76,504,76],[489,88,504,88],[489,90,504,90],[490,6,505,8],[490,12,505,14,"renamedRoute"],[490,24,505,26],[490,27,505,29],[490,28,505,30],[490,31,505,33,"parts"],[490,36,505,38],[490,37,505,39,"slice"],[490,42,505,44],[490,43,505,45],[490,44,505,46],[490,46,505,48],[490,47,505,49],[490,48,505,50],[490,49,505,51],[490,51,505,53,"filename"],[490,59,505,61],[490,60,505,62,"slice"],[490,65,505,67],[490,66,505,68],[490,67,505,69],[490,68,505,70],[490,69,505,71],[490,70,505,72,"join"],[490,74,505,76],[490,75,505,77],[490,78,505,80],[490,79,505,81],[491,6,506,8],[491,12,506,14],[491,16,506,18,"Error"],[491,21,506,23],[491,22,506,24],[491,39,506,41,"originalKey"],[491,50,506,52],[491,118,506,120,"renamedRoute"],[491,130,506,132],[491,133,506,135],[491,134,506,136],[492,4,507,4],[493,4,508,4],[493,8,508,8,"specificity"],[493,19,508,19],[493,22,508,22],[493,23,508,23],[494,4,509,4],[494,10,509,10,"hasPlatformExtension"],[494,30,509,30],[494,33,509,33,"validPlatforms"],[494,47,509,47],[494,48,509,48,"has"],[494,51,509,51],[494,52,509,52,"platformExtension"],[494,69,509,69],[494,70,509,70],[495,4,510,4],[495,10,510,10,"usePlatformRoutes"],[495,27,510,27],[495,30,510,30,"options"],[495,37,510,37],[495,38,510,38,"platformRoutes"],[495,52,510,52],[495,56,510,56],[495,60,510,60],[496,4,511,4],[496,8,511,8,"hasPlatformExtension"],[496,28,511,28],[496,30,511,30],[497,6,512,8],[497,10,512,12],[497,11,512,13,"usePlatformRoutes"],[497,28,512,30],[497,30,512,32],[498,8,513,12],[499,8,514,12,"specificity"],[499,19,514,23],[499,22,514,26],[499,23,514,27],[499,24,514,28],[500,6,515,8],[500,7,515,9],[500,13,516,13],[500,17,516,17],[500,18,516,18,"options"],[500,25,516,25],[500,26,516,26,"platform"],[500,34,516,34],[500,36,516,36],[501,8,517,12],[502,8,518,12],[503,8,519,12,"specificity"],[503,19,519,23],[503,22,519,26],[503,23,519,27],[503,24,519,28],[504,6,520,8],[504,7,520,9],[504,13,521,13],[504,17,521,17,"platformExtension"],[504,34,521,34],[504,39,521,39,"options"],[504,46,521,46],[504,47,521,47,"platform"],[504,55,521,55],[504,57,521,57],[505,8,522,12],[506,8,523,12,"specificity"],[506,19,523,23],[506,22,523,26],[506,23,523,27],[507,6,524,8],[507,7,524,9],[507,13,525,13],[507,17,525,17,"platformExtension"],[507,34,525,34],[507,39,525,39],[507,47,525,47],[507,51,525,51,"options"],[507,58,525,58],[507,59,525,59,"platform"],[507,67,525,67],[507,72,525,72],[507,77,525,77],[507,79,525,79],[508,8,526,12],[509,8,527,12,"specificity"],[509,19,527,23],[509,22,527,26],[509,23,527,27],[510,6,528,8],[510,7,528,9],[510,13,529,13],[510,17,529,17,"platformExtension"],[510,34,529,34],[510,39,529,39,"options"],[510,46,529,46],[510,47,529,47,"platform"],[510,55,529,55],[510,57,529,57],[511,8,530,12],[512,8,531,12],[513,8,532,12,"specificity"],[513,19,532,23],[513,22,532,26],[513,23,532,27],[513,24,532,28],[514,6,533,8],[515,6,534,8],[515,10,534,12,"isApi"],[515,15,534,17],[515,19,534,21,"specificity"],[515,30,534,32],[515,35,534,37],[515,36,534,38],[515,38,534,40],[516,8,535,12],[516,14,535,18],[516,18,535,22,"Error"],[516,23,535,27],[516,24,535,28],[516,80,535,84,"platformExtension"],[516,97,535,101],[516,108,535,112,"originalKey"],[516,119,535,123],[516,122,535,126],[516,123,535,127],[517,6,536,8],[518,6,537,8,"route"],[518,11,537,13],[518,14,537,16,"route"],[518,19,537,21],[518,20,537,22,"replace"],[518,27,537,29],[518,28,537,30],[518,32,537,34,"RegExp"],[518,38,537,40],[518,39,537,41],[518,43,537,45,"platformExtension"],[518,60,537,62],[518,63,537,65],[518,64,537,66],[518,66,537,68],[518,68,537,70],[518,69,537,71],[519,4,538,4],[520,4,539,4],[520,11,539,11],[521,6,540,8,"route"],[521,11,540,13],[522,6,541,8,"specificity"],[522,17,541,19],[523,6,542,8,"isLayout"],[523,14,542,16],[524,6,543,8,"isApi"],[524,11,543,13],[525,6,544,8,"isRedirect"],[525,16,544,18],[525,18,544,20,"key"],[525,21,544,23],[525,25,544,27,"redirects"],[525,34,544,36],[526,6,545,8,"isRewrite"],[526,15,545,17],[526,17,545,19,"key"],[526,20,545,22],[526,24,545,26,"rewrites"],[527,4,546,4],[527,5,546,5],[528,2,547,0],[529,2,548,0],[530,0,549,0],[531,0,550,0],[532,0,551,0],[533,0,552,0],[534,2,553,0],[534,11,553,9,"extrapolateGroups"],[534,28,553,26,"extrapolateGroups"],[534,29,553,27,"key"],[534,32,553,30],[534,34,553,32,"keys"],[534,38,553,36],[534,41,553,39],[534,45,553,43,"Set"],[534,48,553,46],[534,49,553,47],[534,50,553,48],[534,52,553,50],[535,4,554,4],[535,10,554,10,"match"],[535,15,554,15],[535,18,554,18],[535,19,554,19],[535,20,554,20],[535,22,554,22,"matchers_1"],[535,32,554,32],[535,33,554,33,"matchArrayGroupName"],[535,52,554,52],[535,54,554,54,"key"],[535,57,554,57],[535,58,554,58],[536,4,555,4],[536,8,555,8],[536,9,555,9,"match"],[536,14,555,14],[536,16,555,16],[537,6,556,8,"keys"],[537,10,556,12],[537,11,556,13,"add"],[537,14,556,16],[537,15,556,17,"key"],[537,18,556,20],[537,19,556,21],[538,6,557,8],[538,13,557,15,"keys"],[538,17,557,19],[539,4,558,4],[540,4,559,4],[540,10,559,10,"groups"],[540,16,559,16],[540,19,559,19,"match"],[540,24,559,24],[540,25,559,25,"split"],[540,30,559,30],[540,31,559,31],[540,34,559,34],[540,35,559,35],[541,4,560,4],[541,10,560,10,"groupsSet"],[541,19,560,19],[541,22,560,22],[541,26,560,26,"Set"],[541,29,560,29],[541,30,560,30,"groups"],[541,36,560,36],[541,37,560,37],[542,4,561,4],[542,8,561,8,"groupsSet"],[542,17,561,17],[542,18,561,18,"size"],[542,22,561,22],[542,27,561,27,"groups"],[542,33,561,33],[542,34,561,34,"length"],[542,40,561,40],[542,42,561,42],[543,6,562,8],[543,12,562,14],[543,16,562,18,"Error"],[543,21,562,23],[543,22,562,24],[543,75,562,77,"groups"],[543,81,562,83],[543,90,562,92,"key"],[543,93,562,95],[543,97,562,99],[543,98,562,100],[544,4,563,4],[545,4,564,4],[545,8,564,8,"groups"],[545,14,564,14],[545,15,564,15,"length"],[545,21,564,21],[545,26,564,26],[545,27,564,27],[545,29,564,29],[546,6,565,8,"keys"],[546,10,565,12],[546,11,565,13,"add"],[546,14,565,16],[546,15,565,17,"key"],[546,18,565,20],[546,19,565,21],[547,6,566,8],[547,13,566,15,"keys"],[547,17,566,19],[548,4,567,4],[549,4,568,4],[549,9,568,9],[549,15,568,15,"group"],[549,20,568,20],[549,24,568,24,"groups"],[549,30,568,30],[549,32,568,32],[550,6,569,8,"extrapolateGroups"],[550,23,569,25],[550,24,569,26,"key"],[550,27,569,29],[550,28,569,30,"replace"],[550,35,569,37],[550,36,569,38,"match"],[550,41,569,43],[550,43,569,45,"group"],[550,48,569,50],[550,49,569,51,"trim"],[550,53,569,55],[550,54,569,56],[550,55,569,57],[550,56,569,58],[550,58,569,60,"keys"],[550,62,569,64],[550,63,569,65],[551,4,570,4],[552,4,571,4],[552,11,571,11,"keys"],[552,15,571,15],[553,2,572,0],[554,2,573,0],[554,11,573,9,"generateDynamic"],[554,26,573,24,"generateDynamic"],[554,27,573,25,"path"],[554,31,573,29],[554,33,573,31],[555,4,574,4],[555,10,574,10,"dynamic"],[555,17,574,17],[555,20,574,20,"path"],[555,24,574,24],[555,25,575,9,"split"],[555,30,575,14],[555,31,575,15],[555,34,575,18],[555,35,575,19],[555,36,576,9,"map"],[555,39,576,12],[555,40,576,14,"part"],[555,44,576,18],[555,48,576,23],[556,6,577,8],[556,10,577,12,"part"],[556,14,577,16],[556,19,577,21],[556,31,577,33],[556,33,577,35],[557,8,578,12],[557,15,578,19],[558,10,579,16,"name"],[558,14,579,20],[558,16,579,22],[558,28,579,34],[559,10,580,16,"deep"],[559,14,580,20],[559,16,580,22],[559,20,580,26],[560,10,581,16,"notFound"],[560,18,581,24],[560,20,581,26],[561,8,582,12],[561,9,582,13],[562,6,583,8],[563,6,584,8],[563,13,584,15],[563,14,584,16],[563,15,584,17],[563,17,584,19,"matchers_1"],[563,27,584,29],[563,28,584,30,"matchDynamicName"],[563,44,584,46],[563,46,584,48,"part"],[563,50,584,52],[563,51,584,53],[563,55,584,57],[563,59,584,61],[564,4,585,4],[564,5,585,5],[564,6,585,6],[564,7,586,9,"filter"],[564,13,586,15],[564,14,586,17,"part"],[564,18,586,21],[564,22,586,26],[564,23,586,27],[564,24,586,28,"part"],[564,28,586,32],[564,29,586,33],[565,4,587,4],[565,11,587,11,"dynamic"],[565,18,587,18],[565,19,587,19,"length"],[565,25,587,25],[565,30,587,30],[565,31,587,31],[565,34,587,34],[565,38,587,38],[565,41,587,41,"dynamic"],[565,48,587,48],[566,2,588,0],[567,2,589,0],[567,11,589,9,"appendSitemapRoute"],[567,29,589,27,"appendSitemapRoute"],[567,30,589,28,"directory"],[567,39,589,37],[567,41,589,39,"options"],[567,48,589,46],[567,50,589,48],[568,4,590,4],[568,8,590,8],[568,9,590,9,"directory"],[568,18,590,18],[568,19,590,19,"files"],[568,24,590,24],[568,25,590,25,"has"],[568,28,590,28],[568,29,590,29],[568,39,590,39],[568,40,590,40],[568,44,590,44,"options"],[568,51,590,51],[568,52,590,52,"getSystemRoute"],[568,66,590,66],[568,68,590,68],[569,6,591,8,"directory"],[569,15,591,17],[569,16,591,18,"files"],[569,21,591,23],[569,22,591,24,"set"],[569,25,591,27],[569,26,591,28],[569,36,591,38],[569,38,591,40],[569,39,592,12,"options"],[569,46,592,19],[569,47,592,20,"getSystemRoute"],[569,61,592,34],[569,62,592,35],[570,8,593,16,"type"],[570,12,593,20],[570,14,593,22],[570,21,593,29],[571,8,594,16,"route"],[571,13,594,21],[571,15,594,23],[572,6,595,12],[572,7,595,13],[572,8,595,14],[572,9,596,9],[572,10,596,10],[573,4,597,4],[574,2,598,0],[575,2,599,0],[575,11,599,9,"appendNotFoundRoute"],[575,30,599,28,"appendNotFoundRoute"],[575,31,599,29,"directory"],[575,40,599,38],[575,42,599,40,"options"],[575,49,599,47],[575,51,599,49],[576,4,600,4],[576,8,600,8],[576,9,600,9,"directory"],[576,18,600,18],[576,19,600,19,"files"],[576,24,600,24],[576,25,600,25,"has"],[576,28,600,28],[576,29,600,29],[576,41,600,41],[576,42,600,42],[576,46,600,46,"options"],[576,53,600,53],[576,54,600,54,"getSystemRoute"],[576,68,600,68],[576,70,600,70],[577,6,601,8,"directory"],[577,15,601,17],[577,16,601,18,"files"],[577,21,601,23],[577,22,601,24,"set"],[577,25,601,27],[577,26,601,28],[577,38,601,40],[577,40,601,42],[577,41,602,12,"options"],[577,48,602,19],[577,49,602,20,"getSystemRoute"],[577,63,602,34],[577,64,602,35],[578,8,603,16,"type"],[578,12,603,20],[578,14,603,22],[578,21,603,29],[579,8,604,16,"route"],[579,13,604,21],[579,15,604,23],[580,6,605,12],[580,7,605,13],[580,8,605,14],[580,9,606,9],[580,10,606,10],[581,4,607,4],[582,2,608,0],[583,2,609,0],[583,11,609,9,"getLayoutNode"],[583,24,609,22,"getLayoutNode"],[583,25,609,23,"node"],[583,29,609,27],[583,31,609,29,"options"],[583,38,609,36],[583,40,609,38],[584,4,610,4],[585,0,611,0],[586,0,612,0],[587,0,613,0],[588,4,614,4],[589,4,615,4],[589,10,615,10,"groupName"],[589,19,615,19],[589,22,615,22],[589,23,615,23],[589,24,615,24],[589,26,615,26,"matchers_1"],[589,36,615,36],[589,37,615,37,"matchLastGroupName"],[589,55,615,55],[589,57,615,57,"node"],[589,61,615,61],[589,62,615,62,"route"],[589,67,615,67],[589,68,615,68],[590,4,616,4],[590,10,616,10,"childMatchingGroup"],[590,28,616,28],[590,31,616,31,"node"],[590,35,616,35],[590,36,616,36,"children"],[590,44,616,44],[590,45,616,45,"find"],[590,49,616,49],[590,50,616,51,"child"],[590,55,616,56],[590,59,616,61],[591,6,617,8],[591,13,617,15,"child"],[591,18,617,20],[591,19,617,21,"route"],[591,24,617,26],[591,25,617,27,"replace"],[591,32,617,34],[591,33,617,35],[591,43,617,45],[591,45,617,47],[591,47,617,49],[591,48,617,50],[591,53,617,55,"groupName"],[591,62,617,64],[592,4,618,4],[592,5,618,5],[592,6,618,6],[593,4,619,4],[593,8,619,8,"anchor"],[593,14,619,14],[593,17,619,17,"childMatchingGroup"],[593,35,619,35],[593,37,619,37,"route"],[593,42,619,42],[594,4,620,4],[594,10,620,10,"loaded"],[594,16,620,16],[594,19,620,19,"node"],[594,23,620,23],[594,24,620,24,"loadRoute"],[594,33,620,33],[594,34,620,34],[594,35,620,35],[595,4,621,4],[595,8,621,8,"loaded"],[595,14,621,14],[595,16,621,16,"unstable_settings"],[595,33,621,33],[595,35,621,35],[596,6,622,8],[596,10,622,12],[597,8,623,12],[598,8,624,12,"anchor"],[598,14,624,18],[598,17,625,16,"loaded"],[598,23,625,22],[598,24,625,23,"unstable_settings"],[598,41,625,40],[598,42,625,41,"anchor"],[598,48,625,47],[598,52,625,51,"loaded"],[598,58,625,57],[598,59,625,58,"unstable_settings"],[598,76,625,75],[598,77,625,76,"initialRouteName"],[598,93,625,92],[598,97,625,96,"anchor"],[598,103,625,102],[599,6,626,8],[599,7,626,9],[599,8,627,8],[599,15,627,15,"error"],[599,20,627,20],[599,22,627,22],[600,8,628,12],[600,12,628,16,"error"],[600,17,628,21],[600,29,628,33,"Error"],[600,34,628,38],[600,36,628,40],[601,10,629,16],[601,14,629,20],[601,15,629,21,"error"],[601,20,629,26],[601,21,629,27,"message"],[601,28,629,34],[601,29,629,35,"match"],[601,34,629,40],[601,35,629,41],[601,72,629,78],[601,73,629,79],[601,75,629,81],[602,12,630,20],[602,18,630,26,"error"],[602,23,630,31],[603,10,631,16],[604,8,632,12],[605,6,633,8],[606,6,634,8],[606,10,634,12,"groupName"],[606,19,634,21],[606,21,634,23],[607,8,635,12],[608,8,636,12],[608,14,636,18,"groupSpecificInitialRouteName"],[608,43,636,47],[608,46,636,50,"loaded"],[608,52,636,56],[608,53,636,57,"unstable_settings"],[608,70,636,74],[608,73,636,77,"groupName"],[608,82,636,86],[608,83,636,87],[608,85,636,89,"anchor"],[608,91,636,95],[608,95,637,16,"loaded"],[608,101,637,22],[608,102,637,23,"unstable_settings"],[608,119,637,40],[608,122,637,43,"groupName"],[608,131,637,52],[608,132,637,53],[608,134,637,55,"initialRouteName"],[608,150,637,71],[609,8,638,12,"anchor"],[609,14,638,18],[609,17,638,21,"groupSpecificInitialRouteName"],[609,46,638,50],[609,50,638,54,"anchor"],[609,56,638,60],[610,6,639,8],[611,4,640,4],[612,4,641,4],[612,11,641,11],[613,6,642,8],[613,9,642,11,"node"],[613,13,642,15],[614,6,643,8,"route"],[614,11,643,13],[614,13,643,15,"node"],[614,17,643,19],[614,18,643,20,"route"],[614,23,643,25],[614,24,643,26,"replace"],[614,31,643,33],[614,32,643,34],[614,45,643,47],[614,47,643,49],[614,49,643,51],[614,50,643,52],[615,6,644,8,"children"],[615,14,644,16],[615,16,644,18],[615,18,644,20],[616,6,644,22],[617,6,645,8,"initialRouteName"],[617,22,645,24],[617,24,645,26,"anchor"],[618,4,646,4],[618,5,646,5],[619,2,647,0],[620,2,648,0],[620,11,648,9,"crawlAndAppendInitialRoutesAndEntryFiles"],[620,51,648,49,"crawlAndAppendInitialRoutesAndEntryFiles"],[620,52,648,50,"node"],[620,56,648,54],[620,58,648,56,"options"],[620,65,648,63],[620,67,648,65,"entryPoints"],[620,78,648,76],[620,81,648,79],[620,83,648,81],[620,85,648,83],[621,4,649,4],[621,8,649,8,"node"],[621,12,649,12],[621,13,649,13,"type"],[621,17,649,17],[621,22,649,22],[621,29,649,29],[621,31,649,31],[622,6,650,8,"node"],[622,10,650,12],[622,11,650,13,"entryPoints"],[622,22,650,24],[622,25,650,27],[622,26,650,28],[622,29,650,31],[622,33,650,35,"Set"],[622,36,650,38],[622,37,650,39],[622,38,650,40],[622,41,650,43,"entryPoints"],[622,52,650,54],[622,54,650,56,"node"],[622,58,650,60],[622,59,650,61,"contextKey"],[622,69,650,71],[622,70,650,72],[622,71,650,73],[622,72,650,74],[623,4,651,4],[623,5,651,5],[623,11,652,9],[623,15,652,13,"node"],[623,19,652,17],[623,20,652,18,"type"],[623,24,652,22],[623,29,652,27],[623,39,652,37],[623,41,652,39],[624,6,653,8,"node"],[624,10,653,12],[624,11,653,13,"entryPoints"],[624,22,653,24],[624,25,653,27],[624,26,653,28],[624,29,653,31],[624,33,653,35,"Set"],[624,36,653,38],[624,37,653,39],[624,38,653,40],[624,41,653,43,"entryPoints"],[624,52,653,54],[624,54,653,56,"node"],[624,58,653,60],[624,59,653,61,"destinationContextKey"],[624,80,653,82],[624,81,653,83],[624,82,653,84],[624,83,653,85],[625,4,654,4],[625,5,654,5],[625,11,655,9],[625,15,655,13,"node"],[625,19,655,17],[625,20,655,18,"type"],[625,24,655,22],[625,29,655,27],[625,37,655,35],[625,39,655,37],[626,6,656,8],[626,10,656,12],[626,11,656,13,"node"],[626,15,656,17],[626,16,656,18,"children"],[626,24,656,26],[626,26,656,28],[627,8,657,12],[627,14,657,18],[627,18,657,22,"Error"],[627,23,657,27],[627,24,657,28],[627,35,657,39,"node"],[627,39,657,43],[627,40,657,44,"contextKey"],[627,50,657,54],[627,87,657,91],[627,88,657,92],[628,6,658,8],[629,6,659,8],[630,6,660,8,"entryPoints"],[630,17,660,19],[630,20,660,22],[630,21,660,23],[630,24,660,26,"entryPoints"],[630,35,660,37],[630,37,660,39,"node"],[630,41,660,43],[630,42,660,44,"contextKey"],[630,52,660,54],[630,53,660,55],[631,6,661,8],[632,0,662,0],[633,0,663,0],[634,0,664,0],[635,0,665,0],[636,0,666,0],[637,6,667,8],[637,12,667,14,"groupName"],[637,21,667,23],[637,24,667,26],[637,25,667,27],[637,26,667,28],[637,28,667,30,"matchers_1"],[637,38,667,40],[637,39,667,41,"matchGroupName"],[637,53,667,55],[637,55,667,57,"node"],[637,59,667,61],[637,60,667,62,"route"],[637,65,667,67],[637,66,667,68],[638,6,668,8],[638,12,668,14,"childMatchingGroup"],[638,30,668,32],[638,33,668,35,"node"],[638,37,668,39],[638,38,668,40,"children"],[638,46,668,48],[638,47,668,49,"find"],[638,51,668,53],[638,52,668,55,"child"],[638,57,668,60],[638,61,668,65],[639,8,669,12],[639,15,669,19,"child"],[639,20,669,24],[639,21,669,25,"route"],[639,26,669,30],[639,27,669,31,"replace"],[639,34,669,38],[639,35,669,39],[639,45,669,49],[639,47,669,51],[639,49,669,53],[639,50,669,54],[639,55,669,59,"groupName"],[639,64,669,68],[640,6,670,8],[640,7,670,9],[640,8,670,10],[641,6,671,8],[641,10,671,12,"anchor"],[641,16,671,18],[641,19,671,21,"childMatchingGroup"],[641,37,671,39],[641,39,671,41,"route"],[641,44,671,46],[642,6,672,8],[643,6,673,8],[643,10,673,12],[643,11,673,13,"options"],[643,18,673,20],[643,19,673,21,"internal_stripLoadRoute"],[643,42,673,44],[643,44,673,46],[644,8,674,12],[644,14,674,18,"loaded"],[644,20,674,24],[644,23,674,27,"node"],[644,27,674,31],[644,28,674,32,"loadRoute"],[644,37,674,41],[644,38,674,42],[644,39,674,43],[645,8,675,12],[645,12,675,16,"loaded"],[645,18,675,22],[645,20,675,24,"unstable_settings"],[645,37,675,41],[645,39,675,43],[646,10,676,16],[646,14,676,20],[647,12,677,20],[648,12,678,20,"anchor"],[648,18,678,26],[648,21,679,24,"loaded"],[648,27,679,30],[648,28,679,31,"unstable_settings"],[648,45,679,48],[648,46,679,49,"anchor"],[648,52,679,55],[648,56,679,59,"loaded"],[648,62,679,65],[648,63,679,66,"unstable_settings"],[648,80,679,83],[648,81,679,84,"initialRouteName"],[648,97,679,100],[648,101,679,104,"anchor"],[648,107,679,110],[649,10,680,16],[649,11,680,17],[649,12,681,16],[649,19,681,23,"error"],[649,24,681,28],[649,26,681,30],[650,12,682,20],[650,16,682,24,"error"],[650,21,682,29],[650,33,682,41,"Error"],[650,38,682,46],[650,40,682,48],[651,14,683,24],[651,18,683,28],[651,19,683,29,"error"],[651,24,683,34],[651,25,683,35,"message"],[651,32,683,42],[651,33,683,43,"match"],[651,38,683,48],[651,39,683,49],[651,76,683,86],[651,77,683,87],[651,79,683,89],[652,16,684,28],[652,22,684,34,"error"],[652,27,684,39],[653,14,685,24],[654,12,686,20],[655,10,687,16],[656,10,688,16],[656,14,688,20,"groupName"],[656,23,688,29],[656,25,688,31],[657,12,689,20],[658,12,690,20],[658,18,690,26,"groupSpecificInitialRouteName"],[658,47,690,55],[658,50,690,58,"loaded"],[658,56,690,64],[658,57,690,65,"unstable_settings"],[658,74,690,82],[658,77,690,85,"groupName"],[658,86,690,94],[658,87,690,95],[658,89,690,97,"anchor"],[658,95,690,103],[658,99,691,24,"loaded"],[658,105,691,30],[658,106,691,31,"unstable_settings"],[658,123,691,48],[658,126,691,51,"groupName"],[658,135,691,60],[658,136,691,61],[658,138,691,63,"initialRouteName"],[658,154,691,79],[659,12,692,20,"anchor"],[659,18,692,26],[659,21,692,29,"groupSpecificInitialRouteName"],[659,50,692,58],[659,54,692,62,"anchor"],[659,60,692,68],[660,10,693,16],[661,8,694,12],[662,6,695,8],[663,6,696,8],[663,10,696,12,"anchor"],[663,16,696,18],[663,18,696,20],[664,8,697,12],[664,14,697,18,"anchorRoute"],[664,25,697,29],[664,28,697,32,"node"],[664,32,697,36],[664,33,697,37,"children"],[664,41,697,45],[664,42,697,46,"find"],[664,46,697,50],[664,47,697,52,"child"],[664,52,697,57],[664,56,697,62,"child"],[664,61,697,67],[664,62,697,68,"route"],[664,67,697,73],[664,72,697,78,"anchor"],[664,78,697,84],[664,79,697,85],[665,8,698,12],[665,12,698,16],[665,13,698,17,"anchorRoute"],[665,24,698,28],[665,26,698,30],[666,10,699,16],[666,16,699,22,"validAnchorRoutes"],[666,33,699,39],[666,36,699,42,"node"],[666,40,699,46],[666,41,699,47,"children"],[666,49,699,55],[666,50,700,21,"filter"],[666,56,700,27],[666,57,700,29,"child"],[666,62,700,34],[666,66,700,39],[666,67,700,40,"child"],[666,72,700,45],[666,73,700,46,"generated"],[666,82,700,55],[666,83,700,56],[666,84,701,21,"map"],[666,87,701,24],[666,88,701,26,"child"],[666,93,701,31],[666,97,701,36],[666,101,701,40,"child"],[666,106,701,45],[666,107,701,46,"route"],[666,112,701,51],[666,115,701,54],[666,116,701,55],[666,117,702,21,"join"],[666,121,702,25],[666,122,702,26],[666,126,702,30],[666,127,702,31],[667,10,703,16],[667,14,703,20,"groupName"],[667,23,703,29],[667,25,703,31],[668,12,704,20],[668,18,704,26],[668,22,704,30,"Error"],[668,27,704,35],[668,28,704,36],[668,38,704,46,"node"],[668,42,704,50],[668,43,704,51,"contextKey"],[668,53,704,61],[668,77,704,85,"anchor"],[668,83,704,91],[668,100,704,108,"groupName"],[668,109,704,117],[668,135,704,143,"validAnchorRoutes"],[668,152,704,160],[668,154,704,162],[668,155,704,163],[669,10,705,16],[669,11,705,17],[669,17,706,21],[670,12,707,20],[670,18,707,26],[670,22,707,30,"Error"],[670,27,707,35],[670,28,707,36],[670,38,707,46,"node"],[670,42,707,50],[670,43,707,51,"contextKey"],[670,53,707,61],[670,77,707,85,"anchor"],[670,83,707,91],[670,108,707,116,"validAnchorRoutes"],[670,125,707,133],[670,127,707,135],[670,128,707,136],[671,10,708,16],[672,8,709,12],[673,8,710,12],[674,8,711,12,"node"],[674,12,711,16],[674,13,711,17,"initialRouteName"],[674,29,711,33],[674,32,711,36,"anchor"],[674,38,711,42],[675,8,712,12,"entryPoints"],[675,19,712,23],[675,20,712,24,"push"],[675,24,712,28],[675,25,712,29,"anchorRoute"],[675,36,712,40],[675,37,712,41,"contextKey"],[675,47,712,51],[675,48,712,52],[676,6,713,8],[677,6,714,8],[677,11,714,13],[677,17,714,19,"child"],[677,22,714,24],[677,26,714,28,"node"],[677,30,714,32],[677,31,714,33,"children"],[677,39,714,41],[677,41,714,43],[678,8,715,12,"crawlAndAppendInitialRoutesAndEntryFiles"],[678,48,715,52],[678,49,715,53,"child"],[678,54,715,58],[678,56,715,60,"options"],[678,63,715,67],[678,65,715,69,"entryPoints"],[678,76,715,80],[678,77,715,81],[679,6,716,8],[680,4,717,4],[681,2,718,0],[682,2,719,0],[682,11,719,9,"getMostSpecific"],[682,26,719,24,"getMostSpecific"],[682,27,719,25,"routes"],[682,33,719,31],[682,35,719,33],[683,4,720,4],[683,10,720,10,"route"],[683,15,720,15],[683,18,720,18,"routes"],[683,24,720,24],[683,25,720,25,"routes"],[683,31,720,31],[683,32,720,32,"length"],[683,38,720,38],[683,41,720,41],[683,42,720,42],[683,43,720,43],[684,4,721,4],[684,8,721,8],[684,9,721,9,"routes"],[684,15,721,15],[684,16,721,16],[684,17,721,17],[684,18,721,18],[684,20,721,20],[685,6,722,8],[685,12,722,14],[685,16,722,18,"Error"],[685,21,722,23],[685,22,722,24],[685,34,722,36,"route"],[685,39,722,41],[685,40,722,42,"contextKey"],[685,50,722,52],[685,120,722,122],[685,121,722,123],[686,4,723,4],[687,4,724,4],[688,4,725,4],[689,4,726,4],[689,11,726,11,"routes"],[689,17,726,17],[689,18,726,18,"routes"],[689,24,726,24],[689,25,726,25,"length"],[689,31,726,31],[689,34,726,34],[689,35,726,35],[689,36,726,36],[690,2,727,0],[691,0,727,1],[691,3]],"functionMap":{"names":["<global>","getRoutes","getMiddleware","contextModule.keys.filter$argument_0","isValidMiddleware","allMiddlewareFiles.filter$argument_0","rootMiddlewareFiles.map$argument_0","middleware.loadRoute","getDirectoryTree","getValidDestinations","contextKeys.map$argument_0","ignoreList.some$argument_0","getValidDestinations.find$argument_0","node.loadRoute","getNameFromRedirectPath","getNameWithoutInvisibleSegmentsFromRedirectPath","getSourceContextKeyFromRedirectSource","flattenDirectoryTreeToRoutes","getFileMeta","extrapolateGroups","generateDynamic","path.split.map$argument_0","path.split.map.filter$argument_0","appendSitemapRoute","appendNotFoundRoute","getLayoutNode","node.children.find$argument_0","crawlAndAppendInitialRoutesAndEntryFiles","node.children.filter$argument_0","node.children.filter.map$argument_0","getMostSpecific"],"mappings":"AAA;ACoB;CDe;AEI;2DCC,oCD;8BEa,gDF;wDGE,6CH;+HIU,eJ;QKK;SLY;CFO;AQI;iCCqB;sDCE;SDK;KDE;oCGY,uCH;kDIK,2DJ;oCGwC,uCH;qEIG,2DJ;4BG2B,+BH;YKW;aL+B;CR8K;AcC;CdK;AeC;CfE;AgBE;ChBK;AiBI;CjB2C;AkBC;ClBwD;AmBM;CnBmB;AoBC;aCG;KDS;gBEC,gBF;CpBE;AuBC;CvBS;AwBC;CxBS;AyBC;kDCO;KDE;CzB6B;A2BC;sDDoB;SCE;mDD2B,iCC;4BCG,2BD;yBEC,6BF;C3BiB;A8BC;C9BQ"},"hasCjsExports":true},"type":"js/module"}]}