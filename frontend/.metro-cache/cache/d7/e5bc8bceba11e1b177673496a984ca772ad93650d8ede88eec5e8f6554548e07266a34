{"dependencies":[{"name":"tslib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":14,"index":176},"end":{"line":5,"column":30,"index":192}}],"key":"vm88vOsSPZItrLOmMEyUuGkd1y4=","exportNames":["*"],"imports":1}},{"name":"../../utils/AverageWindow","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":22,"index":216},"end":{"line":6,"column":58,"index":252}}],"key":"tmONry2Y6SpAf3V1Nv6+QBctPRU=","exportNames":["*"],"imports":1}},{"name":"../helpers/ConsecutiveNumbers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":27,"index":281},"end":{"line":7,"column":67,"index":321}}],"key":"uaLH7BBZqXTlL+pc/kEgtO9Kbww=","exportNames":["*"],"imports":1}},{"name":"../utils/findVisibleIndex","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":25,"index":348},"end":{"line":8,"column":61,"index":384}}],"key":"isgm7NzfCf18Ems6ANyTuBZfI3k=","exportNames":["*"],"imports":1}},{"name":"../utils/measureLayout","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":22,"index":408},"end":{"line":9,"column":55,"index":441}}],"key":"U3JNeNF1U1JbnzWrhMpI9QEUIUE=","exportNames":["*"],"imports":1}},{"name":"../../errors/ErrorMessages","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":22,"index":465},"end":{"line":10,"column":59,"index":502}}],"key":"HKsVbSIhrmvcTsUmMJtaztJFluk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  // Interface of layout manager for app's listviews\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.RVLayoutManager = void 0;\n  var tslib_1 = require(_dependencyMap[0], \"tslib\");\n  var AverageWindow_1 = require(_dependencyMap[1], \"../../utils/AverageWindow\");\n  var ConsecutiveNumbers_1 = require(_dependencyMap[2], \"../helpers/ConsecutiveNumbers\");\n  var findVisibleIndex_1 = require(_dependencyMap[3], \"../utils/findVisibleIndex\");\n  var measureLayout_1 = require(_dependencyMap[4], \"../utils/measureLayout\");\n  var ErrorMessages_1 = require(_dependencyMap[5], \"../../errors/ErrorMessages\");\n  /**\n   * Base abstract class for layout managers in the recycler view system.\n   * Provides common functionality for managing item layouts and dimensions.\n   * Supports both horizontal and vertical layouts with dynamic item sizing.\n   */\n  var RVLayoutManager = /** @class */function () {\n    function RVLayoutManager(params, previousLayoutManager) {\n      var _a, _b;\n      /** Flag indicating if the layout requires repainting */\n      this.requiresRepaint = false;\n      /** Maximum number of items to process in a single layout pass */\n      this.maxItemsToProcess = 250;\n      /** Information about item spans and sizes */\n      this.spanSizeInfo = {};\n      /** Span tracker for each item */\n      this.spanTracker = [];\n      /** Current max index with changed layout */\n      this.currentMaxIndexWithChangedLayout = -1;\n      /**\n       * Last index that was skipped during layout computation.\n       * Used to determine if a layout needs to be recomputed.\n       */\n      this.lastSkippedLayoutIndex = Number.MAX_VALUE;\n      this.heightAverageWindow = new AverageWindow_1.MultiTypeAverageWindow(5, 200);\n      this.widthAverageWindow = new AverageWindow_1.MultiTypeAverageWindow(5, 200);\n      this.getItemType = params.getItemType;\n      this.overrideItemLayout = params.overrideItemLayout;\n      this.layouts = (_a = previousLayoutManager === null || previousLayoutManager === void 0 ? void 0 : previousLayoutManager.layouts) !== null && _a !== void 0 ? _a : [];\n      if (previousLayoutManager) {\n        this.updateLayoutParams(params);\n      } else {\n        this.horizontal = Boolean(params.horizontal);\n        this.windowSize = params.windowSize;\n        this.maxColumns = (_b = params.maxColumns) !== null && _b !== void 0 ? _b : 1;\n      }\n    }\n    /**\n     * Gets the estimated width for an item based on its type.\n     * @param index Index of the item\n     * @returns Estimated width\n     */\n    RVLayoutManager.prototype.getEstimatedWidth = function (index) {\n      return this.widthAverageWindow.getCurrentValue(this.getItemType(index));\n    };\n    /**\n     * Gets the estimated height for an item based on its type.\n     * @param index Index of the item\n     * @returns Estimated height\n     */\n    RVLayoutManager.prototype.getEstimatedHeight = function (index) {\n      return this.heightAverageWindow.getCurrentValue(this.getItemType(index));\n    };\n    /**\n     * Checks if the layout is horizontal.\n     * @returns True if horizontal, false if vertical\n     */\n    RVLayoutManager.prototype.isHorizontal = function () {\n      return this.horizontal;\n    };\n    /**\n     * Gets the dimensions of the visible window.\n     * @returns Window dimensions\n     */\n    RVLayoutManager.prototype.getWindowsSize = function () {\n      return this.windowSize;\n    };\n    /**\n     * Gets indices of items currently visible in the viewport.\n     * Uses binary search for efficient lookup.\n     * @param unboundDimensionStart Start position of viewport (start X or start Y)\n     * @param unboundDimensionEnd End position of viewport (end X or end Y)\n     * @returns ConsecutiveNumbers containing visible indices\n     */\n    RVLayoutManager.prototype.getVisibleLayouts = function (unboundDimensionStart, unboundDimensionEnd) {\n      // Find the first visible index\n      var firstVisibleIndex = (0, findVisibleIndex_1.findFirstVisibleIndex)(this.layouts, unboundDimensionStart, this.horizontal);\n      // Find the last visible index\n      var lastVisibleIndex = (0, findVisibleIndex_1.findLastVisibleIndex)(this.layouts, unboundDimensionEnd, this.horizontal);\n      // Collect the indices in the range\n      if (firstVisibleIndex !== -1 && lastVisibleIndex !== -1) {\n        return new ConsecutiveNumbers_1.ConsecutiveNumbers(firstVisibleIndex, lastVisibleIndex);\n      }\n      return ConsecutiveNumbers_1.ConsecutiveNumbers.EMPTY;\n    };\n    /**\n     * Removes layout information for specified indices and recomputes layout.\n     * @param indices Array of indices to remove\n     */\n    RVLayoutManager.prototype.deleteLayout = function (indices) {\n      var e_1, _a;\n      // Sort indices in descending order\n      indices.sort(function (num1, num2) {\n        return num2 - num1;\n      });\n      try {\n        // Remove elements from the array\n        for (var indices_1 = tslib_1.__values(indices), indices_1_1 = indices_1.next(); !indices_1_1.done; indices_1_1 = indices_1.next()) {\n          var index = indices_1_1.value;\n          this.layouts.splice(index, 1);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (indices_1_1 && !indices_1_1.done && (_a = indices_1.return)) _a.call(indices_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      var startIndex = Math.min.apply(Math, tslib_1.__spreadArray([], tslib_1.__read(indices), false));\n      // Recompute layouts starting from the smallest index in the original indices array\n      this._recomputeLayouts(this.getMinRecomputeIndex(startIndex), this.getMaxRecomputeIndex(startIndex));\n    };\n    /**\n     * Updates layout information for items and recomputes layout if necessary.\n     * @param layoutInfo Array of layout information for items (real measurements)\n     * @param totalItemCount Total number of items in the list\n     */\n    RVLayoutManager.prototype.modifyLayout = function (layoutInfo, totalItemCount) {\n      var _a;\n      this.maxItemsToProcess = Math.max(this.maxItemsToProcess, layoutInfo.length * 10);\n      var minRecomputeIndex = Number.MAX_VALUE;\n      if (this.layouts.length > totalItemCount) {\n        this.layouts.length = totalItemCount;\n        this.spanTracker.length = totalItemCount;\n        minRecomputeIndex = totalItemCount - 1; // <0 gets skipped so it's safe to set to totalItemCount - 1\n      }\n      // update average windows\n      minRecomputeIndex = Math.min(minRecomputeIndex, this.computeEstimatesAndMinMaxChangedLayout(layoutInfo));\n      if (this.layouts.length < totalItemCount && totalItemCount > 0) {\n        var startIndex = this.layouts.length;\n        this.layouts.length = totalItemCount;\n        this.spanTracker.length = totalItemCount;\n        for (var i = startIndex; i < totalItemCount; i++) {\n          this.getLayout(i);\n          this.getSpan(i);\n        }\n        this.recomputeLayouts(startIndex, totalItemCount - 1);\n      }\n      // compute minRecomputeIndex\n      minRecomputeIndex = Math.min(minRecomputeIndex, this.lastSkippedLayoutIndex, this.computeMinIndexWithChangedSpan(layoutInfo), (_a = this.processLayoutInfo(layoutInfo, totalItemCount)) !== null && _a !== void 0 ? _a : minRecomputeIndex, this.computeEstimatesAndMinMaxChangedLayout(layoutInfo));\n      if (minRecomputeIndex >= 0 && minRecomputeIndex < totalItemCount) {\n        var maxRecomputeIndex = this.getMaxRecomputeIndex(minRecomputeIndex);\n        this._recomputeLayouts(minRecomputeIndex, maxRecomputeIndex);\n      }\n      this.currentMaxIndexWithChangedLayout = -1;\n    };\n    /**\n     * Gets layout information for an item at the given index.\n     * Creates and initializes a new layout if one doesn't exist.\n     * @param index Index of the item\n     * @returns Layout information for the item\n     */\n    RVLayoutManager.prototype.getLayout = function (index) {\n      if (index >= this.layouts.length) {\n        throw new Error(ErrorMessages_1.ErrorMessages.indexOutOfBounds);\n      }\n      var layout = this.layouts[index];\n      if (!layout) {\n        // Create new layout with estimated dimensions\n        layout = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n        this.layouts[index] = layout;\n      }\n      if (!layout.isWidthMeasured || !layout.isHeightMeasured) {\n        this.estimateLayout(index);\n      }\n      return layout;\n    };\n    /**\n     * Updates layout parameters and triggers recomputation if necessary.\n     * @param params New layout parameters\n     */\n    RVLayoutManager.prototype.updateLayoutParams = function (params) {\n      var _a, _b, _c;\n      this.windowSize = params.windowSize;\n      this.horizontal = (_a = params.horizontal) !== null && _a !== void 0 ? _a : this.horizontal;\n      this.maxColumns = (_b = params.maxColumns) !== null && _b !== void 0 ? _b : this.maxColumns;\n      this.optimizeItemArrangement = (_c = params.optimizeItemArrangement) !== null && _c !== void 0 ? _c : this.optimizeItemArrangement;\n    };\n    RVLayoutManager.prototype.getLayoutCount = function () {\n      return this.layouts.length;\n    };\n    /**\n     * Gets span for an item, applying any overrides.\n     * This is intended to be called during a relayout call. The value is tracked and used to determine if a span change has occurred.\n     * If skipTracking is true, the operation is not tracked. Can be useful if span is required outside of a relayout call.\n     * The tracker is used to call handleSpanChange if a span change has occurred before relayout call.\n     * // TODO: improve this contract.\n     * @param index Index of the item\n     * @returns Span for the item\n     */\n    RVLayoutManager.prototype.getSpan = function (index, skipTracking) {\n      var _a;\n      if (skipTracking === void 0) {\n        skipTracking = false;\n      }\n      this.spanSizeInfo.span = undefined;\n      this.overrideItemLayout(index, this.spanSizeInfo);\n      var span = Math.min((_a = this.spanSizeInfo.span) !== null && _a !== void 0 ? _a : 1, this.maxColumns);\n      if (!skipTracking) {\n        this.spanTracker[index] = span;\n      }\n      return span;\n    };\n    /**\n     * Method to handle span change for an item. Can be overridden by subclasses.\n     * @param index Index of the item\n     */\n    RVLayoutManager.prototype.handleSpanChange = function (index) {};\n    /**\n     * Gets the maximum index to process in a single layout pass.\n     * @param startIndex Starting index\n     * @returns Maximum index to process\n     */\n    RVLayoutManager.prototype.getMaxRecomputeIndex = function (startIndex) {\n      return Math.min(Math.max(startIndex, this.currentMaxIndexWithChangedLayout) + this.maxItemsToProcess, this.layouts.length - 1);\n    };\n    /**\n     * Gets the minimum index to process in a single layout pass.\n     * @param startIndex Starting index\n     * @returns Minimum index to process\n     */\n    RVLayoutManager.prototype.getMinRecomputeIndex = function (startIndex) {\n      return startIndex;\n    };\n    RVLayoutManager.prototype._recomputeLayouts = function (startIndex, endIndex) {\n      this.recomputeLayouts(startIndex, endIndex);\n      if (this.lastSkippedLayoutIndex >= startIndex && this.lastSkippedLayoutIndex <= endIndex) {\n        this.lastSkippedLayoutIndex = Number.MAX_VALUE;\n      }\n      if (endIndex + 1 < this.layouts.length) {\n        this.lastSkippedLayoutIndex = Math.min(endIndex + 1, this.lastSkippedLayoutIndex);\n        var lastIndex = this.layouts.length - 1;\n        // Since layout managers derive height from last indices we need to make\n        // sure they're not too much out of sync.\n        if (this.layouts[lastIndex].y < this.layouts[endIndex].y) {\n          this.recomputeLayouts(this.lastSkippedLayoutIndex, lastIndex);\n          this.lastSkippedLayoutIndex = Number.MAX_VALUE;\n        }\n      }\n    };\n    /**\n     * Computes size estimates and finds the minimum recompute index.\n     * @param layoutInfo Array of layout information for items\n     * @returns Minimum index that needs recomputation\n     */\n    RVLayoutManager.prototype.computeEstimatesAndMinMaxChangedLayout = function (layoutInfo) {\n      var e_2, _a;\n      var minRecomputeIndex = Number.MAX_VALUE;\n      try {\n        for (var layoutInfo_1 = tslib_1.__values(layoutInfo), layoutInfo_1_1 = layoutInfo_1.next(); !layoutInfo_1_1.done; layoutInfo_1_1 = layoutInfo_1.next()) {\n          var info = layoutInfo_1_1.value;\n          var index = info.index,\n            dimensions = info.dimensions;\n          var storedLayout = this.layouts[index];\n          if (index >= this.lastSkippedLayoutIndex || !storedLayout || !storedLayout.isHeightMeasured || !storedLayout.isWidthMeasured || (0, measureLayout_1.areDimensionsNotEqual)(storedLayout.height, dimensions.height) || (0, measureLayout_1.areDimensionsNotEqual)(storedLayout.width, dimensions.width)) {\n            minRecomputeIndex = Math.min(minRecomputeIndex, index);\n            this.currentMaxIndexWithChangedLayout = Math.max(this.currentMaxIndexWithChangedLayout, index);\n          }\n          this.heightAverageWindow.addValue(dimensions.height, this.getItemType(index));\n          this.widthAverageWindow.addValue(dimensions.width, this.getItemType(index));\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (layoutInfo_1_1 && !layoutInfo_1_1.done && (_a = layoutInfo_1.return)) _a.call(layoutInfo_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n      return minRecomputeIndex;\n    };\n    RVLayoutManager.prototype.computeMinIndexWithChangedSpan = function (layoutInfo) {\n      var e_3, _a;\n      var minIndexWithChangedSpan = Number.MAX_VALUE;\n      try {\n        for (var layoutInfo_2 = tslib_1.__values(layoutInfo), layoutInfo_2_1 = layoutInfo_2.next(); !layoutInfo_2_1.done; layoutInfo_2_1 = layoutInfo_2.next()) {\n          var info = layoutInfo_2_1.value;\n          var index = info.index;\n          var span = this.getSpan(index, true);\n          var storedSpan = this.spanTracker[index];\n          if (span !== storedSpan) {\n            this.spanTracker[index] = span;\n            this.handleSpanChange(index);\n            minIndexWithChangedSpan = Math.min(minIndexWithChangedSpan, index);\n          }\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (layoutInfo_2_1 && !layoutInfo_2_1.done && (_a = layoutInfo_2.return)) _a.call(layoutInfo_2);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n      return minIndexWithChangedSpan;\n    };\n    return RVLayoutManager;\n  }();\n  exports.RVLayoutManager = RVLayoutManager;\n});","lineCount":328,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,2,3,0,"Object"],[5,8,3,6],[5,9,3,7,"defineProperty"],[5,23,3,21],[5,24,3,22,"exports"],[5,31,3,29],[5,33,3,31],[5,45,3,43],[5,47,3,45],[6,4,3,47,"value"],[6,9,3,52],[6,11,3,54],[7,2,3,59],[7,3,3,60],[7,4,3,61],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"RVLayoutManager"],[8,25,4,23],[8,28,4,26],[8,33,4,31],[8,34,4,32],[9,2,5,0],[9,6,5,4,"tslib_1"],[9,13,5,11],[9,16,5,14,"require"],[9,23,5,21],[9,24,5,21,"_dependencyMap"],[9,38,5,21],[9,50,5,29],[9,51,5,30],[10,2,6,0],[10,6,6,4,"AverageWindow_1"],[10,21,6,19],[10,24,6,22,"require"],[10,31,6,29],[10,32,6,29,"_dependencyMap"],[10,46,6,29],[10,78,6,57],[10,79,6,58],[11,2,7,0],[11,6,7,4,"ConsecutiveNumbers_1"],[11,26,7,24],[11,29,7,27,"require"],[11,36,7,34],[11,37,7,34,"_dependencyMap"],[11,51,7,34],[11,87,7,66],[11,88,7,67],[12,2,8,0],[12,6,8,4,"findVisibleIndex_1"],[12,24,8,22],[12,27,8,25,"require"],[12,34,8,32],[12,35,8,32,"_dependencyMap"],[12,49,8,32],[12,81,8,60],[12,82,8,61],[13,2,9,0],[13,6,9,4,"measureLayout_1"],[13,21,9,19],[13,24,9,22,"require"],[13,31,9,29],[13,32,9,29,"_dependencyMap"],[13,46,9,29],[13,75,9,54],[13,76,9,55],[14,2,10,0],[14,6,10,4,"ErrorMessages_1"],[14,21,10,19],[14,24,10,22,"require"],[14,31,10,29],[14,32,10,29,"_dependencyMap"],[14,46,10,29],[14,79,10,58],[14,80,10,59],[15,2,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,2,16,0],[20,6,16,4,"RVLayoutManager"],[20,21,16,19],[20,24,16,22],[20,37,16,37],[20,49,16,49],[21,4,17,4],[21,13,17,13,"RVLayoutManager"],[21,28,17,28,"RVLayoutManager"],[21,29,17,29,"params"],[21,35,17,35],[21,37,17,37,"previousLayoutManager"],[21,58,17,58],[21,60,17,60],[22,6,18,8],[22,10,18,12,"_a"],[22,12,18,14],[22,14,18,16,"_b"],[22,16,18,18],[23,6,19,8],[24,6,20,8],[24,10,20,12],[24,11,20,13,"requiresRepaint"],[24,26,20,28],[24,29,20,31],[24,34,20,36],[25,6,21,8],[26,6,22,8],[26,10,22,12],[26,11,22,13,"maxItemsToProcess"],[26,28,22,30],[26,31,22,33],[26,34,22,36],[27,6,23,8],[28,6,24,8],[28,10,24,12],[28,11,24,13,"spanSizeInfo"],[28,23,24,25],[28,26,24,28],[28,27,24,29],[28,28,24,30],[29,6,25,8],[30,6,26,8],[30,10,26,12],[30,11,26,13,"spanTracker"],[30,22,26,24],[30,25,26,27],[30,27,26,29],[31,6,27,8],[32,6,28,8],[32,10,28,12],[32,11,28,13,"currentMaxIndexWithChangedLayout"],[32,43,28,45],[32,46,28,48],[32,47,28,49],[32,48,28,50],[33,6,29,8],[34,0,30,0],[35,0,31,0],[36,0,32,0],[37,6,33,8],[37,10,33,12],[37,11,33,13,"lastSkippedLayoutIndex"],[37,33,33,35],[37,36,33,38,"Number"],[37,42,33,44],[37,43,33,45,"MAX_VALUE"],[37,52,33,54],[38,6,34,8],[38,10,34,12],[38,11,34,13,"heightAverageWindow"],[38,30,34,32],[38,33,34,35],[38,37,34,39,"AverageWindow_1"],[38,52,34,54],[38,53,34,55,"MultiTypeAverageWindow"],[38,75,34,77],[38,76,34,78],[38,77,34,79],[38,79,34,81],[38,82,34,84],[38,83,34,85],[39,6,35,8],[39,10,35,12],[39,11,35,13,"widthAverageWindow"],[39,29,35,31],[39,32,35,34],[39,36,35,38,"AverageWindow_1"],[39,51,35,53],[39,52,35,54,"MultiTypeAverageWindow"],[39,74,35,76],[39,75,35,77],[39,76,35,78],[39,78,35,80],[39,81,35,83],[39,82,35,84],[40,6,36,8],[40,10,36,12],[40,11,36,13,"getItemType"],[40,22,36,24],[40,25,36,27,"params"],[40,31,36,33],[40,32,36,34,"getItemType"],[40,43,36,45],[41,6,37,8],[41,10,37,12],[41,11,37,13,"overrideItemLayout"],[41,29,37,31],[41,32,37,34,"params"],[41,38,37,40],[41,39,37,41,"overrideItemLayout"],[41,57,37,59],[42,6,38,8],[42,10,38,12],[42,11,38,13,"layouts"],[42,18,38,20],[42,21,38,23],[42,22,38,24,"_a"],[42,24,38,26],[42,27,38,29,"previousLayoutManager"],[42,48,38,50],[42,53,38,55],[42,57,38,59],[42,61,38,63,"previousLayoutManager"],[42,82,38,84],[42,87,38,89],[42,92,38,94],[42,93,38,95],[42,96,38,98],[42,101,38,103],[42,102,38,104],[42,105,38,107,"previousLayoutManager"],[42,126,38,128],[42,127,38,129,"layouts"],[42,134,38,136],[42,140,38,142],[42,144,38,146],[42,148,38,150,"_a"],[42,150,38,152],[42,155,38,157],[42,160,38,162],[42,161,38,163],[42,164,38,166,"_a"],[42,166,38,168],[42,169,38,171],[42,171,38,173],[43,6,39,8],[43,10,39,12,"previousLayoutManager"],[43,31,39,33],[43,33,39,35],[44,8,40,12],[44,12,40,16],[44,13,40,17,"updateLayoutParams"],[44,31,40,35],[44,32,40,36,"params"],[44,38,40,42],[44,39,40,43],[45,6,41,8],[45,7,41,9],[45,13,42,13],[46,8,43,12],[46,12,43,16],[46,13,43,17,"horizontal"],[46,23,43,27],[46,26,43,30,"Boolean"],[46,33,43,37],[46,34,43,38,"params"],[46,40,43,44],[46,41,43,45,"horizontal"],[46,51,43,55],[46,52,43,56],[47,8,44,12],[47,12,44,16],[47,13,44,17,"windowSize"],[47,23,44,27],[47,26,44,30,"params"],[47,32,44,36],[47,33,44,37,"windowSize"],[47,43,44,47],[48,8,45,12],[48,12,45,16],[48,13,45,17,"maxColumns"],[48,23,45,27],[48,26,45,30],[48,27,45,31,"_b"],[48,29,45,33],[48,32,45,36,"params"],[48,38,45,42],[48,39,45,43,"maxColumns"],[48,49,45,53],[48,55,45,59],[48,59,45,63],[48,63,45,67,"_b"],[48,65,45,69],[48,70,45,74],[48,75,45,79],[48,76,45,80],[48,79,45,83,"_b"],[48,81,45,85],[48,84,45,88],[48,85,45,89],[49,6,46,8],[50,4,47,4],[51,4,48,4],[52,0,49,0],[53,0,50,0],[54,0,51,0],[55,0,52,0],[56,4,53,4,"RVLayoutManager"],[56,19,53,19],[56,20,53,20,"prototype"],[56,29,53,29],[56,30,53,30,"getEstimatedWidth"],[56,47,53,47],[56,50,53,50],[56,60,53,60,"index"],[56,65,53,65],[56,67,53,67],[57,6,54,8],[57,13,54,15],[57,17,54,19],[57,18,54,20,"widthAverageWindow"],[57,36,54,38],[57,37,54,39,"getCurrentValue"],[57,52,54,54],[57,53,54,55],[57,57,54,59],[57,58,54,60,"getItemType"],[57,69,54,71],[57,70,54,72,"index"],[57,75,54,77],[57,76,54,78],[57,77,54,79],[58,4,55,4],[58,5,55,5],[59,4,56,4],[60,0,57,0],[61,0,58,0],[62,0,59,0],[63,0,60,0],[64,4,61,4,"RVLayoutManager"],[64,19,61,19],[64,20,61,20,"prototype"],[64,29,61,29],[64,30,61,30,"getEstimatedHeight"],[64,48,61,48],[64,51,61,51],[64,61,61,61,"index"],[64,66,61,66],[64,68,61,68],[65,6,62,8],[65,13,62,15],[65,17,62,19],[65,18,62,20,"heightAverageWindow"],[65,37,62,39],[65,38,62,40,"getCurrentValue"],[65,53,62,55],[65,54,62,56],[65,58,62,60],[65,59,62,61,"getItemType"],[65,70,62,72],[65,71,62,73,"index"],[65,76,62,78],[65,77,62,79],[65,78,62,80],[66,4,63,4],[66,5,63,5],[67,4,64,4],[68,0,65,0],[69,0,66,0],[70,0,67,0],[71,4,68,4,"RVLayoutManager"],[71,19,68,19],[71,20,68,20,"prototype"],[71,29,68,29],[71,30,68,30,"isHorizontal"],[71,42,68,42],[71,45,68,45],[71,57,68,57],[72,6,69,8],[72,13,69,15],[72,17,69,19],[72,18,69,20,"horizontal"],[72,28,69,30],[73,4,70,4],[73,5,70,5],[74,4,71,4],[75,0,72,0],[76,0,73,0],[77,0,74,0],[78,4,75,4,"RVLayoutManager"],[78,19,75,19],[78,20,75,20,"prototype"],[78,29,75,29],[78,30,75,30,"getWindowsSize"],[78,44,75,44],[78,47,75,47],[78,59,75,59],[79,6,76,8],[79,13,76,15],[79,17,76,19],[79,18,76,20,"windowSize"],[79,28,76,30],[80,4,77,4],[80,5,77,5],[81,4,78,4],[82,0,79,0],[83,0,80,0],[84,0,81,0],[85,0,82,0],[86,0,83,0],[87,0,84,0],[88,4,85,4,"RVLayoutManager"],[88,19,85,19],[88,20,85,20,"prototype"],[88,29,85,29],[88,30,85,30,"getVisibleLayouts"],[88,47,85,47],[88,50,85,50],[88,60,85,60,"unboundDimensionStart"],[88,81,85,81],[88,83,85,83,"unboundDimensionEnd"],[88,102,85,102],[88,104,85,104],[89,6,86,8],[90,6,87,8],[90,10,87,12,"firstVisibleIndex"],[90,27,87,29],[90,30,87,32],[90,31,87,33],[90,32,87,34],[90,34,87,36,"findVisibleIndex_1"],[90,52,87,54],[90,53,87,55,"findFirstVisibleIndex"],[90,74,87,76],[90,76,87,78],[90,80,87,82],[90,81,87,83,"layouts"],[90,88,87,90],[90,90,87,92,"unboundDimensionStart"],[90,111,87,113],[90,113,87,115],[90,117,87,119],[90,118,87,120,"horizontal"],[90,128,87,130],[90,129,87,131],[91,6,88,8],[92,6,89,8],[92,10,89,12,"lastVisibleIndex"],[92,26,89,28],[92,29,89,31],[92,30,89,32],[92,31,89,33],[92,33,89,35,"findVisibleIndex_1"],[92,51,89,53],[92,52,89,54,"findLastVisibleIndex"],[92,72,89,74],[92,74,89,76],[92,78,89,80],[92,79,89,81,"layouts"],[92,86,89,88],[92,88,89,90,"unboundDimensionEnd"],[92,107,89,109],[92,109,89,111],[92,113,89,115],[92,114,89,116,"horizontal"],[92,124,89,126],[92,125,89,127],[93,6,90,8],[94,6,91,8],[94,10,91,12,"firstVisibleIndex"],[94,27,91,29],[94,32,91,34],[94,33,91,35],[94,34,91,36],[94,38,91,40,"lastVisibleIndex"],[94,54,91,56],[94,59,91,61],[94,60,91,62],[94,61,91,63],[94,63,91,65],[95,8,92,12],[95,15,92,19],[95,19,92,23,"ConsecutiveNumbers_1"],[95,39,92,43],[95,40,92,44,"ConsecutiveNumbers"],[95,58,92,62],[95,59,92,63,"firstVisibleIndex"],[95,76,92,80],[95,78,92,82,"lastVisibleIndex"],[95,94,92,98],[95,95,92,99],[96,6,93,8],[97,6,94,8],[97,13,94,15,"ConsecutiveNumbers_1"],[97,33,94,35],[97,34,94,36,"ConsecutiveNumbers"],[97,52,94,54],[97,53,94,55,"EMPTY"],[97,58,94,60],[98,4,95,4],[98,5,95,5],[99,4,96,4],[100,0,97,0],[101,0,98,0],[102,0,99,0],[103,4,100,4,"RVLayoutManager"],[103,19,100,19],[103,20,100,20,"prototype"],[103,29,100,29],[103,30,100,30,"deleteLayout"],[103,42,100,42],[103,45,100,45],[103,55,100,55,"indices"],[103,62,100,62],[103,64,100,64],[104,6,101,8],[104,10,101,12,"e_1"],[104,13,101,15],[104,15,101,17,"_a"],[104,17,101,19],[105,6,102,8],[106,6,103,8,"indices"],[106,13,103,15],[106,14,103,16,"sort"],[106,18,103,20],[106,19,103,21],[106,29,103,31,"num1"],[106,33,103,35],[106,35,103,37,"num2"],[106,39,103,41],[106,41,103,43],[107,8,103,45],[107,15,103,52,"num2"],[107,19,103,56],[107,22,103,59,"num1"],[107,26,103,63],[108,6,103,65],[108,7,103,66],[108,8,103,67],[109,6,104,8],[109,10,104,12],[110,8,105,12],[111,8,106,12],[111,13,106,17],[111,17,106,21,"indices_1"],[111,26,106,30],[111,29,106,33,"tslib_1"],[111,36,106,40],[111,37,106,41,"__values"],[111,45,106,49],[111,46,106,50,"indices"],[111,53,106,57],[111,54,106,58],[111,56,106,60,"indices_1_1"],[111,67,106,71],[111,70,106,74,"indices_1"],[111,79,106,83],[111,80,106,84,"next"],[111,84,106,88],[111,85,106,89],[111,86,106,90],[111,88,106,92],[111,89,106,93,"indices_1_1"],[111,100,106,104],[111,101,106,105,"done"],[111,105,106,109],[111,107,106,111,"indices_1_1"],[111,118,106,122],[111,121,106,125,"indices_1"],[111,130,106,134],[111,131,106,135,"next"],[111,135,106,139],[111,136,106,140],[111,137,106,141],[111,139,106,143],[112,10,107,16],[112,14,107,20,"index"],[112,19,107,25],[112,22,107,28,"indices_1_1"],[112,33,107,39],[112,34,107,40,"value"],[112,39,107,45],[113,10,108,16],[113,14,108,20],[113,15,108,21,"layouts"],[113,22,108,28],[113,23,108,29,"splice"],[113,29,108,35],[113,30,108,36,"index"],[113,35,108,41],[113,37,108,43],[113,38,108,44],[113,39,108,45],[114,8,109,12],[115,6,110,8],[115,7,110,9],[115,8,111,8],[115,15,111,15,"e_1_1"],[115,20,111,20],[115,22,111,22],[116,8,111,24,"e_1"],[116,11,111,27],[116,14,111,30],[117,10,111,32,"error"],[117,15,111,37],[117,17,111,39,"e_1_1"],[118,8,111,45],[118,9,111,46],[119,6,111,48],[119,7,111,49],[119,16,112,16],[120,8,113,12],[120,12,113,16],[121,10,114,16],[121,14,114,20,"indices_1_1"],[121,25,114,31],[121,29,114,35],[121,30,114,36,"indices_1_1"],[121,41,114,47],[121,42,114,48,"done"],[121,46,114,52],[121,51,114,57,"_a"],[121,53,114,59],[121,56,114,62,"indices_1"],[121,65,114,71],[121,66,114,72,"return"],[121,72,114,78],[121,73,114,79],[121,75,114,81,"_a"],[121,77,114,83],[121,78,114,84,"call"],[121,82,114,88],[121,83,114,89,"indices_1"],[121,92,114,98],[121,93,114,99],[122,8,115,12],[122,9,115,13],[122,18,116,20],[123,10,116,22],[123,14,116,26,"e_1"],[123,17,116,29],[123,19,116,31],[123,25,116,37,"e_1"],[123,28,116,40],[123,29,116,41,"error"],[123,34,116,46],[124,8,116,48],[125,6,117,8],[126,6,118,8],[126,10,118,12,"startIndex"],[126,20,118,22],[126,23,118,25,"Math"],[126,27,118,29],[126,28,118,30,"min"],[126,31,118,33],[126,32,118,34,"apply"],[126,37,118,39],[126,38,118,40,"Math"],[126,42,118,44],[126,44,118,46,"tslib_1"],[126,51,118,53],[126,52,118,54,"__spreadArray"],[126,65,118,67],[126,66,118,68],[126,68,118,70],[126,70,118,72,"tslib_1"],[126,77,118,79],[126,78,118,80,"__read"],[126,84,118,86],[126,85,118,87,"indices"],[126,92,118,94],[126,93,118,95],[126,95,118,97],[126,100,118,102],[126,101,118,103],[126,102,118,104],[127,6,119,8],[128,6,120,8],[128,10,120,12],[128,11,120,13,"_recomputeLayouts"],[128,28,120,30],[128,29,120,31],[128,33,120,35],[128,34,120,36,"getMinRecomputeIndex"],[128,54,120,56],[128,55,120,57,"startIndex"],[128,65,120,67],[128,66,120,68],[128,68,120,70],[128,72,120,74],[128,73,120,75,"getMaxRecomputeIndex"],[128,93,120,95],[128,94,120,96,"startIndex"],[128,104,120,106],[128,105,120,107],[128,106,120,108],[129,4,121,4],[129,5,121,5],[130,4,122,4],[131,0,123,0],[132,0,124,0],[133,0,125,0],[134,0,126,0],[135,4,127,4,"RVLayoutManager"],[135,19,127,19],[135,20,127,20,"prototype"],[135,29,127,29],[135,30,127,30,"modifyLayout"],[135,42,127,42],[135,45,127,45],[135,55,127,55,"layoutInfo"],[135,65,127,65],[135,67,127,67,"totalItemCount"],[135,81,127,81],[135,83,127,83],[136,6,128,8],[136,10,128,12,"_a"],[136,12,128,14],[137,6,129,8],[137,10,129,12],[137,11,129,13,"maxItemsToProcess"],[137,28,129,30],[137,31,129,33,"Math"],[137,35,129,37],[137,36,129,38,"max"],[137,39,129,41],[137,40,129,42],[137,44,129,46],[137,45,129,47,"maxItemsToProcess"],[137,62,129,64],[137,64,129,66,"layoutInfo"],[137,74,129,76],[137,75,129,77,"length"],[137,81,129,83],[137,84,129,86],[137,86,129,88],[137,87,129,89],[138,6,130,8],[138,10,130,12,"minRecomputeIndex"],[138,27,130,29],[138,30,130,32,"Number"],[138,36,130,38],[138,37,130,39,"MAX_VALUE"],[138,46,130,48],[139,6,131,8],[139,10,131,12],[139,14,131,16],[139,15,131,17,"layouts"],[139,22,131,24],[139,23,131,25,"length"],[139,29,131,31],[139,32,131,34,"totalItemCount"],[139,46,131,48],[139,48,131,50],[140,8,132,12],[140,12,132,16],[140,13,132,17,"layouts"],[140,20,132,24],[140,21,132,25,"length"],[140,27,132,31],[140,30,132,34,"totalItemCount"],[140,44,132,48],[141,8,133,12],[141,12,133,16],[141,13,133,17,"spanTracker"],[141,24,133,28],[141,25,133,29,"length"],[141,31,133,35],[141,34,133,38,"totalItemCount"],[141,48,133,52],[142,8,134,12,"minRecomputeIndex"],[142,25,134,29],[142,28,134,32,"totalItemCount"],[142,42,134,46],[142,45,134,49],[142,46,134,50],[142,47,134,51],[142,48,134,52],[143,6,135,8],[144,6,136,8],[145,6,137,8,"minRecomputeIndex"],[145,23,137,25],[145,26,137,28,"Math"],[145,30,137,32],[145,31,137,33,"min"],[145,34,137,36],[145,35,137,37,"minRecomputeIndex"],[145,52,137,54],[145,54,137,56],[145,58,137,60],[145,59,137,61,"computeEstimatesAndMinMaxChangedLayout"],[145,97,137,99],[145,98,137,100,"layoutInfo"],[145,108,137,110],[145,109,137,111],[145,110,137,112],[146,6,138,8],[146,10,138,12],[146,14,138,16],[146,15,138,17,"layouts"],[146,22,138,24],[146,23,138,25,"length"],[146,29,138,31],[146,32,138,34,"totalItemCount"],[146,46,138,48],[146,50,138,52,"totalItemCount"],[146,64,138,66],[146,67,138,69],[146,68,138,70],[146,70,138,72],[147,8,139,12],[147,12,139,16,"startIndex"],[147,22,139,26],[147,25,139,29],[147,29,139,33],[147,30,139,34,"layouts"],[147,37,139,41],[147,38,139,42,"length"],[147,44,139,48],[148,8,140,12],[148,12,140,16],[148,13,140,17,"layouts"],[148,20,140,24],[148,21,140,25,"length"],[148,27,140,31],[148,30,140,34,"totalItemCount"],[148,44,140,48],[149,8,141,12],[149,12,141,16],[149,13,141,17,"spanTracker"],[149,24,141,28],[149,25,141,29,"length"],[149,31,141,35],[149,34,141,38,"totalItemCount"],[149,48,141,52],[150,8,142,12],[150,13,142,17],[150,17,142,21,"i"],[150,18,142,22],[150,21,142,25,"startIndex"],[150,31,142,35],[150,33,142,37,"i"],[150,34,142,38],[150,37,142,41,"totalItemCount"],[150,51,142,55],[150,53,142,57,"i"],[150,54,142,58],[150,56,142,60],[150,58,142,62],[151,10,143,16],[151,14,143,20],[151,15,143,21,"getLayout"],[151,24,143,30],[151,25,143,31,"i"],[151,26,143,32],[151,27,143,33],[152,10,144,16],[152,14,144,20],[152,15,144,21,"getSpan"],[152,22,144,28],[152,23,144,29,"i"],[152,24,144,30],[152,25,144,31],[153,8,145,12],[154,8,146,12],[154,12,146,16],[154,13,146,17,"recomputeLayouts"],[154,29,146,33],[154,30,146,34,"startIndex"],[154,40,146,44],[154,42,146,46,"totalItemCount"],[154,56,146,60],[154,59,146,63],[154,60,146,64],[154,61,146,65],[155,6,147,8],[156,6,148,8],[157,6,149,8,"minRecomputeIndex"],[157,23,149,25],[157,26,149,28,"Math"],[157,30,149,32],[157,31,149,33,"min"],[157,34,149,36],[157,35,149,37,"minRecomputeIndex"],[157,52,149,54],[157,54,149,56],[157,58,149,60],[157,59,149,61,"lastSkippedLayoutIndex"],[157,81,149,83],[157,83,149,85],[157,87,149,89],[157,88,149,90,"computeMinIndexWithChangedSpan"],[157,118,149,120],[157,119,149,121,"layoutInfo"],[157,129,149,131],[157,130,149,132],[157,132,149,134],[157,133,149,135,"_a"],[157,135,149,137],[157,138,149,140],[157,142,149,144],[157,143,149,145,"processLayoutInfo"],[157,160,149,162],[157,161,149,163,"layoutInfo"],[157,171,149,173],[157,173,149,175,"totalItemCount"],[157,187,149,189],[157,188,149,190],[157,194,149,196],[157,198,149,200],[157,202,149,204,"_a"],[157,204,149,206],[157,209,149,211],[157,214,149,216],[157,215,149,217],[157,218,149,220,"_a"],[157,220,149,222],[157,223,149,225,"minRecomputeIndex"],[157,240,149,242],[157,242,149,244],[157,246,149,248],[157,247,149,249,"computeEstimatesAndMinMaxChangedLayout"],[157,285,149,287],[157,286,149,288,"layoutInfo"],[157,296,149,298],[157,297,149,299],[157,298,149,300],[158,6,150,8],[158,10,150,12,"minRecomputeIndex"],[158,27,150,29],[158,31,150,33],[158,32,150,34],[158,36,150,38,"minRecomputeIndex"],[158,53,150,55],[158,56,150,58,"totalItemCount"],[158,70,150,72],[158,72,150,74],[159,8,151,12],[159,12,151,16,"maxRecomputeIndex"],[159,29,151,33],[159,32,151,36],[159,36,151,40],[159,37,151,41,"getMaxRecomputeIndex"],[159,57,151,61],[159,58,151,62,"minRecomputeIndex"],[159,75,151,79],[159,76,151,80],[160,8,152,12],[160,12,152,16],[160,13,152,17,"_recomputeLayouts"],[160,30,152,34],[160,31,152,35,"minRecomputeIndex"],[160,48,152,52],[160,50,152,54,"maxRecomputeIndex"],[160,67,152,71],[160,68,152,72],[161,6,153,8],[162,6,154,8],[162,10,154,12],[162,11,154,13,"currentMaxIndexWithChangedLayout"],[162,43,154,45],[162,46,154,48],[162,47,154,49],[162,48,154,50],[163,4,155,4],[163,5,155,5],[164,4,156,4],[165,0,157,0],[166,0,158,0],[167,0,159,0],[168,0,160,0],[169,0,161,0],[170,4,162,4,"RVLayoutManager"],[170,19,162,19],[170,20,162,20,"prototype"],[170,29,162,29],[170,30,162,30,"getLayout"],[170,39,162,39],[170,42,162,42],[170,52,162,52,"index"],[170,57,162,57],[170,59,162,59],[171,6,163,8],[171,10,163,12,"index"],[171,15,163,17],[171,19,163,21],[171,23,163,25],[171,24,163,26,"layouts"],[171,31,163,33],[171,32,163,34,"length"],[171,38,163,40],[171,40,163,42],[172,8,164,12],[172,14,164,18],[172,18,164,22,"Error"],[172,23,164,27],[172,24,164,28,"ErrorMessages_1"],[172,39,164,43],[172,40,164,44,"ErrorMessages"],[172,53,164,57],[172,54,164,58,"indexOutOfBounds"],[172,70,164,74],[172,71,164,75],[173,6,165,8],[174,6,166,8],[174,10,166,12,"layout"],[174,16,166,18],[174,19,166,21],[174,23,166,25],[174,24,166,26,"layouts"],[174,31,166,33],[174,32,166,34,"index"],[174,37,166,39],[174,38,166,40],[175,6,167,8],[175,10,167,12],[175,11,167,13,"layout"],[175,17,167,19],[175,19,167,21],[176,8,168,12],[177,8,169,12,"layout"],[177,14,169,18],[177,17,169,21],[178,10,170,16,"x"],[178,11,170,17],[178,13,170,19],[178,14,170,20],[179,10,171,16,"y"],[179,11,171,17],[179,13,171,19],[179,14,171,20],[180,10,172,16,"width"],[180,15,172,21],[180,17,172,23],[180,18,172,24],[181,10,173,16,"height"],[181,16,173,22],[181,18,173,24],[182,8,174,12],[182,9,174,13],[183,8,175,12],[183,12,175,16],[183,13,175,17,"layouts"],[183,20,175,24],[183,21,175,25,"index"],[183,26,175,30],[183,27,175,31],[183,30,175,34,"layout"],[183,36,175,40],[184,6,176,8],[185,6,177,8],[185,10,177,12],[185,11,177,13,"layout"],[185,17,177,19],[185,18,177,20,"isWidthMeasured"],[185,33,177,35],[185,37,177,39],[185,38,177,40,"layout"],[185,44,177,46],[185,45,177,47,"isHeightMeasured"],[185,61,177,63],[185,63,177,65],[186,8,178,12],[186,12,178,16],[186,13,178,17,"estimateLayout"],[186,27,178,31],[186,28,178,32,"index"],[186,33,178,37],[186,34,178,38],[187,6,179,8],[188,6,180,8],[188,13,180,15,"layout"],[188,19,180,21],[189,4,181,4],[189,5,181,5],[190,4,182,4],[191,0,183,0],[192,0,184,0],[193,0,185,0],[194,4,186,4,"RVLayoutManager"],[194,19,186,19],[194,20,186,20,"prototype"],[194,29,186,29],[194,30,186,30,"updateLayoutParams"],[194,48,186,48],[194,51,186,51],[194,61,186,61,"params"],[194,67,186,67],[194,69,186,69],[195,6,187,8],[195,10,187,12,"_a"],[195,12,187,14],[195,14,187,16,"_b"],[195,16,187,18],[195,18,187,20,"_c"],[195,20,187,22],[196,6,188,8],[196,10,188,12],[196,11,188,13,"windowSize"],[196,21,188,23],[196,24,188,26,"params"],[196,30,188,32],[196,31,188,33,"windowSize"],[196,41,188,43],[197,6,189,8],[197,10,189,12],[197,11,189,13,"horizontal"],[197,21,189,23],[197,24,189,26],[197,25,189,27,"_a"],[197,27,189,29],[197,30,189,32,"params"],[197,36,189,38],[197,37,189,39,"horizontal"],[197,47,189,49],[197,53,189,55],[197,57,189,59],[197,61,189,63,"_a"],[197,63,189,65],[197,68,189,70],[197,73,189,75],[197,74,189,76],[197,77,189,79,"_a"],[197,79,189,81],[197,82,189,84],[197,86,189,88],[197,87,189,89,"horizontal"],[197,97,189,99],[198,6,190,8],[198,10,190,12],[198,11,190,13,"maxColumns"],[198,21,190,23],[198,24,190,26],[198,25,190,27,"_b"],[198,27,190,29],[198,30,190,32,"params"],[198,36,190,38],[198,37,190,39,"maxColumns"],[198,47,190,49],[198,53,190,55],[198,57,190,59],[198,61,190,63,"_b"],[198,63,190,65],[198,68,190,70],[198,73,190,75],[198,74,190,76],[198,77,190,79,"_b"],[198,79,190,81],[198,82,190,84],[198,86,190,88],[198,87,190,89,"maxColumns"],[198,97,190,99],[199,6,191,8],[199,10,191,12],[199,11,191,13,"optimizeItemArrangement"],[199,34,191,36],[199,37,192,12],[199,38,192,13,"_c"],[199,40,192,15],[199,43,192,18,"params"],[199,49,192,24],[199,50,192,25,"optimizeItemArrangement"],[199,73,192,48],[199,79,192,54],[199,83,192,58],[199,87,192,62,"_c"],[199,89,192,64],[199,94,192,69],[199,99,192,74],[199,100,192,75],[199,103,192,78,"_c"],[199,105,192,80],[199,108,192,83],[199,112,192,87],[199,113,192,88,"optimizeItemArrangement"],[199,136,192,111],[200,4,193,4],[200,5,193,5],[201,4,194,4,"RVLayoutManager"],[201,19,194,19],[201,20,194,20,"prototype"],[201,29,194,29],[201,30,194,30,"getLayoutCount"],[201,44,194,44],[201,47,194,47],[201,59,194,59],[202,6,195,8],[202,13,195,15],[202,17,195,19],[202,18,195,20,"layouts"],[202,25,195,27],[202,26,195,28,"length"],[202,32,195,34],[203,4,196,4],[203,5,196,5],[204,4,197,4],[205,0,198,0],[206,0,199,0],[207,0,200,0],[208,0,201,0],[209,0,202,0],[210,0,203,0],[211,0,204,0],[212,0,205,0],[213,4,206,4,"RVLayoutManager"],[213,19,206,19],[213,20,206,20,"prototype"],[213,29,206,29],[213,30,206,30,"getSpan"],[213,37,206,37],[213,40,206,40],[213,50,206,50,"index"],[213,55,206,55],[213,57,206,57,"skipTracking"],[213,69,206,69],[213,71,206,71],[214,6,207,8],[214,10,207,12,"_a"],[214,12,207,14],[215,6,208,8],[215,10,208,12,"skipTracking"],[215,22,208,24],[215,27,208,29],[215,32,208,34],[215,33,208,35],[215,35,208,37],[216,8,208,39,"skipTracking"],[216,20,208,51],[216,23,208,54],[216,28,208,59],[217,6,208,61],[218,6,209,8],[218,10,209,12],[218,11,209,13,"spanSizeInfo"],[218,23,209,25],[218,24,209,26,"span"],[218,28,209,30],[218,31,209,33,"undefined"],[218,40,209,42],[219,6,210,8],[219,10,210,12],[219,11,210,13,"overrideItemLayout"],[219,29,210,31],[219,30,210,32,"index"],[219,35,210,37],[219,37,210,39],[219,41,210,43],[219,42,210,44,"spanSizeInfo"],[219,54,210,56],[219,55,210,57],[220,6,211,8],[220,10,211,12,"span"],[220,14,211,16],[220,17,211,19,"Math"],[220,21,211,23],[220,22,211,24,"min"],[220,25,211,27],[220,26,211,28],[220,27,211,29,"_a"],[220,29,211,31],[220,32,211,34],[220,36,211,38],[220,37,211,39,"spanSizeInfo"],[220,49,211,51],[220,50,211,52,"span"],[220,54,211,56],[220,60,211,62],[220,64,211,66],[220,68,211,70,"_a"],[220,70,211,72],[220,75,211,77],[220,80,211,82],[220,81,211,83],[220,84,211,86,"_a"],[220,86,211,88],[220,89,211,91],[220,90,211,92],[220,92,211,94],[220,96,211,98],[220,97,211,99,"maxColumns"],[220,107,211,109],[220,108,211,110],[221,6,212,8],[221,10,212,12],[221,11,212,13,"skipTracking"],[221,23,212,25],[221,25,212,27],[222,8,213,12],[222,12,213,16],[222,13,213,17,"spanTracker"],[222,24,213,28],[222,25,213,29,"index"],[222,30,213,34],[222,31,213,35],[222,34,213,38,"span"],[222,38,213,42],[223,6,214,8],[224,6,215,8],[224,13,215,15,"span"],[224,17,215,19],[225,4,216,4],[225,5,216,5],[226,4,217,4],[227,0,218,0],[228,0,219,0],[229,0,220,0],[230,4,221,4,"RVLayoutManager"],[230,19,221,19],[230,20,221,20,"prototype"],[230,29,221,29],[230,30,221,30,"handleSpanChange"],[230,46,221,46],[230,49,221,49],[230,59,221,59,"index"],[230,64,221,64],[230,66,221,66],[230,67,221,68],[230,68,221,69],[231,4,222,4],[232,0,223,0],[233,0,224,0],[234,0,225,0],[235,0,226,0],[236,4,227,4,"RVLayoutManager"],[236,19,227,19],[236,20,227,20,"prototype"],[236,29,227,29],[236,30,227,30,"getMaxRecomputeIndex"],[236,50,227,50],[236,53,227,53],[236,63,227,63,"startIndex"],[236,73,227,73],[236,75,227,75],[237,6,228,8],[237,13,228,15,"Math"],[237,17,228,19],[237,18,228,20,"min"],[237,21,228,23],[237,22,228,24,"Math"],[237,26,228,28],[237,27,228,29,"max"],[237,30,228,32],[237,31,228,33,"startIndex"],[237,41,228,43],[237,43,228,45],[237,47,228,49],[237,48,228,50,"currentMaxIndexWithChangedLayout"],[237,80,228,82],[237,81,228,83],[237,84,229,12],[237,88,229,16],[237,89,229,17,"maxItemsToProcess"],[237,106,229,34],[237,108,229,36],[237,112,229,40],[237,113,229,41,"layouts"],[237,120,229,48],[237,121,229,49,"length"],[237,127,229,55],[237,130,229,58],[237,131,229,59],[237,132,229,60],[238,4,230,4],[238,5,230,5],[239,4,231,4],[240,0,232,0],[241,0,233,0],[242,0,234,0],[243,0,235,0],[244,4,236,4,"RVLayoutManager"],[244,19,236,19],[244,20,236,20,"prototype"],[244,29,236,29],[244,30,236,30,"getMinRecomputeIndex"],[244,50,236,50],[244,53,236,53],[244,63,236,63,"startIndex"],[244,73,236,73],[244,75,236,75],[245,6,237,8],[245,13,237,15,"startIndex"],[245,23,237,25],[246,4,238,4],[246,5,238,5],[247,4,239,4,"RVLayoutManager"],[247,19,239,19],[247,20,239,20,"prototype"],[247,29,239,29],[247,30,239,30,"_recomputeLayouts"],[247,47,239,47],[247,50,239,50],[247,60,239,60,"startIndex"],[247,70,239,70],[247,72,239,72,"endIndex"],[247,80,239,80],[247,82,239,82],[248,6,240,8],[248,10,240,12],[248,11,240,13,"recomputeLayouts"],[248,27,240,29],[248,28,240,30,"startIndex"],[248,38,240,40],[248,40,240,42,"endIndex"],[248,48,240,50],[248,49,240,51],[249,6,241,8],[249,10,241,12],[249,14,241,16],[249,15,241,17,"lastSkippedLayoutIndex"],[249,37,241,39],[249,41,241,43,"startIndex"],[249,51,241,53],[249,55,242,12],[249,59,242,16],[249,60,242,17,"lastSkippedLayoutIndex"],[249,82,242,39],[249,86,242,43,"endIndex"],[249,94,242,51],[249,96,242,53],[250,8,243,12],[250,12,243,16],[250,13,243,17,"lastSkippedLayoutIndex"],[250,35,243,39],[250,38,243,42,"Number"],[250,44,243,48],[250,45,243,49,"MAX_VALUE"],[250,54,243,58],[251,6,244,8],[252,6,245,8],[252,10,245,12,"endIndex"],[252,18,245,20],[252,21,245,23],[252,22,245,24],[252,25,245,27],[252,29,245,31],[252,30,245,32,"layouts"],[252,37,245,39],[252,38,245,40,"length"],[252,44,245,46],[252,46,245,48],[253,8,246,12],[253,12,246,16],[253,13,246,17,"lastSkippedLayoutIndex"],[253,35,246,39],[253,38,246,42,"Math"],[253,42,246,46],[253,43,246,47,"min"],[253,46,246,50],[253,47,246,51,"endIndex"],[253,55,246,59],[253,58,246,62],[253,59,246,63],[253,61,246,65],[253,65,246,69],[253,66,246,70,"lastSkippedLayoutIndex"],[253,88,246,92],[253,89,246,93],[254,8,247,12],[254,12,247,16,"lastIndex"],[254,21,247,25],[254,24,247,28],[254,28,247,32],[254,29,247,33,"layouts"],[254,36,247,40],[254,37,247,41,"length"],[254,43,247,47],[254,46,247,50],[254,47,247,51],[255,8,248,12],[256,8,249,12],[257,8,250,12],[257,12,250,16],[257,16,250,20],[257,17,250,21,"layouts"],[257,24,250,28],[257,25,250,29,"lastIndex"],[257,34,250,38],[257,35,250,39],[257,36,250,40,"y"],[257,37,250,41],[257,40,250,44],[257,44,250,48],[257,45,250,49,"layouts"],[257,52,250,56],[257,53,250,57,"endIndex"],[257,61,250,65],[257,62,250,66],[257,63,250,67,"y"],[257,64,250,68],[257,66,250,70],[258,10,251,16],[258,14,251,20],[258,15,251,21,"recomputeLayouts"],[258,31,251,37],[258,32,251,38],[258,36,251,42],[258,37,251,43,"lastSkippedLayoutIndex"],[258,59,251,65],[258,61,251,67,"lastIndex"],[258,70,251,76],[258,71,251,77],[259,10,252,16],[259,14,252,20],[259,15,252,21,"lastSkippedLayoutIndex"],[259,37,252,43],[259,40,252,46,"Number"],[259,46,252,52],[259,47,252,53,"MAX_VALUE"],[259,56,252,62],[260,8,253,12],[261,6,254,8],[262,4,255,4],[262,5,255,5],[263,4,256,4],[264,0,257,0],[265,0,258,0],[266,0,259,0],[267,0,260,0],[268,4,261,4,"RVLayoutManager"],[268,19,261,19],[268,20,261,20,"prototype"],[268,29,261,29],[268,30,261,30,"computeEstimatesAndMinMaxChangedLayout"],[268,68,261,68],[268,71,261,71],[268,81,261,81,"layoutInfo"],[268,91,261,91],[268,93,261,93],[269,6,262,8],[269,10,262,12,"e_2"],[269,13,262,15],[269,15,262,17,"_a"],[269,17,262,19],[270,6,263,8],[270,10,263,12,"minRecomputeIndex"],[270,27,263,29],[270,30,263,32,"Number"],[270,36,263,38],[270,37,263,39,"MAX_VALUE"],[270,46,263,48],[271,6,264,8],[271,10,264,12],[272,8,265,12],[272,13,265,17],[272,17,265,21,"layoutInfo_1"],[272,29,265,33],[272,32,265,36,"tslib_1"],[272,39,265,43],[272,40,265,44,"__values"],[272,48,265,52],[272,49,265,53,"layoutInfo"],[272,59,265,63],[272,60,265,64],[272,62,265,66,"layoutInfo_1_1"],[272,76,265,80],[272,79,265,83,"layoutInfo_1"],[272,91,265,95],[272,92,265,96,"next"],[272,96,265,100],[272,97,265,101],[272,98,265,102],[272,100,265,104],[272,101,265,105,"layoutInfo_1_1"],[272,115,265,119],[272,116,265,120,"done"],[272,120,265,124],[272,122,265,126,"layoutInfo_1_1"],[272,136,265,140],[272,139,265,143,"layoutInfo_1"],[272,151,265,155],[272,152,265,156,"next"],[272,156,265,160],[272,157,265,161],[272,158,265,162],[272,160,265,164],[273,10,266,16],[273,14,266,20,"info"],[273,18,266,24],[273,21,266,27,"layoutInfo_1_1"],[273,35,266,41],[273,36,266,42,"value"],[273,41,266,47],[274,10,267,16],[274,14,267,20,"index"],[274,19,267,25],[274,22,267,28,"info"],[274,26,267,32],[274,27,267,33,"index"],[274,32,267,38],[275,12,267,40,"dimensions"],[275,22,267,50],[275,25,267,53,"info"],[275,29,267,57],[275,30,267,58,"dimensions"],[275,40,267,68],[276,10,268,16],[276,14,268,20,"storedLayout"],[276,26,268,32],[276,29,268,35],[276,33,268,39],[276,34,268,40,"layouts"],[276,41,268,47],[276,42,268,48,"index"],[276,47,268,53],[276,48,268,54],[277,10,269,16],[277,14,269,20,"index"],[277,19,269,25],[277,23,269,29],[277,27,269,33],[277,28,269,34,"lastSkippedLayoutIndex"],[277,50,269,56],[277,54,270,20],[277,55,270,21,"storedLayout"],[277,67,270,33],[277,71,271,20],[277,72,271,21,"storedLayout"],[277,84,271,33],[277,85,271,34,"isHeightMeasured"],[277,101,271,50],[277,105,272,20],[277,106,272,21,"storedLayout"],[277,118,272,33],[277,119,272,34,"isWidthMeasured"],[277,134,272,49],[277,138,273,20],[277,139,273,21],[277,140,273,22],[277,142,273,24,"measureLayout_1"],[277,157,273,39],[277,158,273,40,"areDimensionsNotEqual"],[277,179,273,61],[277,181,273,63,"storedLayout"],[277,193,273,75],[277,194,273,76,"height"],[277,200,273,82],[277,202,273,84,"dimensions"],[277,212,273,94],[277,213,273,95,"height"],[277,219,273,101],[277,220,273,102],[277,224,274,20],[277,225,274,21],[277,226,274,22],[277,228,274,24,"measureLayout_1"],[277,243,274,39],[277,244,274,40,"areDimensionsNotEqual"],[277,265,274,61],[277,267,274,63,"storedLayout"],[277,279,274,75],[277,280,274,76,"width"],[277,285,274,81],[277,287,274,83,"dimensions"],[277,297,274,93],[277,298,274,94,"width"],[277,303,274,99],[277,304,274,100],[277,306,274,102],[278,12,275,20,"minRecomputeIndex"],[278,29,275,37],[278,32,275,40,"Math"],[278,36,275,44],[278,37,275,45,"min"],[278,40,275,48],[278,41,275,49,"minRecomputeIndex"],[278,58,275,66],[278,60,275,68,"index"],[278,65,275,73],[278,66,275,74],[279,12,276,20],[279,16,276,24],[279,17,276,25,"currentMaxIndexWithChangedLayout"],[279,49,276,57],[279,52,276,60,"Math"],[279,56,276,64],[279,57,276,65,"max"],[279,60,276,68],[279,61,276,69],[279,65,276,73],[279,66,276,74,"currentMaxIndexWithChangedLayout"],[279,98,276,106],[279,100,276,108,"index"],[279,105,276,113],[279,106,276,114],[280,10,277,16],[281,10,278,16],[281,14,278,20],[281,15,278,21,"heightAverageWindow"],[281,34,278,40],[281,35,278,41,"addValue"],[281,43,278,49],[281,44,278,50,"dimensions"],[281,54,278,60],[281,55,278,61,"height"],[281,61,278,67],[281,63,278,69],[281,67,278,73],[281,68,278,74,"getItemType"],[281,79,278,85],[281,80,278,86,"index"],[281,85,278,91],[281,86,278,92],[281,87,278,93],[282,10,279,16],[282,14,279,20],[282,15,279,21,"widthAverageWindow"],[282,33,279,39],[282,34,279,40,"addValue"],[282,42,279,48],[282,43,279,49,"dimensions"],[282,53,279,59],[282,54,279,60,"width"],[282,59,279,65],[282,61,279,67],[282,65,279,71],[282,66,279,72,"getItemType"],[282,77,279,83],[282,78,279,84,"index"],[282,83,279,89],[282,84,279,90],[282,85,279,91],[283,8,280,12],[284,6,281,8],[284,7,281,9],[284,8,282,8],[284,15,282,15,"e_2_1"],[284,20,282,20],[284,22,282,22],[285,8,282,24,"e_2"],[285,11,282,27],[285,14,282,30],[286,10,282,32,"error"],[286,15,282,37],[286,17,282,39,"e_2_1"],[287,8,282,45],[287,9,282,46],[288,6,282,48],[288,7,282,49],[288,16,283,16],[289,8,284,12],[289,12,284,16],[290,10,285,16],[290,14,285,20,"layoutInfo_1_1"],[290,28,285,34],[290,32,285,38],[290,33,285,39,"layoutInfo_1_1"],[290,47,285,53],[290,48,285,54,"done"],[290,52,285,58],[290,57,285,63,"_a"],[290,59,285,65],[290,62,285,68,"layoutInfo_1"],[290,74,285,80],[290,75,285,81,"return"],[290,81,285,87],[290,82,285,88],[290,84,285,90,"_a"],[290,86,285,92],[290,87,285,93,"call"],[290,91,285,97],[290,92,285,98,"layoutInfo_1"],[290,104,285,110],[290,105,285,111],[291,8,286,12],[291,9,286,13],[291,18,287,20],[292,10,287,22],[292,14,287,26,"e_2"],[292,17,287,29],[292,19,287,31],[292,25,287,37,"e_2"],[292,28,287,40],[292,29,287,41,"error"],[292,34,287,46],[293,8,287,48],[294,6,288,8],[295,6,289,8],[295,13,289,15,"minRecomputeIndex"],[295,30,289,32],[296,4,290,4],[296,5,290,5],[297,4,291,4,"RVLayoutManager"],[297,19,291,19],[297,20,291,20,"prototype"],[297,29,291,29],[297,30,291,30,"computeMinIndexWithChangedSpan"],[297,60,291,60],[297,63,291,63],[297,73,291,73,"layoutInfo"],[297,83,291,83],[297,85,291,85],[298,6,292,8],[298,10,292,12,"e_3"],[298,13,292,15],[298,15,292,17,"_a"],[298,17,292,19],[299,6,293,8],[299,10,293,12,"minIndexWithChangedSpan"],[299,33,293,35],[299,36,293,38,"Number"],[299,42,293,44],[299,43,293,45,"MAX_VALUE"],[299,52,293,54],[300,6,294,8],[300,10,294,12],[301,8,295,12],[301,13,295,17],[301,17,295,21,"layoutInfo_2"],[301,29,295,33],[301,32,295,36,"tslib_1"],[301,39,295,43],[301,40,295,44,"__values"],[301,48,295,52],[301,49,295,53,"layoutInfo"],[301,59,295,63],[301,60,295,64],[301,62,295,66,"layoutInfo_2_1"],[301,76,295,80],[301,79,295,83,"layoutInfo_2"],[301,91,295,95],[301,92,295,96,"next"],[301,96,295,100],[301,97,295,101],[301,98,295,102],[301,100,295,104],[301,101,295,105,"layoutInfo_2_1"],[301,115,295,119],[301,116,295,120,"done"],[301,120,295,124],[301,122,295,126,"layoutInfo_2_1"],[301,136,295,140],[301,139,295,143,"layoutInfo_2"],[301,151,295,155],[301,152,295,156,"next"],[301,156,295,160],[301,157,295,161],[301,158,295,162],[301,160,295,164],[302,10,296,16],[302,14,296,20,"info"],[302,18,296,24],[302,21,296,27,"layoutInfo_2_1"],[302,35,296,41],[302,36,296,42,"value"],[302,41,296,47],[303,10,297,16],[303,14,297,20,"index"],[303,19,297,25],[303,22,297,28,"info"],[303,26,297,32],[303,27,297,33,"index"],[303,32,297,38],[304,10,298,16],[304,14,298,20,"span"],[304,18,298,24],[304,21,298,27],[304,25,298,31],[304,26,298,32,"getSpan"],[304,33,298,39],[304,34,298,40,"index"],[304,39,298,45],[304,41,298,47],[304,45,298,51],[304,46,298,52],[305,10,299,16],[305,14,299,20,"storedSpan"],[305,24,299,30],[305,27,299,33],[305,31,299,37],[305,32,299,38,"spanTracker"],[305,43,299,49],[305,44,299,50,"index"],[305,49,299,55],[305,50,299,56],[306,10,300,16],[306,14,300,20,"span"],[306,18,300,24],[306,23,300,29,"storedSpan"],[306,33,300,39],[306,35,300,41],[307,12,301,20],[307,16,301,24],[307,17,301,25,"spanTracker"],[307,28,301,36],[307,29,301,37,"index"],[307,34,301,42],[307,35,301,43],[307,38,301,46,"span"],[307,42,301,50],[308,12,302,20],[308,16,302,24],[308,17,302,25,"handleSpanChange"],[308,33,302,41],[308,34,302,42,"index"],[308,39,302,47],[308,40,302,48],[309,12,303,20,"minIndexWithChangedSpan"],[309,35,303,43],[309,38,303,46,"Math"],[309,42,303,50],[309,43,303,51,"min"],[309,46,303,54],[309,47,303,55,"minIndexWithChangedSpan"],[309,70,303,78],[309,72,303,80,"index"],[309,77,303,85],[309,78,303,86],[310,10,304,16],[311,8,305,12],[312,6,306,8],[312,7,306,9],[312,8,307,8],[312,15,307,15,"e_3_1"],[312,20,307,20],[312,22,307,22],[313,8,307,24,"e_3"],[313,11,307,27],[313,14,307,30],[314,10,307,32,"error"],[314,15,307,37],[314,17,307,39,"e_3_1"],[315,8,307,45],[315,9,307,46],[316,6,307,48],[316,7,307,49],[316,16,308,16],[317,8,309,12],[317,12,309,16],[318,10,310,16],[318,14,310,20,"layoutInfo_2_1"],[318,28,310,34],[318,32,310,38],[318,33,310,39,"layoutInfo_2_1"],[318,47,310,53],[318,48,310,54,"done"],[318,52,310,58],[318,57,310,63,"_a"],[318,59,310,65],[318,62,310,68,"layoutInfo_2"],[318,74,310,80],[318,75,310,81,"return"],[318,81,310,87],[318,82,310,88],[318,84,310,90,"_a"],[318,86,310,92],[318,87,310,93,"call"],[318,91,310,97],[318,92,310,98,"layoutInfo_2"],[318,104,310,110],[318,105,310,111],[319,8,311,12],[319,9,311,13],[319,18,312,20],[320,10,312,22],[320,14,312,26,"e_3"],[320,17,312,29],[320,19,312,31],[320,25,312,37,"e_3"],[320,28,312,40],[320,29,312,41,"error"],[320,34,312,46],[321,8,312,48],[322,6,313,8],[323,6,314,8],[323,13,314,15,"minIndexWithChangedSpan"],[323,36,314,38],[324,4,315,4],[324,5,315,5],[325,4,316,4],[325,11,316,11,"RVLayoutManager"],[325,26,316,26],[326,2,317,0],[326,3,317,1],[326,4,317,2],[326,5,317,4],[327,2,318,0,"exports"],[327,9,318,7],[327,10,318,8,"RVLayoutManager"],[327,25,318,23],[327,28,318,26,"RVLayoutManager"],[327,43,318,41],[328,0,318,42],[328,3]],"functionMap":{"names":["<global>","<anonymous>","RVLayoutManager","RVLayoutManager.prototype.getEstimatedWidth","RVLayoutManager.prototype.getEstimatedHeight","RVLayoutManager.prototype.isHorizontal","RVLayoutManager.prototype.getWindowsSize","RVLayoutManager.prototype.getVisibleLayouts","RVLayoutManager.prototype.deleteLayout","indices.sort$argument_0","RVLayoutManager.prototype.modifyLayout","RVLayoutManager.prototype.getLayout","RVLayoutManager.prototype.updateLayoutParams","RVLayoutManager.prototype.getLayoutCount","RVLayoutManager.prototype.getSpan","RVLayoutManager.prototype.handleSpanChange","RVLayoutManager.prototype.getMaxRecomputeIndex","RVLayoutManager.prototype.getMinRecomputeIndex","RVLayoutManager.prototype._recomputeLayouts","RVLayoutManager.prototype.computeEstimatesAndMinMaxChangedLayout","RVLayoutManager.prototype.computeMinIndexWithChangedSpan"],"mappings":"AAA;qCCe;ICC;KD8B;kDEM;KFE;mDGM;KHE;6CIK;KJE;+CKK;KLE;kDMQ;KNU;6COK;qBCG,6CD;KPkB;6CSM;KT4B;0CUO;KVmB;mDWK;KXO;+CYC;KZE;wCaU;KbU;iDcK,oBd;qDeM;KfG;qDgBM;KhBE;kDiBC;KjBgB;uEkBM;KlB6B;+DmBC;KnBwB;CDE"},"hasCjsExports":true},"type":"js/module"}]}