{"dependencies":[{"name":"./matchers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":19,"index":184},"end":{"line":5,"column":40,"index":205}}],"key":"89ylKT57ef0l7ma8+p1HhPaMj94=","exportNames":["*"],"imports":1}},{"name":"./sortRoutes","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":21,"index":228},"end":{"line":6,"column":44,"index":251}}],"key":"AGgdHPlpLdteTt8GoJKs7TyzmuQ=","exportNames":["*"],"imports":1}},{"name":"./utils/url","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":14,"index":267},"end":{"line":7,"column":36,"index":289}}],"key":"KwepoOiDJIvcZxDqcbtt8RBrwgA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getServerManifest = getServerManifest;\n  exports.parseParameter = parseParameter;\n  const matchers_1 = require(_dependencyMap[0], \"./matchers\");\n  const sortRoutes_1 = require(_dependencyMap[1], \"./sortRoutes\");\n  const url_1 = require(_dependencyMap[2], \"./utils/url\");\n  function isNotFoundRoute(route) {\n    return route.dynamic && route.dynamic[route.dynamic.length - 1].notFound;\n  }\n  function uniqueBy(arr, key) {\n    const seen = new Set();\n    return arr.filter(item => {\n      const id = key(item);\n      if (seen.has(id)) {\n        return false;\n      }\n      seen.add(id);\n      return true;\n    });\n  }\n  // Given a nested route tree, return a flattened array of all routes that can be matched.\n  function getServerManifest(route) {\n    function getFlatNodes(route, parentRoute = '') {\n      // Use a recreated route instead of contextKey because we duplicate nodes to support array syntax.\n      const absoluteRoute = [parentRoute, route.route].filter(Boolean).join('/');\n      if (route.children.length) {\n        return route.children.map(child => getFlatNodes(child, absoluteRoute)).flat();\n      }\n      // API Routes are handled differently to HTML routes because they have no nested behavior.\n      // An HTML route can be different based on parent segments due to layout routes, therefore multiple\n      // copies should be rendered. However, an API route is always the same regardless of parent segments.\n      let key;\n      if (route.type.includes('api')) {\n        key = (0, matchers_1.getContextKey)(route.contextKey).replace(/\\/index$/, '') ?? '/';\n      } else {\n        key = (0, matchers_1.getContextKey)(absoluteRoute).replace(/\\/index$/, '') ?? '/';\n      }\n      return [[key, '/' + absoluteRoute, route]];\n    }\n    // Remove duplicates from the runtime manifest which expands array syntax.\n    const flat = getFlatNodes(route).sort(([,, a], [,, b]) => (0, sortRoutes_1.sortRoutes)(b, a)).reverse();\n    const apiRoutes = uniqueBy(flat.filter(([,, route]) => route.type === 'api'), ([path]) => path);\n    const otherRoutes = uniqueBy(flat.filter(([,, route]) => route.type === 'route' || route.type === 'rewrite' && (route.methods === undefined || route.methods.includes('GET'))), ([path]) => path);\n    const redirects = uniqueBy(flat.filter(([,, route]) => route.type === 'redirect'), ([path]) => path).map(redirect => {\n      // TODO(@hassankhan): ENG-16577\n      // For external redirects, use `destinationContextKey` as the destination URL\n      if ((0, url_1.shouldLinkExternally)(redirect[2].destinationContextKey)) {\n        redirect[1] = redirect[2].destinationContextKey;\n      } else {\n        redirect[1] = flat.find(([,, route]) => route.contextKey === redirect[2].destinationContextKey)?.[0] ?? '/';\n      }\n      return redirect;\n    }).reverse();\n    const rewrites = uniqueBy(flat.filter(([,, route]) => route.type === 'rewrite'), ([path]) => path).map(rewrite => {\n      rewrite[1] = flat.find(([,, route]) => route.contextKey === rewrite[2].destinationContextKey)?.[0] ?? '/';\n      return rewrite;\n    }).reverse();\n    const standardRoutes = otherRoutes.filter(([,, route]) => !isNotFoundRoute(route));\n    const notFoundRoutes = otherRoutes.filter(([,, route]) => isNotFoundRoute(route));\n    const manifest = {\n      apiRoutes: getMatchableManifestForPaths(apiRoutes),\n      htmlRoutes: getMatchableManifestForPaths(standardRoutes),\n      notFoundRoutes: getMatchableManifestForPaths(notFoundRoutes),\n      redirects: getMatchableManifestForPaths(redirects),\n      rewrites: getMatchableManifestForPaths(rewrites)\n    };\n    if (route.middleware) {\n      manifest.middleware = {\n        file: route.middleware.contextKey\n      };\n    }\n    return manifest;\n  }\n  function getMatchableManifestForPaths(paths) {\n    return paths.map(([normalizedRoutePath, absoluteRoute, node]) => {\n      const matcher = getNamedRouteRegex(normalizedRoutePath, absoluteRoute, node.contextKey);\n      if (node.generated) {\n        matcher.generated = true;\n      }\n      if (node.permanent) {\n        matcher.permanent = true;\n      }\n      if (node.methods) {\n        matcher.methods = node.methods;\n      }\n      return matcher;\n    });\n  }\n  function getNamedRouteRegex(normalizedRoute, page, file) {\n    const result = getNamedParametrizedRoute(normalizedRoute);\n    return {\n      file,\n      page,\n      namedRegex: `^${result.namedParameterizedRoute}(?:/)?$`,\n      routeKeys: result.routeKeys\n    };\n  }\n  /**\n   * Builds a function to generate a minimal routeKey using only a-z and minimal\n   * number of characters.\n   */\n  function buildGetSafeRouteKey() {\n    let currentCharCode = 96; // Starting one before 'a' to make the increment logic simpler\n    let currentLength = 1;\n    return () => {\n      let result = '';\n      let incrementNext = true;\n      // Iterate from right to left to build the key\n      for (let i = 0; i < currentLength; i++) {\n        if (incrementNext) {\n          currentCharCode++;\n          if (currentCharCode > 122) {\n            currentCharCode = 97; // Reset to 'a'\n            incrementNext = true; // Continue to increment the next character\n          } else {\n            incrementNext = false;\n          }\n        }\n        result = String.fromCharCode(currentCharCode) + result;\n      }\n      // If all characters are 'z', increase the length of the key\n      if (incrementNext) {\n        currentLength++;\n        currentCharCode = 96; // This will make the next key start with 'a'\n      }\n      return result;\n    };\n  }\n  function removeTrailingSlash(route) {\n    return route.replace(/\\/$/, '') || '/';\n  }\n  function getNamedParametrizedRoute(route) {\n    const segments = removeTrailingSlash(route).slice(1).split('/');\n    const getSafeRouteKey = buildGetSafeRouteKey();\n    const routeKeys = {};\n    return {\n      namedParameterizedRoute: segments.map((segment, index) => {\n        if (segment === '+not-found' && index === segments.length - 1) {\n          segment = '[...not-found]';\n        }\n        if (/^\\[.*\\]$/.test(segment)) {\n          const {\n            name,\n            optional,\n            repeat\n          } = parseParameter(segment);\n          // replace any non-word characters since they can break\n          // the named regex\n          let cleanedKey = name.replace(/\\W/g, '');\n          let invalidKey = false;\n          // check if the key is still invalid and fallback to using a known\n          // safe key\n          if (cleanedKey.length === 0 || cleanedKey.length > 30) {\n            invalidKey = true;\n          }\n          if (!isNaN(parseInt(cleanedKey.slice(0, 1), 10))) {\n            invalidKey = true;\n          }\n          // Prevent duplicates after sanitizing the key\n          if (cleanedKey in routeKeys) {\n            invalidKey = true;\n          }\n          if (invalidKey) {\n            cleanedKey = getSafeRouteKey();\n          }\n          routeKeys[cleanedKey] = name;\n          return repeat ? optional ? `(?:/(?<${cleanedKey}>.+?))?` : `/(?<${cleanedKey}>.+?)` : `/(?<${cleanedKey}>[^/]+?)`;\n        } else if (/^\\(.*\\)$/.test(segment)) {\n          const groupName = (0, matchers_1.matchGroupName)(segment).split(',').map(group => group.trim()).filter(Boolean);\n          if (groupName.length > 1) {\n            const optionalSegment = `\\\\((?:${groupName.map(escapeStringRegexp).join('|')})\\\\)`;\n            // Make section optional\n            return `(?:/${optionalSegment})?`;\n          } else {\n            // Use simpler regex for single groups\n            return `(?:/${escapeStringRegexp(segment)})?`;\n          }\n        } else {\n          return `/${escapeStringRegexp(segment)}`;\n        }\n      }).join(''),\n      routeKeys\n    };\n  }\n  // regexp is based on https://github.com/sindresorhus/escape-string-regexp\n  const reHasRegExp = /[|\\\\{}()[\\]^$+*?.-]/;\n  const reReplaceRegExp = /[|\\\\{}()[\\]^$+*?.-]/g;\n  function escapeStringRegexp(str) {\n    // see also: https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/escapeRegExp.js#L23\n    if (reHasRegExp.test(str)) {\n      return str.replace(reReplaceRegExp, '\\\\$&');\n    }\n    return str;\n  }\n  function parseParameter(param) {\n    let repeat = false;\n    let optional = false;\n    let name = param;\n    if (/^\\[.*\\]$/.test(name)) {\n      optional = true;\n      name = name.slice(1, -1);\n    }\n    if (/^\\.\\.\\./.test(name)) {\n      repeat = true;\n      name = name.slice(3);\n    }\n    return {\n      name,\n      repeat,\n      optional\n    };\n  }\n});","lineCount":218,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"getServerManifest"],[7,27,3,25],[7,30,3,28,"getServerManifest"],[7,47,3,45],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"parseParameter"],[8,24,4,22],[8,27,4,25,"parseParameter"],[8,41,4,39],[9,2,5,0],[9,8,5,6,"matchers_1"],[9,18,5,16],[9,21,5,19,"require"],[9,28,5,26],[9,29,5,26,"_dependencyMap"],[9,43,5,26],[9,60,5,39],[9,61,5,40],[10,2,6,0],[10,8,6,6,"sortRoutes_1"],[10,20,6,18],[10,23,6,21,"require"],[10,30,6,28],[10,31,6,28,"_dependencyMap"],[10,45,6,28],[10,64,6,43],[10,65,6,44],[11,2,7,0],[11,8,7,6,"url_1"],[11,13,7,11],[11,16,7,14,"require"],[11,23,7,21],[11,24,7,21,"_dependencyMap"],[11,38,7,21],[11,56,7,35],[11,57,7,36],[12,2,8,0],[12,11,8,9,"isNotFoundRoute"],[12,26,8,24,"isNotFoundRoute"],[12,27,8,25,"route"],[12,32,8,30],[12,34,8,32],[13,4,9,4],[13,11,9,11,"route"],[13,16,9,16],[13,17,9,17,"dynamic"],[13,24,9,24],[13,28,9,28,"route"],[13,33,9,33],[13,34,9,34,"dynamic"],[13,41,9,41],[13,42,9,42,"route"],[13,47,9,47],[13,48,9,48,"dynamic"],[13,55,9,55],[13,56,9,56,"length"],[13,62,9,62],[13,65,9,65],[13,66,9,66],[13,67,9,67],[13,68,9,68,"notFound"],[13,76,9,76],[14,2,10,0],[15,2,11,0],[15,11,11,9,"uniqueBy"],[15,19,11,17,"uniqueBy"],[15,20,11,18,"arr"],[15,23,11,21],[15,25,11,23,"key"],[15,28,11,26],[15,30,11,28],[16,4,12,4],[16,10,12,10,"seen"],[16,14,12,14],[16,17,12,17],[16,21,12,21,"Set"],[16,24,12,24],[16,25,12,25],[16,26,12,26],[17,4,13,4],[17,11,13,11,"arr"],[17,14,13,14],[17,15,13,15,"filter"],[17,21,13,21],[17,22,13,23,"item"],[17,26,13,27],[17,30,13,32],[18,6,14,8],[18,12,14,14,"id"],[18,14,14,16],[18,17,14,19,"key"],[18,20,14,22],[18,21,14,23,"item"],[18,25,14,27],[18,26,14,28],[19,6,15,8],[19,10,15,12,"seen"],[19,14,15,16],[19,15,15,17,"has"],[19,18,15,20],[19,19,15,21,"id"],[19,21,15,23],[19,22,15,24],[19,24,15,26],[20,8,16,12],[20,15,16,19],[20,20,16,24],[21,6,17,8],[22,6,18,8,"seen"],[22,10,18,12],[22,11,18,13,"add"],[22,14,18,16],[22,15,18,17,"id"],[22,17,18,19],[22,18,18,20],[23,6,19,8],[23,13,19,15],[23,17,19,19],[24,4,20,4],[24,5,20,5],[24,6,20,6],[25,2,21,0],[26,2,22,0],[27,2,23,0],[27,11,23,9,"getServerManifest"],[27,28,23,26,"getServerManifest"],[27,29,23,27,"route"],[27,34,23,32],[27,36,23,34],[28,4,24,4],[28,13,24,13,"getFlatNodes"],[28,25,24,25,"getFlatNodes"],[28,26,24,26,"route"],[28,31,24,31],[28,33,24,33,"parentRoute"],[28,44,24,44],[28,47,24,47],[28,49,24,49],[28,51,24,51],[29,6,25,8],[30,6,26,8],[30,12,26,14,"absoluteRoute"],[30,25,26,27],[30,28,26,30],[30,29,26,31,"parentRoute"],[30,40,26,42],[30,42,26,44,"route"],[30,47,26,49],[30,48,26,50,"route"],[30,53,26,55],[30,54,26,56],[30,55,26,57,"filter"],[30,61,26,63],[30,62,26,64,"Boolean"],[30,69,26,71],[30,70,26,72],[30,71,26,73,"join"],[30,75,26,77],[30,76,26,78],[30,79,26,81],[30,80,26,82],[31,6,27,8],[31,10,27,12,"route"],[31,15,27,17],[31,16,27,18,"children"],[31,24,27,26],[31,25,27,27,"length"],[31,31,27,33],[31,33,27,35],[32,8,28,12],[32,15,28,19,"route"],[32,20,28,24],[32,21,28,25,"children"],[32,29,28,33],[32,30,28,34,"map"],[32,33,28,37],[32,34,28,39,"child"],[32,39,28,44],[32,43,28,49,"getFlatNodes"],[32,55,28,61],[32,56,28,62,"child"],[32,61,28,67],[32,63,28,69,"absoluteRoute"],[32,76,28,82],[32,77,28,83],[32,78,28,84],[32,79,28,85,"flat"],[32,83,28,89],[32,84,28,90],[32,85,28,91],[33,6,29,8],[34,6,30,8],[35,6,31,8],[36,6,32,8],[37,6,33,8],[37,10,33,12,"key"],[37,13,33,15],[38,6,34,8],[38,10,34,12,"route"],[38,15,34,17],[38,16,34,18,"type"],[38,20,34,22],[38,21,34,23,"includes"],[38,29,34,31],[38,30,34,32],[38,35,34,37],[38,36,34,38],[38,38,34,40],[39,8,35,12,"key"],[39,11,35,15],[39,14,35,18],[39,15,35,19],[39,16,35,20],[39,18,35,22,"matchers_1"],[39,28,35,32],[39,29,35,33,"getContextKey"],[39,42,35,46],[39,44,35,48,"route"],[39,49,35,53],[39,50,35,54,"contextKey"],[39,60,35,64],[39,61,35,65],[39,62,35,66,"replace"],[39,69,35,73],[39,70,35,74],[39,80,35,84],[39,82,35,86],[39,84,35,88],[39,85,35,89],[39,89,35,93],[39,92,35,96],[40,6,36,8],[40,7,36,9],[40,13,37,13],[41,8,38,12,"key"],[41,11,38,15],[41,14,38,18],[41,15,38,19],[41,16,38,20],[41,18,38,22,"matchers_1"],[41,28,38,32],[41,29,38,33,"getContextKey"],[41,42,38,46],[41,44,38,48,"absoluteRoute"],[41,57,38,61],[41,58,38,62],[41,59,38,63,"replace"],[41,66,38,70],[41,67,38,71],[41,77,38,81],[41,79,38,83],[41,81,38,85],[41,82,38,86],[41,86,38,90],[41,89,38,93],[42,6,39,8],[43,6,40,8],[43,13,40,15],[43,14,40,16],[43,15,40,17,"key"],[43,18,40,20],[43,20,40,22],[43,23,40,25],[43,26,40,28,"absoluteRoute"],[43,39,40,41],[43,41,40,43,"route"],[43,46,40,48],[43,47,40,49],[43,48,40,50],[44,4,41,4],[45,4,42,4],[46,4,43,4],[46,10,43,10,"flat"],[46,14,43,14],[46,17,43,17,"getFlatNodes"],[46,29,43,29],[46,30,43,30,"route"],[46,35,43,35],[46,36,43,36],[46,37,44,9,"sort"],[46,41,44,13],[46,42,44,14],[46,43,44,15],[46,47,44,20,"a"],[46,48,44,21],[46,49,44,22],[46,51,44,24],[46,55,44,29,"b"],[46,56,44,30],[46,57,44,31],[46,62,44,36],[46,63,44,37],[46,64,44,38],[46,66,44,40,"sortRoutes_1"],[46,78,44,52],[46,79,44,53,"sortRoutes"],[46,89,44,63],[46,91,44,65,"b"],[46,92,44,66],[46,94,44,68,"a"],[46,95,44,69],[46,96,44,70],[46,97,44,71],[46,98,45,9,"reverse"],[46,105,45,16],[46,106,45,17],[46,107,45,18],[47,4,46,4],[47,10,46,10,"apiRoutes"],[47,19,46,19],[47,22,46,22,"uniqueBy"],[47,30,46,30],[47,31,46,31,"flat"],[47,35,46,35],[47,36,46,36,"filter"],[47,42,46,42],[47,43,46,43],[47,44,46,44],[47,48,46,49,"route"],[47,53,46,54],[47,54,46,55],[47,59,46,60,"route"],[47,64,46,65],[47,65,46,66,"type"],[47,69,46,70],[47,74,46,75],[47,79,46,80],[47,80,46,81],[47,82,46,83],[47,83,46,84],[47,84,46,85,"path"],[47,88,46,89],[47,89,46,90],[47,94,46,95,"path"],[47,98,46,99],[47,99,46,100],[48,4,47,4],[48,10,47,10,"otherRoutes"],[48,21,47,21],[48,24,47,24,"uniqueBy"],[48,32,47,32],[48,33,47,33,"flat"],[48,37,47,37],[48,38,47,38,"filter"],[48,44,47,44],[48,45,47,45],[48,46,47,46],[48,50,47,51,"route"],[48,55,47,56],[48,56,47,57],[48,61,47,62,"route"],[48,66,47,67],[48,67,47,68,"type"],[48,71,47,72],[48,76,47,77],[48,83,47,84],[48,87,48,9,"route"],[48,92,48,14],[48,93,48,15,"type"],[48,97,48,19],[48,102,48,24],[48,111,48,33],[48,116,48,38,"route"],[48,121,48,43],[48,122,48,44,"methods"],[48,129,48,51],[48,134,48,56,"undefined"],[48,143,48,65],[48,147,48,69,"route"],[48,152,48,74],[48,153,48,75,"methods"],[48,160,48,82],[48,161,48,83,"includes"],[48,169,48,91],[48,170,48,92],[48,175,48,97],[48,176,48,98],[48,177,48,100],[48,178,48,101],[48,180,48,103],[48,181,48,104],[48,182,48,105,"path"],[48,186,48,109],[48,187,48,110],[48,192,48,115,"path"],[48,196,48,119],[48,197,48,120],[49,4,49,4],[49,10,49,10,"redirects"],[49,19,49,19],[49,22,49,22,"uniqueBy"],[49,30,49,30],[49,31,49,31,"flat"],[49,35,49,35],[49,36,49,36,"filter"],[49,42,49,42],[49,43,49,43],[49,44,49,44],[49,48,49,49,"route"],[49,53,49,54],[49,54,49,55],[49,59,49,60,"route"],[49,64,49,65],[49,65,49,66,"type"],[49,69,49,70],[49,74,49,75],[49,84,49,85],[49,85,49,86],[49,87,49,88],[49,88,49,89],[49,89,49,90,"path"],[49,93,49,94],[49,94,49,95],[49,99,49,100,"path"],[49,103,49,104],[49,104,49,105],[49,105,50,9,"map"],[49,108,50,12],[49,109,50,14,"redirect"],[49,117,50,22],[49,121,50,27],[50,6,51,8],[51,6,52,8],[52,6,53,8],[52,10,53,12],[52,11,53,13],[52,12,53,14],[52,14,53,16,"url_1"],[52,19,53,21],[52,20,53,22,"shouldLinkExternally"],[52,40,53,42],[52,42,53,44,"redirect"],[52,50,53,52],[52,51,53,53],[52,52,53,54],[52,53,53,55],[52,54,53,56,"destinationContextKey"],[52,75,53,77],[52,76,53,78],[52,78,53,80],[53,8,54,12,"redirect"],[53,16,54,20],[53,17,54,21],[53,18,54,22],[53,19,54,23],[53,22,54,26,"redirect"],[53,30,54,34],[53,31,54,35],[53,32,54,36],[53,33,54,37],[53,34,54,38,"destinationContextKey"],[53,55,54,59],[54,6,55,8],[54,7,55,9],[54,13,56,13],[55,8,57,12,"redirect"],[55,16,57,20],[55,17,57,21],[55,18,57,22],[55,19,57,23],[55,22,58,16,"flat"],[55,26,58,20],[55,27,58,21,"find"],[55,31,58,25],[55,32,58,26],[55,33,58,27],[55,37,58,32,"route"],[55,42,58,37],[55,43,58,38],[55,48,58,43,"route"],[55,53,58,48],[55,54,58,49,"contextKey"],[55,64,58,59],[55,69,58,64,"redirect"],[55,77,58,72],[55,78,58,73],[55,79,58,74],[55,80,58,75],[55,81,58,76,"destinationContextKey"],[55,102,58,97],[55,103,58,98],[55,106,58,101],[55,107,58,102],[55,108,58,103],[55,112,59,20],[55,115,59,23],[56,6,60,8],[57,6,61,8],[57,13,61,15,"redirect"],[57,21,61,23],[58,4,62,4],[58,5,62,5],[58,6,62,6],[58,7,63,9,"reverse"],[58,14,63,16],[58,15,63,17],[58,16,63,18],[59,4,64,4],[59,10,64,10,"rewrites"],[59,18,64,18],[59,21,64,21,"uniqueBy"],[59,29,64,29],[59,30,64,30,"flat"],[59,34,64,34],[59,35,64,35,"filter"],[59,41,64,41],[59,42,64,42],[59,43,64,43],[59,47,64,48,"route"],[59,52,64,53],[59,53,64,54],[59,58,64,59,"route"],[59,63,64,64],[59,64,64,65,"type"],[59,68,64,69],[59,73,64,74],[59,82,64,83],[59,83,64,84],[59,85,64,86],[59,86,64,87],[59,87,64,88,"path"],[59,91,64,92],[59,92,64,93],[59,97,64,98,"path"],[59,101,64,102],[59,102,64,103],[59,103,65,9,"map"],[59,106,65,12],[59,107,65,14,"rewrite"],[59,114,65,21],[59,118,65,26],[60,6,66,8,"rewrite"],[60,13,66,15],[60,14,66,16],[60,15,66,17],[60,16,66,18],[60,19,67,12,"flat"],[60,23,67,16],[60,24,67,17,"find"],[60,28,67,21],[60,29,67,22],[60,30,67,23],[60,34,67,28,"route"],[60,39,67,33],[60,40,67,34],[60,45,67,39,"route"],[60,50,67,44],[60,51,67,45,"contextKey"],[60,61,67,55],[60,66,67,60,"rewrite"],[60,73,67,67],[60,74,67,68],[60,75,67,69],[60,76,67,70],[60,77,67,71,"destinationContextKey"],[60,98,67,92],[60,99,67,93],[60,102,67,96],[60,103,67,97],[60,104,67,98],[60,108,68,16],[60,111,68,19],[61,6,69,8],[61,13,69,15,"rewrite"],[61,20,69,22],[62,4,70,4],[62,5,70,5],[62,6,70,6],[62,7,71,9,"reverse"],[62,14,71,16],[62,15,71,17],[62,16,71,18],[63,4,72,4],[63,10,72,10,"standardRoutes"],[63,24,72,24],[63,27,72,27,"otherRoutes"],[63,38,72,38],[63,39,72,39,"filter"],[63,45,72,45],[63,46,72,46],[63,47,72,47],[63,51,72,52,"route"],[63,56,72,57],[63,57,72,58],[63,62,72,63],[63,63,72,64,"isNotFoundRoute"],[63,78,72,79],[63,79,72,80,"route"],[63,84,72,85],[63,85,72,86],[63,86,72,87],[64,4,73,4],[64,10,73,10,"notFoundRoutes"],[64,24,73,24],[64,27,73,27,"otherRoutes"],[64,38,73,38],[64,39,73,39,"filter"],[64,45,73,45],[64,46,73,46],[64,47,73,47],[64,51,73,52,"route"],[64,56,73,57],[64,57,73,58],[64,62,73,63,"isNotFoundRoute"],[64,77,73,78],[64,78,73,79,"route"],[64,83,73,84],[64,84,73,85],[64,85,73,86],[65,4,74,4],[65,10,74,10,"manifest"],[65,18,74,18],[65,21,74,21],[66,6,75,8,"apiRoutes"],[66,15,75,17],[66,17,75,19,"getMatchableManifestForPaths"],[66,45,75,47],[66,46,75,48,"apiRoutes"],[66,55,75,57],[66,56,75,58],[67,6,76,8,"htmlRoutes"],[67,16,76,18],[67,18,76,20,"getMatchableManifestForPaths"],[67,46,76,48],[67,47,76,49,"standardRoutes"],[67,61,76,63],[67,62,76,64],[68,6,77,8,"notFoundRoutes"],[68,20,77,22],[68,22,77,24,"getMatchableManifestForPaths"],[68,50,77,52],[68,51,77,53,"notFoundRoutes"],[68,65,77,67],[68,66,77,68],[69,6,78,8,"redirects"],[69,15,78,17],[69,17,78,19,"getMatchableManifestForPaths"],[69,45,78,47],[69,46,78,48,"redirects"],[69,55,78,57],[69,56,78,58],[70,6,79,8,"rewrites"],[70,14,79,16],[70,16,79,18,"getMatchableManifestForPaths"],[70,44,79,46],[70,45,79,47,"rewrites"],[70,53,79,55],[71,4,80,4],[71,5,80,5],[72,4,81,4],[72,8,81,8,"route"],[72,13,81,13],[72,14,81,14,"middleware"],[72,24,81,24],[72,26,81,26],[73,6,82,8,"manifest"],[73,14,82,16],[73,15,82,17,"middleware"],[73,25,82,27],[73,28,82,30],[74,8,83,12,"file"],[74,12,83,16],[74,14,83,18,"route"],[74,19,83,23],[74,20,83,24,"middleware"],[74,30,83,34],[74,31,83,35,"contextKey"],[75,6,84,8],[75,7,84,9],[76,4,85,4],[77,4,86,4],[77,11,86,11,"manifest"],[77,19,86,19],[78,2,87,0],[79,2,88,0],[79,11,88,9,"getMatchableManifestForPaths"],[79,39,88,37,"getMatchableManifestForPaths"],[79,40,88,38,"paths"],[79,45,88,43],[79,47,88,45],[80,4,89,4],[80,11,89,11,"paths"],[80,16,89,16],[80,17,89,17,"map"],[80,20,89,20],[80,21,89,21],[80,22,89,22],[80,23,89,23,"normalizedRoutePath"],[80,42,89,42],[80,44,89,44,"absoluteRoute"],[80,57,89,57],[80,59,89,59,"node"],[80,63,89,63],[80,64,89,64],[80,69,89,69],[81,6,90,8],[81,12,90,14,"matcher"],[81,19,90,21],[81,22,90,24,"getNamedRouteRegex"],[81,40,90,42],[81,41,90,43,"normalizedRoutePath"],[81,60,90,62],[81,62,90,64,"absoluteRoute"],[81,75,90,77],[81,77,90,79,"node"],[81,81,90,83],[81,82,90,84,"contextKey"],[81,92,90,94],[81,93,90,95],[82,6,91,8],[82,10,91,12,"node"],[82,14,91,16],[82,15,91,17,"generated"],[82,24,91,26],[82,26,91,28],[83,8,92,12,"matcher"],[83,15,92,19],[83,16,92,20,"generated"],[83,25,92,29],[83,28,92,32],[83,32,92,36],[84,6,93,8],[85,6,94,8],[85,10,94,12,"node"],[85,14,94,16],[85,15,94,17,"permanent"],[85,24,94,26],[85,26,94,28],[86,8,95,12,"matcher"],[86,15,95,19],[86,16,95,20,"permanent"],[86,25,95,29],[86,28,95,32],[86,32,95,36],[87,6,96,8],[88,6,97,8],[88,10,97,12,"node"],[88,14,97,16],[88,15,97,17,"methods"],[88,22,97,24],[88,24,97,26],[89,8,98,12,"matcher"],[89,15,98,19],[89,16,98,20,"methods"],[89,23,98,27],[89,26,98,30,"node"],[89,30,98,34],[89,31,98,35,"methods"],[89,38,98,42],[90,6,99,8],[91,6,100,8],[91,13,100,15,"matcher"],[91,20,100,22],[92,4,101,4],[92,5,101,5],[92,6,101,6],[93,2,102,0],[94,2,103,0],[94,11,103,9,"getNamedRouteRegex"],[94,29,103,27,"getNamedRouteRegex"],[94,30,103,28,"normalizedRoute"],[94,45,103,43],[94,47,103,45,"page"],[94,51,103,49],[94,53,103,51,"file"],[94,57,103,55],[94,59,103,57],[95,4,104,4],[95,10,104,10,"result"],[95,16,104,16],[95,19,104,19,"getNamedParametrizedRoute"],[95,44,104,44],[95,45,104,45,"normalizedRoute"],[95,60,104,60],[95,61,104,61],[96,4,105,4],[96,11,105,11],[97,6,106,8,"file"],[97,10,106,12],[98,6,107,8,"page"],[98,10,107,12],[99,6,108,8,"namedRegex"],[99,16,108,18],[99,18,108,20],[99,22,108,24,"result"],[99,28,108,30],[99,29,108,31,"namedParameterizedRoute"],[99,52,108,54],[99,61,108,63],[100,6,109,8,"routeKeys"],[100,15,109,17],[100,17,109,19,"result"],[100,23,109,25],[100,24,109,26,"routeKeys"],[101,4,110,4],[101,5,110,5],[102,2,111,0],[103,2,112,0],[104,0,113,0],[105,0,114,0],[106,0,115,0],[107,2,116,0],[107,11,116,9,"buildGetSafeRouteKey"],[107,31,116,29,"buildGetSafeRouteKey"],[107,32,116,29],[107,34,116,32],[108,4,117,4],[108,8,117,8,"currentCharCode"],[108,23,117,23],[108,26,117,26],[108,28,117,28],[108,29,117,29],[108,30,117,30],[109,4,118,4],[109,8,118,8,"currentLength"],[109,21,118,21],[109,24,118,24],[109,25,118,25],[110,4,119,4],[110,11,119,11],[110,17,119,17],[111,6,120,8],[111,10,120,12,"result"],[111,16,120,18],[111,19,120,21],[111,21,120,23],[112,6,121,8],[112,10,121,12,"incrementNext"],[112,23,121,25],[112,26,121,28],[112,30,121,32],[113,6,122,8],[114,6,123,8],[114,11,123,13],[114,15,123,17,"i"],[114,16,123,18],[114,19,123,21],[114,20,123,22],[114,22,123,24,"i"],[114,23,123,25],[114,26,123,28,"currentLength"],[114,39,123,41],[114,41,123,43,"i"],[114,42,123,44],[114,44,123,46],[114,46,123,48],[115,8,124,12],[115,12,124,16,"incrementNext"],[115,25,124,29],[115,27,124,31],[116,10,125,16,"currentCharCode"],[116,25,125,31],[116,27,125,33],[117,10,126,16],[117,14,126,20,"currentCharCode"],[117,29,126,35],[117,32,126,38],[117,35,126,41],[117,37,126,43],[118,12,127,20,"currentCharCode"],[118,27,127,35],[118,30,127,38],[118,32,127,40],[118,33,127,41],[118,34,127,42],[119,12,128,20,"incrementNext"],[119,25,128,33],[119,28,128,36],[119,32,128,40],[119,33,128,41],[119,34,128,42],[120,10,129,16],[120,11,129,17],[120,17,130,21],[121,12,131,20,"incrementNext"],[121,25,131,33],[121,28,131,36],[121,33,131,41],[122,10,132,16],[123,8,133,12],[124,8,134,12,"result"],[124,14,134,18],[124,17,134,21,"String"],[124,23,134,27],[124,24,134,28,"fromCharCode"],[124,36,134,40],[124,37,134,41,"currentCharCode"],[124,52,134,56],[124,53,134,57],[124,56,134,60,"result"],[124,62,134,66],[125,6,135,8],[126,6,136,8],[127,6,137,8],[127,10,137,12,"incrementNext"],[127,23,137,25],[127,25,137,27],[128,8,138,12,"currentLength"],[128,21,138,25],[128,23,138,27],[129,8,139,12,"currentCharCode"],[129,23,139,27],[129,26,139,30],[129,28,139,32],[129,29,139,33],[129,30,139,34],[130,6,140,8],[131,6,141,8],[131,13,141,15,"result"],[131,19,141,21],[132,4,142,4],[132,5,142,5],[133,2,143,0],[134,2,144,0],[134,11,144,9,"removeTrailingSlash"],[134,30,144,28,"removeTrailingSlash"],[134,31,144,29,"route"],[134,36,144,34],[134,38,144,36],[135,4,145,4],[135,11,145,11,"route"],[135,16,145,16],[135,17,145,17,"replace"],[135,24,145,24],[135,25,145,25],[135,30,145,30],[135,32,145,32],[135,34,145,34],[135,35,145,35],[135,39,145,39],[135,42,145,42],[136,2,146,0],[137,2,147,0],[137,11,147,9,"getNamedParametrizedRoute"],[137,36,147,34,"getNamedParametrizedRoute"],[137,37,147,35,"route"],[137,42,147,40],[137,44,147,42],[138,4,148,4],[138,10,148,10,"segments"],[138,18,148,18],[138,21,148,21,"removeTrailingSlash"],[138,40,148,40],[138,41,148,41,"route"],[138,46,148,46],[138,47,148,47],[138,48,148,48,"slice"],[138,53,148,53],[138,54,148,54],[138,55,148,55],[138,56,148,56],[138,57,148,57,"split"],[138,62,148,62],[138,63,148,63],[138,66,148,66],[138,67,148,67],[139,4,149,4],[139,10,149,10,"getSafeRouteKey"],[139,25,149,25],[139,28,149,28,"buildGetSafeRouteKey"],[139,48,149,48],[139,49,149,49],[139,50,149,50],[140,4,150,4],[140,10,150,10,"routeKeys"],[140,19,150,19],[140,22,150,22],[140,23,150,23],[140,24,150,24],[141,4,151,4],[141,11,151,11],[142,6,152,8,"namedParameterizedRoute"],[142,29,152,31],[142,31,152,33,"segments"],[142,39,152,41],[142,40,153,13,"map"],[142,43,153,16],[142,44,153,17],[142,45,153,18,"segment"],[142,52,153,25],[142,54,153,27,"index"],[142,59,153,32],[142,64,153,37],[143,8,154,12],[143,12,154,16,"segment"],[143,19,154,23],[143,24,154,28],[143,36,154,40],[143,40,154,44,"index"],[143,45,154,49],[143,50,154,54,"segments"],[143,58,154,62],[143,59,154,63,"length"],[143,65,154,69],[143,68,154,72],[143,69,154,73],[143,71,154,75],[144,10,155,16,"segment"],[144,17,155,23],[144,20,155,26],[144,36,155,42],[145,8,156,12],[146,8,157,12],[146,12,157,16],[146,22,157,26],[146,23,157,27,"test"],[146,27,157,31],[146,28,157,32,"segment"],[146,35,157,39],[146,36,157,40],[146,38,157,42],[147,10,158,16],[147,16,158,22],[148,12,158,24,"name"],[148,16,158,28],[149,12,158,30,"optional"],[149,20,158,38],[150,12,158,40,"repeat"],[151,10,158,47],[151,11,158,48],[151,14,158,51,"parseParameter"],[151,28,158,65],[151,29,158,66,"segment"],[151,36,158,73],[151,37,158,74],[152,10,159,16],[153,10,160,16],[154,10,161,16],[154,14,161,20,"cleanedKey"],[154,24,161,30],[154,27,161,33,"name"],[154,31,161,37],[154,32,161,38,"replace"],[154,39,161,45],[154,40,161,46],[154,45,161,51],[154,47,161,53],[154,49,161,55],[154,50,161,56],[155,10,162,16],[155,14,162,20,"invalidKey"],[155,24,162,30],[155,27,162,33],[155,32,162,38],[156,10,163,16],[157,10,164,16],[158,10,165,16],[158,14,165,20,"cleanedKey"],[158,24,165,30],[158,25,165,31,"length"],[158,31,165,37],[158,36,165,42],[158,37,165,43],[158,41,165,47,"cleanedKey"],[158,51,165,57],[158,52,165,58,"length"],[158,58,165,64],[158,61,165,67],[158,63,165,69],[158,65,165,71],[159,12,166,20,"invalidKey"],[159,22,166,30],[159,25,166,33],[159,29,166,37],[160,10,167,16],[161,10,168,16],[161,14,168,20],[161,15,168,21,"isNaN"],[161,20,168,26],[161,21,168,27,"parseInt"],[161,29,168,35],[161,30,168,36,"cleanedKey"],[161,40,168,46],[161,41,168,47,"slice"],[161,46,168,52],[161,47,168,53],[161,48,168,54],[161,50,168,56],[161,51,168,57],[161,52,168,58],[161,54,168,60],[161,56,168,62],[161,57,168,63],[161,58,168,64],[161,60,168,66],[162,12,169,20,"invalidKey"],[162,22,169,30],[162,25,169,33],[162,29,169,37],[163,10,170,16],[164,10,171,16],[165,10,172,16],[165,14,172,20,"cleanedKey"],[165,24,172,30],[165,28,172,34,"routeKeys"],[165,37,172,43],[165,39,172,45],[166,12,173,20,"invalidKey"],[166,22,173,30],[166,25,173,33],[166,29,173,37],[167,10,174,16],[168,10,175,16],[168,14,175,20,"invalidKey"],[168,24,175,30],[168,26,175,32],[169,12,176,20,"cleanedKey"],[169,22,176,30],[169,25,176,33,"getSafeRouteKey"],[169,40,176,48],[169,41,176,49],[169,42,176,50],[170,10,177,16],[171,10,178,16,"routeKeys"],[171,19,178,25],[171,20,178,26,"cleanedKey"],[171,30,178,36],[171,31,178,37],[171,34,178,40,"name"],[171,38,178,44],[172,10,179,16],[172,17,179,23,"repeat"],[172,23,179,29],[172,26,180,22,"optional"],[172,34,180,30],[172,37,181,26],[172,47,181,36,"cleanedKey"],[172,57,181,46],[172,66,181,55],[172,69,182,26],[172,76,182,33,"cleanedKey"],[172,86,182,43],[172,93,182,50],[172,96,183,22],[172,103,183,29,"cleanedKey"],[172,113,183,39],[172,123,183,49],[173,8,184,12],[173,9,184,13],[173,15,185,17],[173,19,185,21],[173,29,185,31],[173,30,185,32,"test"],[173,34,185,36],[173,35,185,37,"segment"],[173,42,185,44],[173,43,185,45],[173,45,185,47],[174,10,186,16],[174,16,186,22,"groupName"],[174,25,186,31],[174,28,186,34],[174,29,186,35],[174,30,186,36],[174,32,186,38,"matchers_1"],[174,42,186,48],[174,43,186,49,"matchGroupName"],[174,57,186,63],[174,59,186,65,"segment"],[174,66,186,72],[174,67,186,73],[174,68,187,21,"split"],[174,73,187,26],[174,74,187,27],[174,77,187,30],[174,78,187,31],[174,79,188,21,"map"],[174,82,188,24],[174,83,188,26,"group"],[174,88,188,31],[174,92,188,36,"group"],[174,97,188,41],[174,98,188,42,"trim"],[174,102,188,46],[174,103,188,47],[174,104,188,48],[174,105,188,49],[174,106,189,21,"filter"],[174,112,189,27],[174,113,189,28,"Boolean"],[174,120,189,35],[174,121,189,36],[175,10,190,16],[175,14,190,20,"groupName"],[175,23,190,29],[175,24,190,30,"length"],[175,30,190,36],[175,33,190,39],[175,34,190,40],[175,36,190,42],[176,12,191,20],[176,18,191,26,"optionalSegment"],[176,33,191,41],[176,36,191,44],[176,45,191,53,"groupName"],[176,54,191,62],[176,55,191,63,"map"],[176,58,191,66],[176,59,191,67,"escapeStringRegexp"],[176,77,191,85],[176,78,191,86],[176,79,191,87,"join"],[176,83,191,91],[176,84,191,92],[176,87,191,95],[176,88,191,96],[176,94,191,102],[177,12,192,20],[178,12,193,20],[178,19,193,27],[178,26,193,34,"optionalSegment"],[178,41,193,49],[178,45,193,53],[179,10,194,16],[179,11,194,17],[179,17,195,21],[180,12,196,20],[181,12,197,20],[181,19,197,27],[181,26,197,34,"escapeStringRegexp"],[181,44,197,52],[181,45,197,53,"segment"],[181,52,197,60],[181,53,197,61],[181,57,197,65],[182,10,198,16],[183,8,199,12],[183,9,199,13],[183,15,200,17],[184,10,201,16],[184,17,201,23],[184,21,201,27,"escapeStringRegexp"],[184,39,201,45],[184,40,201,46,"segment"],[184,47,201,53],[184,48,201,54],[184,50,201,56],[185,8,202,12],[186,6,203,8],[186,7,203,9],[186,8,203,10],[186,9,204,13,"join"],[186,13,204,17],[186,14,204,18],[186,16,204,20],[186,17,204,21],[187,6,205,8,"routeKeys"],[188,4,206,4],[188,5,206,5],[189,2,207,0],[190,2,208,0],[191,2,209,0],[191,8,209,6,"reHasRegExp"],[191,19,209,17],[191,22,209,20],[191,43,209,41],[192,2,210,0],[192,8,210,6,"reReplaceRegExp"],[192,23,210,21],[192,26,210,24],[192,48,210,46],[193,2,211,0],[193,11,211,9,"escapeStringRegexp"],[193,29,211,27,"escapeStringRegexp"],[193,30,211,28,"str"],[193,33,211,31],[193,35,211,33],[194,4,212,4],[195,4,213,4],[195,8,213,8,"reHasRegExp"],[195,19,213,19],[195,20,213,20,"test"],[195,24,213,24],[195,25,213,25,"str"],[195,28,213,28],[195,29,213,29],[195,31,213,31],[196,6,214,8],[196,13,214,15,"str"],[196,16,214,18],[196,17,214,19,"replace"],[196,24,214,26],[196,25,214,27,"reReplaceRegExp"],[196,40,214,42],[196,42,214,44],[196,48,214,50],[196,49,214,51],[197,4,215,4],[198,4,216,4],[198,11,216,11,"str"],[198,14,216,14],[199,2,217,0],[200,2,218,0],[200,11,218,9,"parseParameter"],[200,25,218,23,"parseParameter"],[200,26,218,24,"param"],[200,31,218,29],[200,33,218,31],[201,4,219,4],[201,8,219,8,"repeat"],[201,14,219,14],[201,17,219,17],[201,22,219,22],[202,4,220,4],[202,8,220,8,"optional"],[202,16,220,16],[202,19,220,19],[202,24,220,24],[203,4,221,4],[203,8,221,8,"name"],[203,12,221,12],[203,15,221,15,"param"],[203,20,221,20],[204,4,222,4],[204,8,222,8],[204,18,222,18],[204,19,222,19,"test"],[204,23,222,23],[204,24,222,24,"name"],[204,28,222,28],[204,29,222,29],[204,31,222,31],[205,6,223,8,"optional"],[205,14,223,16],[205,17,223,19],[205,21,223,23],[206,6,224,8,"name"],[206,10,224,12],[206,13,224,15,"name"],[206,17,224,19],[206,18,224,20,"slice"],[206,23,224,25],[206,24,224,26],[206,25,224,27],[206,27,224,29],[206,28,224,30],[206,29,224,31],[206,30,224,32],[207,4,225,4],[208,4,226,4],[208,8,226,8],[208,17,226,17],[208,18,226,18,"test"],[208,22,226,22],[208,23,226,23,"name"],[208,27,226,27],[208,28,226,28],[208,30,226,30],[209,6,227,8,"repeat"],[209,12,227,14],[209,15,227,17],[209,19,227,21],[210,6,228,8,"name"],[210,10,228,12],[210,13,228,15,"name"],[210,17,228,19],[210,18,228,20,"slice"],[210,23,228,25],[210,24,228,26],[210,25,228,27],[210,26,228,28],[211,4,229,4],[212,4,230,4],[212,11,230,11],[213,6,230,13,"name"],[213,10,230,17],[214,6,230,19,"repeat"],[214,12,230,25],[215,6,230,27,"optional"],[216,4,230,36],[216,5,230,37],[217,2,231,0],[218,0,231,1],[218,3]],"functionMap":{"names":["<global>","isNotFoundRoute","uniqueBy","arr.filter$argument_0","getServerManifest","getFlatNodes","route.children.map$argument_0","getFlatNodes.sort$argument_0","flat.filter$argument_0","uniqueBy$argument_1","uniqueBy.map$argument_0","flat.find$argument_0","otherRoutes.filter$argument_0","getMatchableManifestForPaths","paths.map$argument_0","getNamedRouteRegex","buildGetSafeRouteKey","<anonymous>","removeTrailingSlash","getNamedParametrizedRoute","segments.map$argument_0","split.map$argument_0","escapeStringRegexp","parseParameter"],"mappings":"AAA;ACO;CDE;AEC;sBCE;KDO;CFC;AIE;ICC;sCCI,6CD;KDa;cGG,wDH;2CIE,qCJ,GK,gBL;6CIC;oGJC,GK,gBL;2CIC,0CJ,GK,gBL;aMC;0BCQ,uED;KNI;0CIE,yCJ,GK,gBL;aMC;sBCE,sED;KNG;8CQE,wCR;8CQC,uCR;CJc;AaC;qBCC;KDY;CbC;AeC;CfQ;AgBK;WCG;KDuB;ChBC;AkBC;ClBE;AmBC;iBCM;yBCmC,uBD;SDe;CnBI;AsBI;CtBM;AuBC;CvBa"},"hasCjsExports":true},"type":"js/module"}]}