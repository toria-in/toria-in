{"dependencies":[{"name":"tslib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":14,"index":136},"end":{"line":4,"column":30,"index":152}}],"key":"vm88vOsSPZItrLOmMEyUuGkd1y4=","exportNames":["*"],"imports":1}},{"name":"./LayoutManager","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":22,"index":176},"end":{"line":5,"column":48,"index":202}}],"key":"zvYNKl5We8eXKq0On0iqzaQXh50=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.RVMasonryLayoutManagerImpl = void 0;\n  var tslib_1 = require(_dependencyMap[0], \"tslib\");\n  var LayoutManager_1 = require(_dependencyMap[1], \"./LayoutManager\");\n  /**\n   * MasonryLayoutManager implementation that arranges items in a masonry/pinterest-style layout.\n   * Items are placed in columns, with support for items spanning multiple columns.\n   * Can optimize item placement to minimize column height differences.\n   */\n  var RVMasonryLayoutManagerImpl = /** @class */function (_super) {\n    tslib_1.__extends(RVMasonryLayoutManagerImpl, _super);\n    function RVMasonryLayoutManagerImpl(params, previousLayoutManager) {\n      var _a;\n      var _this = _super.call(this, params, previousLayoutManager) || this;\n      /** Current column index for sequential placement */\n      _this.currentColumn = 0;\n      /** If there's a span change for masonry layout, we need to recompute all the widths */\n      _this.fullRelayoutRequired = false;\n      _this.boundedSize = params.windowSize.width;\n      _this.optimizeItemArrangement = params.optimizeItemArrangement;\n      _this.columnHeights = (_a = _this.columnHeights) !== null && _a !== void 0 ? _a : Array(_this.maxColumns).fill(0);\n      return _this;\n    }\n    /**\n     * Updates layout parameters and triggers recomputation if necessary.\n     * @param params New layout parameters\n     */\n    RVMasonryLayoutManagerImpl.prototype.updateLayoutParams = function (params) {\n      var prevMaxColumns = this.maxColumns;\n      var prevOptimizeItemArrangement = this.optimizeItemArrangement;\n      _super.prototype.updateLayoutParams.call(this, params);\n      if (this.boundedSize !== params.windowSize.width || prevMaxColumns !== params.maxColumns || prevOptimizeItemArrangement !== params.optimizeItemArrangement) {\n        this.boundedSize = params.windowSize.width;\n        if (this.layouts.length > 0) {\n          // console.log(\"-----> recomputeLayouts\");\n          // update all widths\n          this.updateAllWidths();\n          this.recomputeLayouts(0, this.layouts.length - 1);\n          this.requiresRepaint = true;\n        }\n      }\n    };\n    /**\n     * Processes layout information for items, updating their dimensions.\n     * @param layoutInfo Array of layout information for items (real measurements)\n     * @param itemCount Total number of items in the list\n     */\n    RVMasonryLayoutManagerImpl.prototype.processLayoutInfo = function (layoutInfo, itemCount) {\n      var e_1, _a;\n      try {\n        // Update layout information\n        for (var layoutInfo_1 = tslib_1.__values(layoutInfo), layoutInfo_1_1 = layoutInfo_1.next(); !layoutInfo_1_1.done; layoutInfo_1_1 = layoutInfo_1.next()) {\n          var info = layoutInfo_1_1.value;\n          var index = info.index,\n            dimensions = info.dimensions;\n          var layout = this.layouts[index];\n          layout.height = dimensions.height;\n          layout.isHeightMeasured = true;\n          layout.isWidthMeasured = true;\n          this.layouts[index] = layout;\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (layoutInfo_1_1 && !layoutInfo_1_1.done && (_a = layoutInfo_1.return)) _a.call(layoutInfo_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      // TODO: Can be optimized\n      if (this.fullRelayoutRequired) {\n        this.updateAllWidths();\n        this.fullRelayoutRequired = false;\n        return 0;\n      }\n    };\n    /**\n     * Estimates layout dimensions for an item at the given index.\n     * Can be called by base class if estimate is required.\n     * @param index Index of the item to estimate layout for\n     */\n    RVMasonryLayoutManagerImpl.prototype.estimateLayout = function (index) {\n      var layout = this.layouts[index];\n      // Set width based on columns and span\n      layout.width = this.getWidth(index);\n      layout.height = this.getEstimatedHeight(index);\n      layout.isWidthMeasured = true;\n      layout.enforcedWidth = true;\n    };\n    /**\n     * Handles span change for an item.\n     * @param index Index of the item\n     */\n    RVMasonryLayoutManagerImpl.prototype.handleSpanChange = function (index) {\n      this.fullRelayoutRequired = true;\n    };\n    /**\n     * Returns the total size of the layout area.\n     * @returns RVDimension containing width and height of the layout\n     */\n    RVMasonryLayoutManagerImpl.prototype.getLayoutSize = function () {\n      if (this.layouts.length === 0) return {\n        width: 0,\n        height: 0\n      };\n      // Find the tallest column\n      var maxHeight = Math.max.apply(Math, tslib_1.__spreadArray([], tslib_1.__read(this.columnHeights), false));\n      return {\n        width: this.boundedSize,\n        height: maxHeight\n      };\n    };\n    /**\n     * Recomputes layouts for items in the given range.\n     * Uses different placement strategies based on optimization settings.\n     * @param startIndex Starting index of items to recompute\n     * @param endIndex Ending index of items to recompute\n     */\n    RVMasonryLayoutManagerImpl.prototype.recomputeLayouts = function (startIndex, endIndex) {\n      // Reset column heights if starting from the beginning\n      if (startIndex === 0) {\n        this.columnHeights = Array(this.maxColumns).fill(0);\n        this.currentColumn = 0;\n      } else {\n        // Find the y-position of the first item to recompute\n        // and adjust column heights accordingly\n        this.updateColumnHeightsToIndex(startIndex);\n      }\n      var itemCount = this.layouts.length;\n      for (var i = startIndex; i < itemCount; i++) {\n        var layout = this.getLayout(i);\n        // Skip tracking span because we're not changing widths\n        var span = this.getSpan(i, true);\n        if (this.optimizeItemArrangement) {\n          if (span === 1) {\n            // For single column items, place in the shortest column\n            this.placeSingleColumnItem(layout);\n          } else {\n            // For multi-column items, find the best position\n            this.placeOptimizedMultiColumnItem(layout, span);\n          }\n        } else {\n          // No optimization - place items sequentially\n          this.placeItemSequentially(layout, span);\n        }\n      }\n    };\n    /**\n     * Calculates the width of an item based on its span.\n     * @param index Index of the item\n     * @returns Width of the item\n     */\n    RVMasonryLayoutManagerImpl.prototype.getWidth = function (index) {\n      return this.boundedSize / this.maxColumns * this.getSpan(index);\n    };\n    RVMasonryLayoutManagerImpl.prototype.updateAllWidths = function () {\n      for (var i = 0; i < this.layouts.length; i++) {\n        this.layouts[i].width = this.getWidth(i);\n        this.layouts[i].minHeight = undefined;\n      }\n    };\n    /**\n     * Places an item sequentially in the next available position.\n     * @param layout Layout information for the item\n     * @param span Number of columns the item spans\n     */\n    RVMasonryLayoutManagerImpl.prototype.placeItemSequentially = function (layout, span) {\n      // Check if the item can fit in the current row\n      if (this.currentColumn + span > this.maxColumns) {\n        // Move to the next row\n        this.currentColumn = 0;\n      }\n      // Find the maximum height of the columns this item will span\n      var maxHeight = this.columnHeights[this.currentColumn];\n      for (var col = this.currentColumn + 1; col < this.currentColumn + span; col++) {\n        if (col < this.maxColumns) {\n          maxHeight = Math.max(maxHeight, this.columnHeights[col]);\n        }\n      }\n      // Place the item\n      layout.x = this.boundedSize / this.maxColumns * this.currentColumn;\n      layout.y = maxHeight;\n      // Update column heights\n      for (var col = this.currentColumn; col < this.currentColumn + span; col++) {\n        if (col < this.maxColumns) {\n          this.columnHeights[col] = maxHeight + layout.height;\n        }\n      }\n      // Move to the next column\n      this.currentColumn += span;\n      if (this.currentColumn >= this.maxColumns) {\n        this.currentColumn = 0;\n      }\n    };\n    /**\n     * Places a single-column item in the shortest available column.\n     * @param layout Layout information for the item\n     */\n    RVMasonryLayoutManagerImpl.prototype.placeSingleColumnItem = function (layout) {\n      // Find the shortest column\n      var shortestColumnIndex = 0;\n      var minHeight = this.columnHeights[0];\n      for (var i = 1; i < this.maxColumns; i++) {\n        if (this.columnHeights[i] < minHeight) {\n          minHeight = this.columnHeights[i];\n          shortestColumnIndex = i;\n        }\n      }\n      // Place the item in the shortest column\n      layout.x = this.boundedSize / this.maxColumns * shortestColumnIndex;\n      layout.y = this.columnHeights[shortestColumnIndex];\n      // Update the column height\n      this.columnHeights[shortestColumnIndex] += layout.height;\n    };\n    /**\n     * Places a multi-column item in the position that minimizes total column heights.\n     * @param layout Layout information for the item\n     * @param span Number of columns the item spans\n     */\n    RVMasonryLayoutManagerImpl.prototype.placeOptimizedMultiColumnItem = function (layout, span) {\n      var bestStartColumn = 0;\n      var minTotalHeight = Number.MAX_VALUE;\n      // Try all possible positions\n      for (var startCol = 0; startCol <= this.maxColumns - span; startCol++) {\n        // Find the maximum height among the columns this item would span\n        var maxHeight_1 = this.columnHeights[startCol];\n        for (var col = startCol + 1; col < startCol + span; col++) {\n          maxHeight_1 = Math.max(maxHeight_1, this.columnHeights[col]);\n        }\n        // Calculate the total height after placing the item\n        var totalHeight = 0;\n        for (var col = 0; col < this.maxColumns; col++) {\n          if (col >= startCol && col < startCol + span) {\n            totalHeight += maxHeight_1 + layout.height;\n          } else {\n            totalHeight += this.columnHeights[col];\n          }\n        }\n        // Update best position if this is better\n        if (totalHeight < minTotalHeight) {\n          minTotalHeight = totalHeight;\n          bestStartColumn = startCol;\n        }\n      }\n      // Place the item at the best position\n      var maxHeight = Math.max.apply(Math, tslib_1.__spreadArray([], tslib_1.__read(this.columnHeights.slice(bestStartColumn, bestStartColumn + span)), false));\n      layout.x = this.boundedSize / this.maxColumns * bestStartColumn;\n      layout.y = maxHeight;\n      // Update column heights\n      for (var col = bestStartColumn; col < bestStartColumn + span; col++) {\n        this.columnHeights[col] = maxHeight + layout.height;\n      }\n    };\n    /**\n     * Updates column heights up to a given index by recalculating item positions.\n     * @param index Index to update column heights up to\n     */\n    RVMasonryLayoutManagerImpl.prototype.updateColumnHeightsToIndex = function (index) {\n      // Reset column heights\n      this.columnHeights = Array(this.maxColumns).fill(0);\n      this.currentColumn = 0;\n      // Recalculate column heights up to the given index\n      for (var i = 0; i < index; i++) {\n        var layout = this.layouts[i];\n        var itemWidth = layout.width;\n        var columnWidth = this.boundedSize / this.maxColumns;\n        var span = Math.round(itemWidth / columnWidth);\n        // Find which columns this item spans\n        var startColumn = Math.round(layout.x / columnWidth);\n        var endColumn = Math.min(startColumn + span, this.maxColumns);\n        // Update column heights\n        for (var col = startColumn; col < endColumn; col++) {\n          this.columnHeights[col] = Math.max(this.columnHeights[col], layout.y + layout.height);\n        }\n        // Update current column for non-optimized layout\n        if (!this.optimizeItemArrangement) {\n          this.currentColumn = (startColumn + span) % this.maxColumns;\n        }\n      }\n    };\n    return RVMasonryLayoutManagerImpl;\n  }(LayoutManager_1.RVLayoutManager);\n  exports.RVMasonryLayoutManagerImpl = RVMasonryLayoutManagerImpl;\n});","lineCount":292,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"RVMasonryLayoutManagerImpl"],[7,36,3,34],[7,39,3,37],[7,44,3,42],[7,45,3,43],[8,2,4,0],[8,6,4,4,"tslib_1"],[8,13,4,11],[8,16,4,14,"require"],[8,23,4,21],[8,24,4,21,"_dependencyMap"],[8,38,4,21],[8,50,4,29],[8,51,4,30],[9,2,5,0],[9,6,5,4,"LayoutManager_1"],[9,21,5,19],[9,24,5,22,"require"],[9,31,5,29],[9,32,5,29,"_dependencyMap"],[9,46,5,29],[9,68,5,47],[9,69,5,48],[10,2,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,2,11,0],[15,6,11,4,"RVMasonryLayoutManagerImpl"],[15,32,11,30],[15,35,11,33],[15,48,11,48],[15,58,11,58,"_super"],[15,64,11,64],[15,66,11,66],[16,4,12,4,"tslib_1"],[16,11,12,11],[16,12,12,12,"__extends"],[16,21,12,21],[16,22,12,22,"RVMasonryLayoutManagerImpl"],[16,48,12,48],[16,50,12,50,"_super"],[16,56,12,56],[16,57,12,57],[17,4,13,4],[17,13,13,13,"RVMasonryLayoutManagerImpl"],[17,39,13,39,"RVMasonryLayoutManagerImpl"],[17,40,13,40,"params"],[17,46,13,46],[17,48,13,48,"previousLayoutManager"],[17,69,13,69],[17,71,13,71],[18,6,14,8],[18,10,14,12,"_a"],[18,12,14,14],[19,6,15,8],[19,10,15,12,"_this"],[19,15,15,17],[19,18,15,20,"_super"],[19,24,15,26],[19,25,15,27,"call"],[19,29,15,31],[19,30,15,32],[19,34,15,36],[19,36,15,38,"params"],[19,42,15,44],[19,44,15,46,"previousLayoutManager"],[19,65,15,67],[19,66,15,68],[19,70,15,72],[19,74,15,76],[20,6,16,8],[21,6,17,8,"_this"],[21,11,17,13],[21,12,17,14,"currentColumn"],[21,25,17,27],[21,28,17,30],[21,29,17,31],[22,6,18,8],[23,6,19,8,"_this"],[23,11,19,13],[23,12,19,14,"fullRelayoutRequired"],[23,32,19,34],[23,35,19,37],[23,40,19,42],[24,6,20,8,"_this"],[24,11,20,13],[24,12,20,14,"boundedSize"],[24,23,20,25],[24,26,20,28,"params"],[24,32,20,34],[24,33,20,35,"windowSize"],[24,43,20,45],[24,44,20,46,"width"],[24,49,20,51],[25,6,21,8,"_this"],[25,11,21,13],[25,12,21,14,"optimizeItemArrangement"],[25,35,21,37],[25,38,21,40,"params"],[25,44,21,46],[25,45,21,47,"optimizeItemArrangement"],[25,68,21,70],[26,6,22,8,"_this"],[26,11,22,13],[26,12,22,14,"columnHeights"],[26,25,22,27],[26,28,22,30],[26,29,22,31,"_a"],[26,31,22,33],[26,34,22,36,"_this"],[26,39,22,41],[26,40,22,42,"columnHeights"],[26,53,22,55],[26,59,22,61],[26,63,22,65],[26,67,22,69,"_a"],[26,69,22,71],[26,74,22,76],[26,79,22,81],[26,80,22,82],[26,83,22,85,"_a"],[26,85,22,87],[26,88,22,90,"Array"],[26,93,22,95],[26,94,22,96,"_this"],[26,99,22,101],[26,100,22,102,"maxColumns"],[26,110,22,112],[26,111,22,113],[26,112,22,114,"fill"],[26,116,22,118],[26,117,22,119],[26,118,22,120],[26,119,22,121],[27,6,23,8],[27,13,23,15,"_this"],[27,18,23,20],[28,4,24,4],[29,4,25,4],[30,0,26,0],[31,0,27,0],[32,0,28,0],[33,4,29,4,"RVMasonryLayoutManagerImpl"],[33,30,29,30],[33,31,29,31,"prototype"],[33,40,29,40],[33,41,29,41,"updateLayoutParams"],[33,59,29,59],[33,62,29,62],[33,72,29,72,"params"],[33,78,29,78],[33,80,29,80],[34,6,30,8],[34,10,30,12,"prevMaxColumns"],[34,24,30,26],[34,27,30,29],[34,31,30,33],[34,32,30,34,"maxColumns"],[34,42,30,44],[35,6,31,8],[35,10,31,12,"prevOptimizeItemArrangement"],[35,37,31,39],[35,40,31,42],[35,44,31,46],[35,45,31,47,"optimizeItemArrangement"],[35,68,31,70],[36,6,32,8,"_super"],[36,12,32,14],[36,13,32,15,"prototype"],[36,22,32,24],[36,23,32,25,"updateLayoutParams"],[36,41,32,43],[36,42,32,44,"call"],[36,46,32,48],[36,47,32,49],[36,51,32,53],[36,53,32,55,"params"],[36,59,32,61],[36,60,32,62],[37,6,33,8],[37,10,33,12],[37,14,33,16],[37,15,33,17,"boundedSize"],[37,26,33,28],[37,31,33,33,"params"],[37,37,33,39],[37,38,33,40,"windowSize"],[37,48,33,50],[37,49,33,51,"width"],[37,54,33,56],[37,58,34,12,"prevMaxColumns"],[37,72,34,26],[37,77,34,31,"params"],[37,83,34,37],[37,84,34,38,"maxColumns"],[37,94,34,48],[37,98,35,12,"prevOptimizeItemArrangement"],[37,125,35,39],[37,130,35,44,"params"],[37,136,35,50],[37,137,35,51,"optimizeItemArrangement"],[37,160,35,74],[37,162,35,76],[38,8,36,12],[38,12,36,16],[38,13,36,17,"boundedSize"],[38,24,36,28],[38,27,36,31,"params"],[38,33,36,37],[38,34,36,38,"windowSize"],[38,44,36,48],[38,45,36,49,"width"],[38,50,36,54],[39,8,37,12],[39,12,37,16],[39,16,37,20],[39,17,37,21,"layouts"],[39,24,37,28],[39,25,37,29,"length"],[39,31,37,35],[39,34,37,38],[39,35,37,39],[39,37,37,41],[40,10,38,16],[41,10,39,16],[42,10,40,16],[42,14,40,20],[42,15,40,21,"updateAllWidths"],[42,30,40,36],[42,31,40,37],[42,32,40,38],[43,10,41,16],[43,14,41,20],[43,15,41,21,"recomputeLayouts"],[43,31,41,37],[43,32,41,38],[43,33,41,39],[43,35,41,41],[43,39,41,45],[43,40,41,46,"layouts"],[43,47,41,53],[43,48,41,54,"length"],[43,54,41,60],[43,57,41,63],[43,58,41,64],[43,59,41,65],[44,10,42,16],[44,14,42,20],[44,15,42,21,"requiresRepaint"],[44,30,42,36],[44,33,42,39],[44,37,42,43],[45,8,43,12],[46,6,44,8],[47,4,45,4],[47,5,45,5],[48,4,46,4],[49,0,47,0],[50,0,48,0],[51,0,49,0],[52,0,50,0],[53,4,51,4,"RVMasonryLayoutManagerImpl"],[53,30,51,30],[53,31,51,31,"prototype"],[53,40,51,40],[53,41,51,41,"processLayoutInfo"],[53,58,51,58],[53,61,51,61],[53,71,51,71,"layoutInfo"],[53,81,51,81],[53,83,51,83,"itemCount"],[53,92,51,92],[53,94,51,94],[54,6,52,8],[54,10,52,12,"e_1"],[54,13,52,15],[54,15,52,17,"_a"],[54,17,52,19],[55,6,53,8],[55,10,53,12],[56,8,54,12],[57,8,55,12],[57,13,55,17],[57,17,55,21,"layoutInfo_1"],[57,29,55,33],[57,32,55,36,"tslib_1"],[57,39,55,43],[57,40,55,44,"__values"],[57,48,55,52],[57,49,55,53,"layoutInfo"],[57,59,55,63],[57,60,55,64],[57,62,55,66,"layoutInfo_1_1"],[57,76,55,80],[57,79,55,83,"layoutInfo_1"],[57,91,55,95],[57,92,55,96,"next"],[57,96,55,100],[57,97,55,101],[57,98,55,102],[57,100,55,104],[57,101,55,105,"layoutInfo_1_1"],[57,115,55,119],[57,116,55,120,"done"],[57,120,55,124],[57,122,55,126,"layoutInfo_1_1"],[57,136,55,140],[57,139,55,143,"layoutInfo_1"],[57,151,55,155],[57,152,55,156,"next"],[57,156,55,160],[57,157,55,161],[57,158,55,162],[57,160,55,164],[58,10,56,16],[58,14,56,20,"info"],[58,18,56,24],[58,21,56,27,"layoutInfo_1_1"],[58,35,56,41],[58,36,56,42,"value"],[58,41,56,47],[59,10,57,16],[59,14,57,20,"index"],[59,19,57,25],[59,22,57,28,"info"],[59,26,57,32],[59,27,57,33,"index"],[59,32,57,38],[60,12,57,40,"dimensions"],[60,22,57,50],[60,25,57,53,"info"],[60,29,57,57],[60,30,57,58,"dimensions"],[60,40,57,68],[61,10,58,16],[61,14,58,20,"layout"],[61,20,58,26],[61,23,58,29],[61,27,58,33],[61,28,58,34,"layouts"],[61,35,58,41],[61,36,58,42,"index"],[61,41,58,47],[61,42,58,48],[62,10,59,16,"layout"],[62,16,59,22],[62,17,59,23,"height"],[62,23,59,29],[62,26,59,32,"dimensions"],[62,36,59,42],[62,37,59,43,"height"],[62,43,59,49],[63,10,60,16,"layout"],[63,16,60,22],[63,17,60,23,"isHeightMeasured"],[63,33,60,39],[63,36,60,42],[63,40,60,46],[64,10,61,16,"layout"],[64,16,61,22],[64,17,61,23,"isWidthMeasured"],[64,32,61,38],[64,35,61,41],[64,39,61,45],[65,10,62,16],[65,14,62,20],[65,15,62,21,"layouts"],[65,22,62,28],[65,23,62,29,"index"],[65,28,62,34],[65,29,62,35],[65,32,62,38,"layout"],[65,38,62,44],[66,8,63,12],[67,6,64,8],[67,7,64,9],[67,8,65,8],[67,15,65,15,"e_1_1"],[67,20,65,20],[67,22,65,22],[68,8,65,24,"e_1"],[68,11,65,27],[68,14,65,30],[69,10,65,32,"error"],[69,15,65,37],[69,17,65,39,"e_1_1"],[70,8,65,45],[70,9,65,46],[71,6,65,48],[71,7,65,49],[71,16,66,16],[72,8,67,12],[72,12,67,16],[73,10,68,16],[73,14,68,20,"layoutInfo_1_1"],[73,28,68,34],[73,32,68,38],[73,33,68,39,"layoutInfo_1_1"],[73,47,68,53],[73,48,68,54,"done"],[73,52,68,58],[73,57,68,63,"_a"],[73,59,68,65],[73,62,68,68,"layoutInfo_1"],[73,74,68,80],[73,75,68,81,"return"],[73,81,68,87],[73,82,68,88],[73,84,68,90,"_a"],[73,86,68,92],[73,87,68,93,"call"],[73,91,68,97],[73,92,68,98,"layoutInfo_1"],[73,104,68,110],[73,105,68,111],[74,8,69,12],[74,9,69,13],[74,18,70,20],[75,10,70,22],[75,14,70,26,"e_1"],[75,17,70,29],[75,19,70,31],[75,25,70,37,"e_1"],[75,28,70,40],[75,29,70,41,"error"],[75,34,70,46],[76,8,70,48],[77,6,71,8],[78,6,72,8],[79,6,73,8],[79,10,73,12],[79,14,73,16],[79,15,73,17,"fullRelayoutRequired"],[79,35,73,37],[79,37,73,39],[80,8,74,12],[80,12,74,16],[80,13,74,17,"updateAllWidths"],[80,28,74,32],[80,29,74,33],[80,30,74,34],[81,8,75,12],[81,12,75,16],[81,13,75,17,"fullRelayoutRequired"],[81,33,75,37],[81,36,75,40],[81,41,75,45],[82,8,76,12],[82,15,76,19],[82,16,76,20],[83,6,77,8],[84,4,78,4],[84,5,78,5],[85,4,79,4],[86,0,80,0],[87,0,81,0],[88,0,82,0],[89,0,83,0],[90,4,84,4,"RVMasonryLayoutManagerImpl"],[90,30,84,30],[90,31,84,31,"prototype"],[90,40,84,40],[90,41,84,41,"estimateLayout"],[90,55,84,55],[90,58,84,58],[90,68,84,68,"index"],[90,73,84,73],[90,75,84,75],[91,6,85,8],[91,10,85,12,"layout"],[91,16,85,18],[91,19,85,21],[91,23,85,25],[91,24,85,26,"layouts"],[91,31,85,33],[91,32,85,34,"index"],[91,37,85,39],[91,38,85,40],[92,6,86,8],[93,6,87,8,"layout"],[93,12,87,14],[93,13,87,15,"width"],[93,18,87,20],[93,21,87,23],[93,25,87,27],[93,26,87,28,"getWidth"],[93,34,87,36],[93,35,87,37,"index"],[93,40,87,42],[93,41,87,43],[94,6,88,8,"layout"],[94,12,88,14],[94,13,88,15,"height"],[94,19,88,21],[94,22,88,24],[94,26,88,28],[94,27,88,29,"getEstimatedHeight"],[94,45,88,47],[94,46,88,48,"index"],[94,51,88,53],[94,52,88,54],[95,6,89,8,"layout"],[95,12,89,14],[95,13,89,15,"isWidthMeasured"],[95,28,89,30],[95,31,89,33],[95,35,89,37],[96,6,90,8,"layout"],[96,12,90,14],[96,13,90,15,"enforcedWidth"],[96,26,90,28],[96,29,90,31],[96,33,90,35],[97,4,91,4],[97,5,91,5],[98,4,92,4],[99,0,93,0],[100,0,94,0],[101,0,95,0],[102,4,96,4,"RVMasonryLayoutManagerImpl"],[102,30,96,30],[102,31,96,31,"prototype"],[102,40,96,40],[102,41,96,41,"handleSpanChange"],[102,57,96,57],[102,60,96,60],[102,70,96,70,"index"],[102,75,96,75],[102,77,96,77],[103,6,97,8],[103,10,97,12],[103,11,97,13,"fullRelayoutRequired"],[103,31,97,33],[103,34,97,36],[103,38,97,40],[104,4,98,4],[104,5,98,5],[105,4,99,4],[106,0,100,0],[107,0,101,0],[108,0,102,0],[109,4,103,4,"RVMasonryLayoutManagerImpl"],[109,30,103,30],[109,31,103,31,"prototype"],[109,40,103,40],[109,41,103,41,"getLayoutSize"],[109,54,103,54],[109,57,103,57],[109,69,103,69],[110,6,104,8],[110,10,104,12],[110,14,104,16],[110,15,104,17,"layouts"],[110,22,104,24],[110,23,104,25,"length"],[110,29,104,31],[110,34,104,36],[110,35,104,37],[110,37,105,12],[110,44,105,19],[111,8,105,21,"width"],[111,13,105,26],[111,15,105,28],[111,16,105,29],[112,8,105,31,"height"],[112,14,105,37],[112,16,105,39],[113,6,105,41],[113,7,105,42],[114,6,106,8],[115,6,107,8],[115,10,107,12,"maxHeight"],[115,19,107,21],[115,22,107,24,"Math"],[115,26,107,28],[115,27,107,29,"max"],[115,30,107,32],[115,31,107,33,"apply"],[115,36,107,38],[115,37,107,39,"Math"],[115,41,107,43],[115,43,107,45,"tslib_1"],[115,50,107,52],[115,51,107,53,"__spreadArray"],[115,64,107,66],[115,65,107,67],[115,67,107,69],[115,69,107,71,"tslib_1"],[115,76,107,78],[115,77,107,79,"__read"],[115,83,107,85],[115,84,107,86],[115,88,107,90],[115,89,107,91,"columnHeights"],[115,102,107,104],[115,103,107,105],[115,105,107,107],[115,110,107,112],[115,111,107,113],[115,112,107,114],[116,6,108,8],[116,13,108,15],[117,8,109,12,"width"],[117,13,109,17],[117,15,109,19],[117,19,109,23],[117,20,109,24,"boundedSize"],[117,31,109,35],[118,8,110,12,"height"],[118,14,110,18],[118,16,110,20,"maxHeight"],[119,6,111,8],[119,7,111,9],[120,4,112,4],[120,5,112,5],[121,4,113,4],[122,0,114,0],[123,0,115,0],[124,0,116,0],[125,0,117,0],[126,0,118,0],[127,4,119,4,"RVMasonryLayoutManagerImpl"],[127,30,119,30],[127,31,119,31,"prototype"],[127,40,119,40],[127,41,119,41,"recomputeLayouts"],[127,57,119,57],[127,60,119,60],[127,70,119,70,"startIndex"],[127,80,119,80],[127,82,119,82,"endIndex"],[127,90,119,90],[127,92,119,92],[128,6,120,8],[129,6,121,8],[129,10,121,12,"startIndex"],[129,20,121,22],[129,25,121,27],[129,26,121,28],[129,28,121,30],[130,8,122,12],[130,12,122,16],[130,13,122,17,"columnHeights"],[130,26,122,30],[130,29,122,33,"Array"],[130,34,122,38],[130,35,122,39],[130,39,122,43],[130,40,122,44,"maxColumns"],[130,50,122,54],[130,51,122,55],[130,52,122,56,"fill"],[130,56,122,60],[130,57,122,61],[130,58,122,62],[130,59,122,63],[131,8,123,12],[131,12,123,16],[131,13,123,17,"currentColumn"],[131,26,123,30],[131,29,123,33],[131,30,123,34],[132,6,124,8],[132,7,124,9],[132,13,125,13],[133,8,126,12],[134,8,127,12],[135,8,128,12],[135,12,128,16],[135,13,128,17,"updateColumnHeightsToIndex"],[135,39,128,43],[135,40,128,44,"startIndex"],[135,50,128,54],[135,51,128,55],[136,6,129,8],[137,6,130,8],[137,10,130,12,"itemCount"],[137,19,130,21],[137,22,130,24],[137,26,130,28],[137,27,130,29,"layouts"],[137,34,130,36],[137,35,130,37,"length"],[137,41,130,43],[138,6,131,8],[138,11,131,13],[138,15,131,17,"i"],[138,16,131,18],[138,19,131,21,"startIndex"],[138,29,131,31],[138,31,131,33,"i"],[138,32,131,34],[138,35,131,37,"itemCount"],[138,44,131,46],[138,46,131,48,"i"],[138,47,131,49],[138,49,131,51],[138,51,131,53],[139,8,132,12],[139,12,132,16,"layout"],[139,18,132,22],[139,21,132,25],[139,25,132,29],[139,26,132,30,"getLayout"],[139,35,132,39],[139,36,132,40,"i"],[139,37,132,41],[139,38,132,42],[140,8,133,12],[141,8,134,12],[141,12,134,16,"span"],[141,16,134,20],[141,19,134,23],[141,23,134,27],[141,24,134,28,"getSpan"],[141,31,134,35],[141,32,134,36,"i"],[141,33,134,37],[141,35,134,39],[141,39,134,43],[141,40,134,44],[142,8,135,12],[142,12,135,16],[142,16,135,20],[142,17,135,21,"optimizeItemArrangement"],[142,40,135,44],[142,42,135,46],[143,10,136,16],[143,14,136,20,"span"],[143,18,136,24],[143,23,136,29],[143,24,136,30],[143,26,136,32],[144,12,137,20],[145,12,138,20],[145,16,138,24],[145,17,138,25,"placeSingleColumnItem"],[145,38,138,46],[145,39,138,47,"layout"],[145,45,138,53],[145,46,138,54],[146,10,139,16],[146,11,139,17],[146,17,140,21],[147,12,141,20],[148,12,142,20],[148,16,142,24],[148,17,142,25,"placeOptimizedMultiColumnItem"],[148,46,142,54],[148,47,142,55,"layout"],[148,53,142,61],[148,55,142,63,"span"],[148,59,142,67],[148,60,142,68],[149,10,143,16],[150,8,144,12],[150,9,144,13],[150,15,145,17],[151,10,146,16],[152,10,147,16],[152,14,147,20],[152,15,147,21,"placeItemSequentially"],[152,36,147,42],[152,37,147,43,"layout"],[152,43,147,49],[152,45,147,51,"span"],[152,49,147,55],[152,50,147,56],[153,8,148,12],[154,6,149,8],[155,4,150,4],[155,5,150,5],[156,4,151,4],[157,0,152,0],[158,0,153,0],[159,0,154,0],[160,0,155,0],[161,4,156,4,"RVMasonryLayoutManagerImpl"],[161,30,156,30],[161,31,156,31,"prototype"],[161,40,156,40],[161,41,156,41,"getWidth"],[161,49,156,49],[161,52,156,52],[161,62,156,62,"index"],[161,67,156,67],[161,69,156,69],[162,6,157,8],[162,13,157,16],[162,17,157,20],[162,18,157,21,"boundedSize"],[162,29,157,32],[162,32,157,35],[162,36,157,39],[162,37,157,40,"maxColumns"],[162,47,157,50],[162,50,157,54],[162,54,157,58],[162,55,157,59,"getSpan"],[162,62,157,66],[162,63,157,67,"index"],[162,68,157,72],[162,69,157,73],[163,4,158,4],[163,5,158,5],[164,4,159,4,"RVMasonryLayoutManagerImpl"],[164,30,159,30],[164,31,159,31,"prototype"],[164,40,159,40],[164,41,159,41,"updateAllWidths"],[164,56,159,56],[164,59,159,59],[164,71,159,71],[165,6,160,8],[165,11,160,13],[165,15,160,17,"i"],[165,16,160,18],[165,19,160,21],[165,20,160,22],[165,22,160,24,"i"],[165,23,160,25],[165,26,160,28],[165,30,160,32],[165,31,160,33,"layouts"],[165,38,160,40],[165,39,160,41,"length"],[165,45,160,47],[165,47,160,49,"i"],[165,48,160,50],[165,50,160,52],[165,52,160,54],[166,8,161,12],[166,12,161,16],[166,13,161,17,"layouts"],[166,20,161,24],[166,21,161,25,"i"],[166,22,161,26],[166,23,161,27],[166,24,161,28,"width"],[166,29,161,33],[166,32,161,36],[166,36,161,40],[166,37,161,41,"getWidth"],[166,45,161,49],[166,46,161,50,"i"],[166,47,161,51],[166,48,161,52],[167,8,162,12],[167,12,162,16],[167,13,162,17,"layouts"],[167,20,162,24],[167,21,162,25,"i"],[167,22,162,26],[167,23,162,27],[167,24,162,28,"minHeight"],[167,33,162,37],[167,36,162,40,"undefined"],[167,45,162,49],[168,6,163,8],[169,4,164,4],[169,5,164,5],[170,4,165,4],[171,0,166,0],[172,0,167,0],[173,0,168,0],[174,0,169,0],[175,4,170,4,"RVMasonryLayoutManagerImpl"],[175,30,170,30],[175,31,170,31,"prototype"],[175,40,170,40],[175,41,170,41,"placeItemSequentially"],[175,62,170,62],[175,65,170,65],[175,75,170,75,"layout"],[175,81,170,81],[175,83,170,83,"span"],[175,87,170,87],[175,89,170,89],[176,6,171,8],[177,6,172,8],[177,10,172,12],[177,14,172,16],[177,15,172,17,"currentColumn"],[177,28,172,30],[177,31,172,33,"span"],[177,35,172,37],[177,38,172,40],[177,42,172,44],[177,43,172,45,"maxColumns"],[177,53,172,55],[177,55,172,57],[178,8,173,12],[179,8,174,12],[179,12,174,16],[179,13,174,17,"currentColumn"],[179,26,174,30],[179,29,174,33],[179,30,174,34],[180,6,175,8],[181,6,176,8],[182,6,177,8],[182,10,177,12,"maxHeight"],[182,19,177,21],[182,22,177,24],[182,26,177,28],[182,27,177,29,"columnHeights"],[182,40,177,42],[182,41,177,43],[182,45,177,47],[182,46,177,48,"currentColumn"],[182,59,177,61],[182,60,177,62],[183,6,178,8],[183,11,178,13],[183,15,178,17,"col"],[183,18,178,20],[183,21,178,23],[183,25,178,27],[183,26,178,28,"currentColumn"],[183,39,178,41],[183,42,178,44],[183,43,178,45],[183,45,178,47,"col"],[183,48,178,50],[183,51,178,53],[183,55,178,57],[183,56,178,58,"currentColumn"],[183,69,178,71],[183,72,178,74,"span"],[183,76,178,78],[183,78,178,80,"col"],[183,81,178,83],[183,83,178,85],[183,85,178,87],[184,8,179,12],[184,12,179,16,"col"],[184,15,179,19],[184,18,179,22],[184,22,179,26],[184,23,179,27,"maxColumns"],[184,33,179,37],[184,35,179,39],[185,10,180,16,"maxHeight"],[185,19,180,25],[185,22,180,28,"Math"],[185,26,180,32],[185,27,180,33,"max"],[185,30,180,36],[185,31,180,37,"maxHeight"],[185,40,180,46],[185,42,180,48],[185,46,180,52],[185,47,180,53,"columnHeights"],[185,60,180,66],[185,61,180,67,"col"],[185,64,180,70],[185,65,180,71],[185,66,180,72],[186,8,181,12],[187,6,182,8],[188,6,183,8],[189,6,184,8,"layout"],[189,12,184,14],[189,13,184,15,"x"],[189,14,184,16],[189,17,184,20],[189,21,184,24],[189,22,184,25,"boundedSize"],[189,33,184,36],[189,36,184,39],[189,40,184,43],[189,41,184,44,"maxColumns"],[189,51,184,54],[189,54,184,58],[189,58,184,62],[189,59,184,63,"currentColumn"],[189,72,184,76],[190,6,185,8,"layout"],[190,12,185,14],[190,13,185,15,"y"],[190,14,185,16],[190,17,185,19,"maxHeight"],[190,26,185,28],[191,6,186,8],[192,6,187,8],[192,11,187,13],[192,15,187,17,"col"],[192,18,187,20],[192,21,187,23],[192,25,187,27],[192,26,187,28,"currentColumn"],[192,39,187,41],[192,41,187,43,"col"],[192,44,187,46],[192,47,187,49],[192,51,187,53],[192,52,187,54,"currentColumn"],[192,65,187,67],[192,68,187,70,"span"],[192,72,187,74],[192,74,187,76,"col"],[192,77,187,79],[192,79,187,81],[192,81,187,83],[193,8,188,12],[193,12,188,16,"col"],[193,15,188,19],[193,18,188,22],[193,22,188,26],[193,23,188,27,"maxColumns"],[193,33,188,37],[193,35,188,39],[194,10,189,16],[194,14,189,20],[194,15,189,21,"columnHeights"],[194,28,189,34],[194,29,189,35,"col"],[194,32,189,38],[194,33,189,39],[194,36,189,42,"maxHeight"],[194,45,189,51],[194,48,189,54,"layout"],[194,54,189,60],[194,55,189,61,"height"],[194,61,189,67],[195,8,190,12],[196,6,191,8],[197,6,192,8],[198,6,193,8],[198,10,193,12],[198,11,193,13,"currentColumn"],[198,24,193,26],[198,28,193,30,"span"],[198,32,193,34],[199,6,194,8],[199,10,194,12],[199,14,194,16],[199,15,194,17,"currentColumn"],[199,28,194,30],[199,32,194,34],[199,36,194,38],[199,37,194,39,"maxColumns"],[199,47,194,49],[199,49,194,51],[200,8,195,12],[200,12,195,16],[200,13,195,17,"currentColumn"],[200,26,195,30],[200,29,195,33],[200,30,195,34],[201,6,196,8],[202,4,197,4],[202,5,197,5],[203,4,198,4],[204,0,199,0],[205,0,200,0],[206,0,201,0],[207,4,202,4,"RVMasonryLayoutManagerImpl"],[207,30,202,30],[207,31,202,31,"prototype"],[207,40,202,40],[207,41,202,41,"placeSingleColumnItem"],[207,62,202,62],[207,65,202,65],[207,75,202,75,"layout"],[207,81,202,81],[207,83,202,83],[208,6,203,8],[209,6,204,8],[209,10,204,12,"shortestColumnIndex"],[209,29,204,31],[209,32,204,34],[209,33,204,35],[210,6,205,8],[210,10,205,12,"minHeight"],[210,19,205,21],[210,22,205,24],[210,26,205,28],[210,27,205,29,"columnHeights"],[210,40,205,42],[210,41,205,43],[210,42,205,44],[210,43,205,45],[211,6,206,8],[211,11,206,13],[211,15,206,17,"i"],[211,16,206,18],[211,19,206,21],[211,20,206,22],[211,22,206,24,"i"],[211,23,206,25],[211,26,206,28],[211,30,206,32],[211,31,206,33,"maxColumns"],[211,41,206,43],[211,43,206,45,"i"],[211,44,206,46],[211,46,206,48],[211,48,206,50],[212,8,207,12],[212,12,207,16],[212,16,207,20],[212,17,207,21,"columnHeights"],[212,30,207,34],[212,31,207,35,"i"],[212,32,207,36],[212,33,207,37],[212,36,207,40,"minHeight"],[212,45,207,49],[212,47,207,51],[213,10,208,16,"minHeight"],[213,19,208,25],[213,22,208,28],[213,26,208,32],[213,27,208,33,"columnHeights"],[213,40,208,46],[213,41,208,47,"i"],[213,42,208,48],[213,43,208,49],[214,10,209,16,"shortestColumnIndex"],[214,29,209,35],[214,32,209,38,"i"],[214,33,209,39],[215,8,210,12],[216,6,211,8],[217,6,212,8],[218,6,213,8,"layout"],[218,12,213,14],[218,13,213,15,"x"],[218,14,213,16],[218,17,213,20],[218,21,213,24],[218,22,213,25,"boundedSize"],[218,33,213,36],[218,36,213,39],[218,40,213,43],[218,41,213,44,"maxColumns"],[218,51,213,54],[218,54,213,58,"shortestColumnIndex"],[218,73,213,77],[219,6,214,8,"layout"],[219,12,214,14],[219,13,214,15,"y"],[219,14,214,16],[219,17,214,19],[219,21,214,23],[219,22,214,24,"columnHeights"],[219,35,214,37],[219,36,214,38,"shortestColumnIndex"],[219,55,214,57],[219,56,214,58],[220,6,215,8],[221,6,216,8],[221,10,216,12],[221,11,216,13,"columnHeights"],[221,24,216,26],[221,25,216,27,"shortestColumnIndex"],[221,44,216,46],[221,45,216,47],[221,49,216,51,"layout"],[221,55,216,57],[221,56,216,58,"height"],[221,62,216,64],[222,4,217,4],[222,5,217,5],[223,4,218,4],[224,0,219,0],[225,0,220,0],[226,0,221,0],[227,0,222,0],[228,4,223,4,"RVMasonryLayoutManagerImpl"],[228,30,223,30],[228,31,223,31,"prototype"],[228,40,223,40],[228,41,223,41,"placeOptimizedMultiColumnItem"],[228,70,223,70],[228,73,223,73],[228,83,223,83,"layout"],[228,89,223,89],[228,91,223,91,"span"],[228,95,223,95],[228,97,223,97],[229,6,224,8],[229,10,224,12,"bestStartColumn"],[229,25,224,27],[229,28,224,30],[229,29,224,31],[230,6,225,8],[230,10,225,12,"minTotalHeight"],[230,24,225,26],[230,27,225,29,"Number"],[230,33,225,35],[230,34,225,36,"MAX_VALUE"],[230,43,225,45],[231,6,226,8],[232,6,227,8],[232,11,227,13],[232,15,227,17,"startCol"],[232,23,227,25],[232,26,227,28],[232,27,227,29],[232,29,227,31,"startCol"],[232,37,227,39],[232,41,227,43],[232,45,227,47],[232,46,227,48,"maxColumns"],[232,56,227,58],[232,59,227,61,"span"],[232,63,227,65],[232,65,227,67,"startCol"],[232,73,227,75],[232,75,227,77],[232,77,227,79],[233,8,228,12],[234,8,229,12],[234,12,229,16,"maxHeight_1"],[234,23,229,27],[234,26,229,30],[234,30,229,34],[234,31,229,35,"columnHeights"],[234,44,229,48],[234,45,229,49,"startCol"],[234,53,229,57],[234,54,229,58],[235,8,230,12],[235,13,230,17],[235,17,230,21,"col"],[235,20,230,24],[235,23,230,27,"startCol"],[235,31,230,35],[235,34,230,38],[235,35,230,39],[235,37,230,41,"col"],[235,40,230,44],[235,43,230,47,"startCol"],[235,51,230,55],[235,54,230,58,"span"],[235,58,230,62],[235,60,230,64,"col"],[235,63,230,67],[235,65,230,69],[235,67,230,71],[236,10,231,16,"maxHeight_1"],[236,21,231,27],[236,24,231,30,"Math"],[236,28,231,34],[236,29,231,35,"max"],[236,32,231,38],[236,33,231,39,"maxHeight_1"],[236,44,231,50],[236,46,231,52],[236,50,231,56],[236,51,231,57,"columnHeights"],[236,64,231,70],[236,65,231,71,"col"],[236,68,231,74],[236,69,231,75],[236,70,231,76],[237,8,232,12],[238,8,233,12],[239,8,234,12],[239,12,234,16,"totalHeight"],[239,23,234,27],[239,26,234,30],[239,27,234,31],[240,8,235,12],[240,13,235,17],[240,17,235,21,"col"],[240,20,235,24],[240,23,235,27],[240,24,235,28],[240,26,235,30,"col"],[240,29,235,33],[240,32,235,36],[240,36,235,40],[240,37,235,41,"maxColumns"],[240,47,235,51],[240,49,235,53,"col"],[240,52,235,56],[240,54,235,58],[240,56,235,60],[241,10,236,16],[241,14,236,20,"col"],[241,17,236,23],[241,21,236,27,"startCol"],[241,29,236,35],[241,33,236,39,"col"],[241,36,236,42],[241,39,236,45,"startCol"],[241,47,236,53],[241,50,236,56,"span"],[241,54,236,60],[241,56,236,62],[242,12,237,20,"totalHeight"],[242,23,237,31],[242,27,237,35,"maxHeight_1"],[242,38,237,46],[242,41,237,49,"layout"],[242,47,237,55],[242,48,237,56,"height"],[242,54,237,62],[243,10,238,16],[243,11,238,17],[243,17,239,21],[244,12,240,20,"totalHeight"],[244,23,240,31],[244,27,240,35],[244,31,240,39],[244,32,240,40,"columnHeights"],[244,45,240,53],[244,46,240,54,"col"],[244,49,240,57],[244,50,240,58],[245,10,241,16],[246,8,242,12],[247,8,243,12],[248,8,244,12],[248,12,244,16,"totalHeight"],[248,23,244,27],[248,26,244,30,"minTotalHeight"],[248,40,244,44],[248,42,244,46],[249,10,245,16,"minTotalHeight"],[249,24,245,30],[249,27,245,33,"totalHeight"],[249,38,245,44],[250,10,246,16,"bestStartColumn"],[250,25,246,31],[250,28,246,34,"startCol"],[250,36,246,42],[251,8,247,12],[252,6,248,8],[253,6,249,8],[254,6,250,8],[254,10,250,12,"maxHeight"],[254,19,250,21],[254,22,250,24,"Math"],[254,26,250,28],[254,27,250,29,"max"],[254,30,250,32],[254,31,250,33,"apply"],[254,36,250,38],[254,37,250,39,"Math"],[254,41,250,43],[254,43,250,45,"tslib_1"],[254,50,250,52],[254,51,250,53,"__spreadArray"],[254,64,250,66],[254,65,250,67],[254,67,250,69],[254,69,250,71,"tslib_1"],[254,76,250,78],[254,77,250,79,"__read"],[254,83,250,85],[254,84,250,86],[254,88,250,90],[254,89,250,91,"columnHeights"],[254,102,250,104],[254,103,250,105,"slice"],[254,108,250,110],[254,109,250,111,"bestStartColumn"],[254,124,250,126],[254,126,250,128,"bestStartColumn"],[254,141,250,143],[254,144,250,146,"span"],[254,148,250,150],[254,149,250,151],[254,150,250,152],[254,152,250,154],[254,157,250,159],[254,158,250,160],[254,159,250,161],[255,6,251,8,"layout"],[255,12,251,14],[255,13,251,15,"x"],[255,14,251,16],[255,17,251,20],[255,21,251,24],[255,22,251,25,"boundedSize"],[255,33,251,36],[255,36,251,39],[255,40,251,43],[255,41,251,44,"maxColumns"],[255,51,251,54],[255,54,251,58,"bestStartColumn"],[255,69,251,73],[256,6,252,8,"layout"],[256,12,252,14],[256,13,252,15,"y"],[256,14,252,16],[256,17,252,19,"maxHeight"],[256,26,252,28],[257,6,253,8],[258,6,254,8],[258,11,254,13],[258,15,254,17,"col"],[258,18,254,20],[258,21,254,23,"bestStartColumn"],[258,36,254,38],[258,38,254,40,"col"],[258,41,254,43],[258,44,254,46,"bestStartColumn"],[258,59,254,61],[258,62,254,64,"span"],[258,66,254,68],[258,68,254,70,"col"],[258,71,254,73],[258,73,254,75],[258,75,254,77],[259,8,255,12],[259,12,255,16],[259,13,255,17,"columnHeights"],[259,26,255,30],[259,27,255,31,"col"],[259,30,255,34],[259,31,255,35],[259,34,255,38,"maxHeight"],[259,43,255,47],[259,46,255,50,"layout"],[259,52,255,56],[259,53,255,57,"height"],[259,59,255,63],[260,6,256,8],[261,4,257,4],[261,5,257,5],[262,4,258,4],[263,0,259,0],[264,0,260,0],[265,0,261,0],[266,4,262,4,"RVMasonryLayoutManagerImpl"],[266,30,262,30],[266,31,262,31,"prototype"],[266,40,262,40],[266,41,262,41,"updateColumnHeightsToIndex"],[266,67,262,67],[266,70,262,70],[266,80,262,80,"index"],[266,85,262,85],[266,87,262,87],[267,6,263,8],[268,6,264,8],[268,10,264,12],[268,11,264,13,"columnHeights"],[268,24,264,26],[268,27,264,29,"Array"],[268,32,264,34],[268,33,264,35],[268,37,264,39],[268,38,264,40,"maxColumns"],[268,48,264,50],[268,49,264,51],[268,50,264,52,"fill"],[268,54,264,56],[268,55,264,57],[268,56,264,58],[268,57,264,59],[269,6,265,8],[269,10,265,12],[269,11,265,13,"currentColumn"],[269,24,265,26],[269,27,265,29],[269,28,265,30],[270,6,266,8],[271,6,267,8],[271,11,267,13],[271,15,267,17,"i"],[271,16,267,18],[271,19,267,21],[271,20,267,22],[271,22,267,24,"i"],[271,23,267,25],[271,26,267,28,"index"],[271,31,267,33],[271,33,267,35,"i"],[271,34,267,36],[271,36,267,38],[271,38,267,40],[272,8,268,12],[272,12,268,16,"layout"],[272,18,268,22],[272,21,268,25],[272,25,268,29],[272,26,268,30,"layouts"],[272,33,268,37],[272,34,268,38,"i"],[272,35,268,39],[272,36,268,40],[273,8,269,12],[273,12,269,16,"itemWidth"],[273,21,269,25],[273,24,269,28,"layout"],[273,30,269,34],[273,31,269,35,"width"],[273,36,269,40],[274,8,270,12],[274,12,270,16,"columnWidth"],[274,23,270,27],[274,26,270,30],[274,30,270,34],[274,31,270,35,"boundedSize"],[274,42,270,46],[274,45,270,49],[274,49,270,53],[274,50,270,54,"maxColumns"],[274,60,270,64],[275,8,271,12],[275,12,271,16,"span"],[275,16,271,20],[275,19,271,23,"Math"],[275,23,271,27],[275,24,271,28,"round"],[275,29,271,33],[275,30,271,34,"itemWidth"],[275,39,271,43],[275,42,271,46,"columnWidth"],[275,53,271,57],[275,54,271,58],[276,8,272,12],[277,8,273,12],[277,12,273,16,"startColumn"],[277,23,273,27],[277,26,273,30,"Math"],[277,30,273,34],[277,31,273,35,"round"],[277,36,273,40],[277,37,273,41,"layout"],[277,43,273,47],[277,44,273,48,"x"],[277,45,273,49],[277,48,273,52,"columnWidth"],[277,59,273,63],[277,60,273,64],[278,8,274,12],[278,12,274,16,"endColumn"],[278,21,274,25],[278,24,274,28,"Math"],[278,28,274,32],[278,29,274,33,"min"],[278,32,274,36],[278,33,274,37,"startColumn"],[278,44,274,48],[278,47,274,51,"span"],[278,51,274,55],[278,53,274,57],[278,57,274,61],[278,58,274,62,"maxColumns"],[278,68,274,72],[278,69,274,73],[279,8,275,12],[280,8,276,12],[280,13,276,17],[280,17,276,21,"col"],[280,20,276,24],[280,23,276,27,"startColumn"],[280,34,276,38],[280,36,276,40,"col"],[280,39,276,43],[280,42,276,46,"endColumn"],[280,51,276,55],[280,53,276,57,"col"],[280,56,276,60],[280,58,276,62],[280,60,276,64],[281,10,277,16],[281,14,277,20],[281,15,277,21,"columnHeights"],[281,28,277,34],[281,29,277,35,"col"],[281,32,277,38],[281,33,277,39],[281,36,277,42,"Math"],[281,40,277,46],[281,41,277,47,"max"],[281,44,277,50],[281,45,277,51],[281,49,277,55],[281,50,277,56,"columnHeights"],[281,63,277,69],[281,64,277,70,"col"],[281,67,277,73],[281,68,277,74],[281,70,277,76,"layout"],[281,76,277,82],[281,77,277,83,"y"],[281,78,277,84],[281,81,277,87,"layout"],[281,87,277,93],[281,88,277,94,"height"],[281,94,277,100],[281,95,277,101],[282,8,278,12],[283,8,279,12],[284,8,280,12],[284,12,280,16],[284,13,280,17],[284,17,280,21],[284,18,280,22,"optimizeItemArrangement"],[284,41,280,45],[284,43,280,47],[285,10,281,16],[285,14,281,20],[285,15,281,21,"currentColumn"],[285,28,281,34],[285,31,281,37],[285,32,281,38,"startColumn"],[285,43,281,49],[285,46,281,52,"span"],[285,50,281,56],[285,54,281,60],[285,58,281,64],[285,59,281,65,"maxColumns"],[285,69,281,75],[286,8,282,12],[287,6,283,8],[288,4,284,4],[288,5,284,5],[289,4,285,4],[289,11,285,11,"RVMasonryLayoutManagerImpl"],[289,37,285,37],[290,2,286,0],[290,3,286,1],[290,4,286,2,"LayoutManager_1"],[290,19,286,17],[290,20,286,18,"RVLayoutManager"],[290,35,286,33],[290,36,286,35],[291,2,287,0,"exports"],[291,9,287,7],[291,10,287,8,"RVMasonryLayoutManagerImpl"],[291,36,287,34],[291,39,287,37,"RVMasonryLayoutManagerImpl"],[291,65,287,63],[292,0,287,64],[292,3]],"functionMap":{"names":["<global>","<anonymous>","RVMasonryLayoutManagerImpl","RVMasonryLayoutManagerImpl.prototype.updateLayoutParams","RVMasonryLayoutManagerImpl.prototype.processLayoutInfo","RVMasonryLayoutManagerImpl.prototype.estimateLayout","RVMasonryLayoutManagerImpl.prototype.handleSpanChange","RVMasonryLayoutManagerImpl.prototype.getLayoutSize","RVMasonryLayoutManagerImpl.prototype.recomputeLayouts","RVMasonryLayoutManagerImpl.prototype.getWidth","RVMasonryLayoutManagerImpl.prototype.updateAllWidths","RVMasonryLayoutManagerImpl.prototype.placeItemSequentially","RVMasonryLayoutManagerImpl.prototype.placeSingleColumnItem","RVMasonryLayoutManagerImpl.prototype.placeOptimizedMultiColumnItem","RVMasonryLayoutManagerImpl.prototype.updateColumnHeightsToIndex"],"mappings":"AAA;gDCU;ICE;KDW;8DEK;KFgB;6DGM;KH2B;0DIM;KJO;4DKK;KLE;yDMK;KNS;4DOO;KP+B;oDQM;KRE;2DSC;KTK;iEUM;KV2B;iEWK;KXe;yEYM;KZkC;sEaK;KbsB;CDE"},"hasCjsExports":true},"type":"js/module"}]}