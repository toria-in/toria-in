{"dependencies":[{"name":"tslib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":14,"index":133},"end":{"line":4,"column":30,"index":149}}],"key":"vm88vOsSPZItrLOmMEyUuGkd1y4=","exportNames":["*"],"imports":1}},{"name":"./LayoutManager","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":22,"index":173},"end":{"line":5,"column":48,"index":199}}],"key":"zvYNKl5We8eXKq0On0iqzaQXh50=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.RVGridLayoutManagerImpl = void 0;\n  var tslib_1 = require(_dependencyMap[0], \"tslib\");\n  var LayoutManager_1 = require(_dependencyMap[1], \"./LayoutManager\");\n  /**\n   * GridLayoutManager implementation that arranges items in a grid pattern.\n   * Items are placed in rows and columns, with support for items spanning multiple columns.\n   */\n  var RVGridLayoutManagerImpl = /** @class */function (_super) {\n    tslib_1.__extends(RVGridLayoutManagerImpl, _super);\n    function RVGridLayoutManagerImpl(params, previousLayoutManager) {\n      var _this = _super.call(this, params, previousLayoutManager) || this;\n      /** If there's a span change for grid layout, we need to recompute all the widths */\n      _this.fullRelayoutRequired = false;\n      _this.boundedSize = params.windowSize.width;\n      return _this;\n    }\n    /**\n     * Updates layout parameters and triggers recomputation if necessary.\n     * @param params New layout parameters\n     */\n    RVGridLayoutManagerImpl.prototype.updateLayoutParams = function (params) {\n      var prevNumColumns = this.maxColumns;\n      _super.prototype.updateLayoutParams.call(this, params);\n      if (this.boundedSize !== params.windowSize.width || prevNumColumns !== params.maxColumns) {\n        this.boundedSize = params.windowSize.width;\n        if (this.layouts.length > 0) {\n          // update all widths\n          this.updateAllWidths();\n          this.recomputeLayouts(0, this.layouts.length - 1);\n          this.requiresRepaint = true;\n        }\n      }\n    };\n    /**\n     * Processes layout information for items, updating their dimensions.\n     * @param layoutInfo Array of layout information for items\n     * @param itemCount Total number of items in the list\n     */\n    RVGridLayoutManagerImpl.prototype.processLayoutInfo = function (layoutInfo, itemCount) {\n      var e_1, _a;\n      try {\n        for (var layoutInfo_1 = tslib_1.__values(layoutInfo), layoutInfo_1_1 = layoutInfo_1.next(); !layoutInfo_1_1.done; layoutInfo_1_1 = layoutInfo_1.next()) {\n          var info = layoutInfo_1_1.value;\n          var index = info.index,\n            dimensions = info.dimensions;\n          var layout = this.layouts[index];\n          layout.height = dimensions.height;\n          layout.isHeightMeasured = true;\n          layout.isWidthMeasured = true;\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (layoutInfo_1_1 && !layoutInfo_1_1.done && (_a = layoutInfo_1.return)) _a.call(layoutInfo_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      // TODO: Can be optimized\n      if (this.fullRelayoutRequired) {\n        this.updateAllWidths();\n        this.fullRelayoutRequired = false;\n        return 0;\n      }\n    };\n    /**\n     * Estimates layout dimensions for an item at the given index.\n     * @param index Index of the item to estimate layout for\n     */\n    RVGridLayoutManagerImpl.prototype.estimateLayout = function (index) {\n      var layout = this.layouts[index];\n      layout.width = this.getWidth(index);\n      layout.height = this.getEstimatedHeight(index);\n      layout.isWidthMeasured = true;\n      layout.enforcedWidth = true;\n    };\n    /**\n     * Handles span change for an item.\n     * @param index Index of the item\n     */\n    RVGridLayoutManagerImpl.prototype.handleSpanChange = function (index) {\n      this.fullRelayoutRequired = true;\n    };\n    /**\n     * Returns the total size of the layout area.\n     * @returns RVDimension containing width and height of the layout\n     */\n    RVGridLayoutManagerImpl.prototype.getLayoutSize = function () {\n      if (this.layouts.length === 0) return {\n        width: 0,\n        height: 0\n      };\n      var totalHeight = this.computeTotalHeightTillRow(this.layouts.length - 1);\n      return {\n        width: this.boundedSize,\n        height: totalHeight\n      };\n    };\n    /**\n     * Recomputes layouts for items in the given range.\n     * @param startIndex Starting index of items to recompute\n     * @param endIndex Ending index of items to recompute\n     */\n    RVGridLayoutManagerImpl.prototype.recomputeLayouts = function (startIndex, endIndex) {\n      var newStartIndex = this.locateFirstIndexInRow(Math.max(0, startIndex - 1));\n      var startVal = this.getLayout(newStartIndex);\n      var startX = startVal.x;\n      var startY = startVal.y;\n      for (var i = newStartIndex; i <= endIndex; i++) {\n        var layout = this.getLayout(i);\n        if (!this.checkBounds(startX, layout.width)) {\n          var tallestItem = this.processAndReturnTallestItemInRow(i - 1);\n          startY = tallestItem.y + tallestItem.height;\n          startX = 0;\n        }\n        layout.x = startX;\n        layout.y = startY;\n        startX += layout.width;\n      }\n      if (endIndex === this.layouts.length - 1) {\n        this.processAndReturnTallestItemInRow(endIndex);\n      }\n    };\n    /**\n     * Calculates the width of an item based on its span.\n     * @param index Index of the item\n     * @returns Width of the item\n     */\n    RVGridLayoutManagerImpl.prototype.getWidth = function (index) {\n      return this.boundedSize / this.maxColumns * this.getSpan(index);\n    };\n    /**\n     * Processes items in a row and returns the tallest item.\n     * Also handles height normalization for items in the same row.\n     * Tallest item per row helps in forcing tallest items height on neighbouring items.\n     * @param endIndex Index of the last item in the row\n     * @returns The tallest item in the row\n     */\n    RVGridLayoutManagerImpl.prototype.processAndReturnTallestItemInRow = function (endIndex) {\n      var _a, _b;\n      var startIndex = this.locateFirstIndexInRow(endIndex);\n      var tallestItem;\n      var maxHeight = 0;\n      var i = startIndex;\n      var isMeasured = false;\n      while (i <= endIndex) {\n        var layout = this.layouts[i];\n        isMeasured = isMeasured || Boolean(layout.isHeightMeasured);\n        maxHeight = Math.max(maxHeight, layout.height);\n        if (layout.height > ((_a = layout.minHeight) !== null && _a !== void 0 ? _a : 0) && layout.height > ((_b = tallestItem === null || tallestItem === void 0 ? void 0 : tallestItem.height) !== null && _b !== void 0 ? _b : 0)) {\n          tallestItem = layout;\n        }\n        i++;\n        if (i >= this.layouts.length) {\n          break;\n        }\n      }\n      if (!tallestItem && maxHeight > 0) {\n        maxHeight = Number.MAX_SAFE_INTEGER;\n      }\n      tallestItem = tallestItem !== null && tallestItem !== void 0 ? tallestItem : this.layouts[startIndex];\n      if (!isMeasured) {\n        return tallestItem;\n      }\n      if (tallestItem) {\n        var targetHeight = tallestItem.height;\n        if (maxHeight - tallestItem.height > 1) {\n          targetHeight = 0;\n          this.requiresRepaint = true;\n        }\n        i = startIndex;\n        while (i <= endIndex) {\n          this.layouts[i].minHeight = targetHeight;\n          if (targetHeight > 0) {\n            this.layouts[i].height = targetHeight;\n          }\n          i++;\n          if (i >= this.layouts.length) {\n            break;\n          }\n        }\n        tallestItem.minHeight = 0;\n      }\n      return tallestItem;\n    };\n    /**\n     * Computes the total height of the layout.\n     * @param endIndex Index of the last item in the row\n     * @returns Total height of the layout\n     */\n    RVGridLayoutManagerImpl.prototype.computeTotalHeightTillRow = function (endIndex) {\n      var startIndex = this.locateFirstIndexInRow(endIndex);\n      var y = this.layouts[startIndex].y;\n      var maxHeight = 0;\n      var i = startIndex;\n      while (i <= endIndex) {\n        maxHeight = Math.max(maxHeight, this.layouts[i].height);\n        i++;\n        if (i >= this.layouts.length) {\n          break;\n        }\n      }\n      return y + maxHeight;\n    };\n    RVGridLayoutManagerImpl.prototype.updateAllWidths = function () {\n      for (var i = 0; i < this.layouts.length; i++) {\n        this.layouts[i].width = this.getWidth(i);\n      }\n    };\n    /**\n     * Checks if an item can fit within the bounded width.\n     * @param itemX Starting X position of the item\n     * @param width Width of the item\n     * @returns True if the item fits within bounds\n     */\n    RVGridLayoutManagerImpl.prototype.checkBounds = function (itemX, width) {\n      return itemX + width <= this.boundedSize + 0.9;\n    };\n    /**\n     * Locates the index of the first item in the current row.\n     * @param itemIndex Index to start searching from\n     * @returns Index of the first item in the row\n     */\n    RVGridLayoutManagerImpl.prototype.locateFirstIndexInRow = function (itemIndex) {\n      if (itemIndex === 0) {\n        return 0;\n      }\n      var i = itemIndex;\n      for (; i >= 0; i--) {\n        if (this.layouts[i].x === 0) {\n          break;\n        }\n      }\n      return Math.max(i, 0);\n    };\n    return RVGridLayoutManagerImpl;\n  }(LayoutManager_1.RVLayoutManager);\n  exports.RVGridLayoutManagerImpl = RVGridLayoutManagerImpl;\n});","lineCount":248,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"RVGridLayoutManagerImpl"],[7,33,3,31],[7,36,3,34],[7,41,3,39],[7,42,3,40],[8,2,4,0],[8,6,4,4,"tslib_1"],[8,13,4,11],[8,16,4,14,"require"],[8,23,4,21],[8,24,4,21,"_dependencyMap"],[8,38,4,21],[8,50,4,29],[8,51,4,30],[9,2,5,0],[9,6,5,4,"LayoutManager_1"],[9,21,5,19],[9,24,5,22,"require"],[9,31,5,29],[9,32,5,29,"_dependencyMap"],[9,46,5,29],[9,68,5,47],[9,69,5,48],[10,2,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,2,10,0],[14,6,10,4,"RVGridLayoutManagerImpl"],[14,29,10,27],[14,32,10,30],[14,45,10,45],[14,55,10,55,"_super"],[14,61,10,61],[14,63,10,63],[15,4,11,4,"tslib_1"],[15,11,11,11],[15,12,11,12,"__extends"],[15,21,11,21],[15,22,11,22,"RVGridLayoutManagerImpl"],[15,45,11,45],[15,47,11,47,"_super"],[15,53,11,53],[15,54,11,54],[16,4,12,4],[16,13,12,13,"RVGridLayoutManagerImpl"],[16,36,12,36,"RVGridLayoutManagerImpl"],[16,37,12,37,"params"],[16,43,12,43],[16,45,12,45,"previousLayoutManager"],[16,66,12,66],[16,68,12,68],[17,6,13,8],[17,10,13,12,"_this"],[17,15,13,17],[17,18,13,20,"_super"],[17,24,13,26],[17,25,13,27,"call"],[17,29,13,31],[17,30,13,32],[17,34,13,36],[17,36,13,38,"params"],[17,42,13,44],[17,44,13,46,"previousLayoutManager"],[17,65,13,67],[17,66,13,68],[17,70,13,72],[17,74,13,76],[18,6,14,8],[19,6,15,8,"_this"],[19,11,15,13],[19,12,15,14,"fullRelayoutRequired"],[19,32,15,34],[19,35,15,37],[19,40,15,42],[20,6,16,8,"_this"],[20,11,16,13],[20,12,16,14,"boundedSize"],[20,23,16,25],[20,26,16,28,"params"],[20,32,16,34],[20,33,16,35,"windowSize"],[20,43,16,45],[20,44,16,46,"width"],[20,49,16,51],[21,6,17,8],[21,13,17,15,"_this"],[21,18,17,20],[22,4,18,4],[23,4,19,4],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,4,23,4,"RVGridLayoutManagerImpl"],[27,27,23,27],[27,28,23,28,"prototype"],[27,37,23,37],[27,38,23,38,"updateLayoutParams"],[27,56,23,56],[27,59,23,59],[27,69,23,69,"params"],[27,75,23,75],[27,77,23,77],[28,6,24,8],[28,10,24,12,"prevNumColumns"],[28,24,24,26],[28,27,24,29],[28,31,24,33],[28,32,24,34,"maxColumns"],[28,42,24,44],[29,6,25,8,"_super"],[29,12,25,14],[29,13,25,15,"prototype"],[29,22,25,24],[29,23,25,25,"updateLayoutParams"],[29,41,25,43],[29,42,25,44,"call"],[29,46,25,48],[29,47,25,49],[29,51,25,53],[29,53,25,55,"params"],[29,59,25,61],[29,60,25,62],[30,6,26,8],[30,10,26,12],[30,14,26,16],[30,15,26,17,"boundedSize"],[30,26,26,28],[30,31,26,33,"params"],[30,37,26,39],[30,38,26,40,"windowSize"],[30,48,26,50],[30,49,26,51,"width"],[30,54,26,56],[30,58,27,12,"prevNumColumns"],[30,72,27,26],[30,77,27,31,"params"],[30,83,27,37],[30,84,27,38,"maxColumns"],[30,94,27,48],[30,96,27,50],[31,8,28,12],[31,12,28,16],[31,13,28,17,"boundedSize"],[31,24,28,28],[31,27,28,31,"params"],[31,33,28,37],[31,34,28,38,"windowSize"],[31,44,28,48],[31,45,28,49,"width"],[31,50,28,54],[32,8,29,12],[32,12,29,16],[32,16,29,20],[32,17,29,21,"layouts"],[32,24,29,28],[32,25,29,29,"length"],[32,31,29,35],[32,34,29,38],[32,35,29,39],[32,37,29,41],[33,10,30,16],[34,10,31,16],[34,14,31,20],[34,15,31,21,"updateAllWidths"],[34,30,31,36],[34,31,31,37],[34,32,31,38],[35,10,32,16],[35,14,32,20],[35,15,32,21,"recomputeLayouts"],[35,31,32,37],[35,32,32,38],[35,33,32,39],[35,35,32,41],[35,39,32,45],[35,40,32,46,"layouts"],[35,47,32,53],[35,48,32,54,"length"],[35,54,32,60],[35,57,32,63],[35,58,32,64],[35,59,32,65],[36,10,33,16],[36,14,33,20],[36,15,33,21,"requiresRepaint"],[36,30,33,36],[36,33,33,39],[36,37,33,43],[37,8,34,12],[38,6,35,8],[39,4,36,4],[39,5,36,5],[40,4,37,4],[41,0,38,0],[42,0,39,0],[43,0,40,0],[44,0,41,0],[45,4,42,4,"RVGridLayoutManagerImpl"],[45,27,42,27],[45,28,42,28,"prototype"],[45,37,42,37],[45,38,42,38,"processLayoutInfo"],[45,55,42,55],[45,58,42,58],[45,68,42,68,"layoutInfo"],[45,78,42,78],[45,80,42,80,"itemCount"],[45,89,42,89],[45,91,42,91],[46,6,43,8],[46,10,43,12,"e_1"],[46,13,43,15],[46,15,43,17,"_a"],[46,17,43,19],[47,6,44,8],[47,10,44,12],[48,8,45,12],[48,13,45,17],[48,17,45,21,"layoutInfo_1"],[48,29,45,33],[48,32,45,36,"tslib_1"],[48,39,45,43],[48,40,45,44,"__values"],[48,48,45,52],[48,49,45,53,"layoutInfo"],[48,59,45,63],[48,60,45,64],[48,62,45,66,"layoutInfo_1_1"],[48,76,45,80],[48,79,45,83,"layoutInfo_1"],[48,91,45,95],[48,92,45,96,"next"],[48,96,45,100],[48,97,45,101],[48,98,45,102],[48,100,45,104],[48,101,45,105,"layoutInfo_1_1"],[48,115,45,119],[48,116,45,120,"done"],[48,120,45,124],[48,122,45,126,"layoutInfo_1_1"],[48,136,45,140],[48,139,45,143,"layoutInfo_1"],[48,151,45,155],[48,152,45,156,"next"],[48,156,45,160],[48,157,45,161],[48,158,45,162],[48,160,45,164],[49,10,46,16],[49,14,46,20,"info"],[49,18,46,24],[49,21,46,27,"layoutInfo_1_1"],[49,35,46,41],[49,36,46,42,"value"],[49,41,46,47],[50,10,47,16],[50,14,47,20,"index"],[50,19,47,25],[50,22,47,28,"info"],[50,26,47,32],[50,27,47,33,"index"],[50,32,47,38],[51,12,47,40,"dimensions"],[51,22,47,50],[51,25,47,53,"info"],[51,29,47,57],[51,30,47,58,"dimensions"],[51,40,47,68],[52,10,48,16],[52,14,48,20,"layout"],[52,20,48,26],[52,23,48,29],[52,27,48,33],[52,28,48,34,"layouts"],[52,35,48,41],[52,36,48,42,"index"],[52,41,48,47],[52,42,48,48],[53,10,49,16,"layout"],[53,16,49,22],[53,17,49,23,"height"],[53,23,49,29],[53,26,49,32,"dimensions"],[53,36,49,42],[53,37,49,43,"height"],[53,43,49,49],[54,10,50,16,"layout"],[54,16,50,22],[54,17,50,23,"isHeightMeasured"],[54,33,50,39],[54,36,50,42],[54,40,50,46],[55,10,51,16,"layout"],[55,16,51,22],[55,17,51,23,"isWidthMeasured"],[55,32,51,38],[55,35,51,41],[55,39,51,45],[56,8,52,12],[57,6,53,8],[57,7,53,9],[57,8,54,8],[57,15,54,15,"e_1_1"],[57,20,54,20],[57,22,54,22],[58,8,54,24,"e_1"],[58,11,54,27],[58,14,54,30],[59,10,54,32,"error"],[59,15,54,37],[59,17,54,39,"e_1_1"],[60,8,54,45],[60,9,54,46],[61,6,54,48],[61,7,54,49],[61,16,55,16],[62,8,56,12],[62,12,56,16],[63,10,57,16],[63,14,57,20,"layoutInfo_1_1"],[63,28,57,34],[63,32,57,38],[63,33,57,39,"layoutInfo_1_1"],[63,47,57,53],[63,48,57,54,"done"],[63,52,57,58],[63,57,57,63,"_a"],[63,59,57,65],[63,62,57,68,"layoutInfo_1"],[63,74,57,80],[63,75,57,81,"return"],[63,81,57,87],[63,82,57,88],[63,84,57,90,"_a"],[63,86,57,92],[63,87,57,93,"call"],[63,91,57,97],[63,92,57,98,"layoutInfo_1"],[63,104,57,110],[63,105,57,111],[64,8,58,12],[64,9,58,13],[64,18,59,20],[65,10,59,22],[65,14,59,26,"e_1"],[65,17,59,29],[65,19,59,31],[65,25,59,37,"e_1"],[65,28,59,40],[65,29,59,41,"error"],[65,34,59,46],[66,8,59,48],[67,6,60,8],[68,6,61,8],[69,6,62,8],[69,10,62,12],[69,14,62,16],[69,15,62,17,"fullRelayoutRequired"],[69,35,62,37],[69,37,62,39],[70,8,63,12],[70,12,63,16],[70,13,63,17,"updateAllWidths"],[70,28,63,32],[70,29,63,33],[70,30,63,34],[71,8,64,12],[71,12,64,16],[71,13,64,17,"fullRelayoutRequired"],[71,33,64,37],[71,36,64,40],[71,41,64,45],[72,8,65,12],[72,15,65,19],[72,16,65,20],[73,6,66,8],[74,4,67,4],[74,5,67,5],[75,4,68,4],[76,0,69,0],[77,0,70,0],[78,0,71,0],[79,4,72,4,"RVGridLayoutManagerImpl"],[79,27,72,27],[79,28,72,28,"prototype"],[79,37,72,37],[79,38,72,38,"estimateLayout"],[79,52,72,52],[79,55,72,55],[79,65,72,65,"index"],[79,70,72,70],[79,72,72,72],[80,6,73,8],[80,10,73,12,"layout"],[80,16,73,18],[80,19,73,21],[80,23,73,25],[80,24,73,26,"layouts"],[80,31,73,33],[80,32,73,34,"index"],[80,37,73,39],[80,38,73,40],[81,6,74,8,"layout"],[81,12,74,14],[81,13,74,15,"width"],[81,18,74,20],[81,21,74,23],[81,25,74,27],[81,26,74,28,"getWidth"],[81,34,74,36],[81,35,74,37,"index"],[81,40,74,42],[81,41,74,43],[82,6,75,8,"layout"],[82,12,75,14],[82,13,75,15,"height"],[82,19,75,21],[82,22,75,24],[82,26,75,28],[82,27,75,29,"getEstimatedHeight"],[82,45,75,47],[82,46,75,48,"index"],[82,51,75,53],[82,52,75,54],[83,6,76,8,"layout"],[83,12,76,14],[83,13,76,15,"isWidthMeasured"],[83,28,76,30],[83,31,76,33],[83,35,76,37],[84,6,77,8,"layout"],[84,12,77,14],[84,13,77,15,"enforcedWidth"],[84,26,77,28],[84,29,77,31],[84,33,77,35],[85,4,78,4],[85,5,78,5],[86,4,79,4],[87,0,80,0],[88,0,81,0],[89,0,82,0],[90,4,83,4,"RVGridLayoutManagerImpl"],[90,27,83,27],[90,28,83,28,"prototype"],[90,37,83,37],[90,38,83,38,"handleSpanChange"],[90,54,83,54],[90,57,83,57],[90,67,83,67,"index"],[90,72,83,72],[90,74,83,74],[91,6,84,8],[91,10,84,12],[91,11,84,13,"fullRelayoutRequired"],[91,31,84,33],[91,34,84,36],[91,38,84,40],[92,4,85,4],[92,5,85,5],[93,4,86,4],[94,0,87,0],[95,0,88,0],[96,0,89,0],[97,4,90,4,"RVGridLayoutManagerImpl"],[97,27,90,27],[97,28,90,28,"prototype"],[97,37,90,37],[97,38,90,38,"getLayoutSize"],[97,51,90,51],[97,54,90,54],[97,66,90,66],[98,6,91,8],[98,10,91,12],[98,14,91,16],[98,15,91,17,"layouts"],[98,22,91,24],[98,23,91,25,"length"],[98,29,91,31],[98,34,91,36],[98,35,91,37],[98,37,92,12],[98,44,92,19],[99,8,92,21,"width"],[99,13,92,26],[99,15,92,28],[99,16,92,29],[100,8,92,31,"height"],[100,14,92,37],[100,16,92,39],[101,6,92,41],[101,7,92,42],[102,6,93,8],[102,10,93,12,"totalHeight"],[102,21,93,23],[102,24,93,26],[102,28,93,30],[102,29,93,31,"computeTotalHeightTillRow"],[102,54,93,56],[102,55,93,57],[102,59,93,61],[102,60,93,62,"layouts"],[102,67,93,69],[102,68,93,70,"length"],[102,74,93,76],[102,77,93,79],[102,78,93,80],[102,79,93,81],[103,6,94,8],[103,13,94,15],[104,8,95,12,"width"],[104,13,95,17],[104,15,95,19],[104,19,95,23],[104,20,95,24,"boundedSize"],[104,31,95,35],[105,8,96,12,"height"],[105,14,96,18],[105,16,96,20,"totalHeight"],[106,6,97,8],[106,7,97,9],[107,4,98,4],[107,5,98,5],[108,4,99,4],[109,0,100,0],[110,0,101,0],[111,0,102,0],[112,0,103,0],[113,4,104,4,"RVGridLayoutManagerImpl"],[113,27,104,27],[113,28,104,28,"prototype"],[113,37,104,37],[113,38,104,38,"recomputeLayouts"],[113,54,104,54],[113,57,104,57],[113,67,104,67,"startIndex"],[113,77,104,77],[113,79,104,79,"endIndex"],[113,87,104,87],[113,89,104,89],[114,6,105,8],[114,10,105,12,"newStartIndex"],[114,23,105,25],[114,26,105,28],[114,30,105,32],[114,31,105,33,"locateFirstIndexInRow"],[114,52,105,54],[114,53,105,55,"Math"],[114,57,105,59],[114,58,105,60,"max"],[114,61,105,63],[114,62,105,64],[114,63,105,65],[114,65,105,67,"startIndex"],[114,75,105,77],[114,78,105,80],[114,79,105,81],[114,80,105,82],[114,81,105,83],[115,6,106,8],[115,10,106,12,"startVal"],[115,18,106,20],[115,21,106,23],[115,25,106,27],[115,26,106,28,"getLayout"],[115,35,106,37],[115,36,106,38,"newStartIndex"],[115,49,106,51],[115,50,106,52],[116,6,107,8],[116,10,107,12,"startX"],[116,16,107,18],[116,19,107,21,"startVal"],[116,27,107,29],[116,28,107,30,"x"],[116,29,107,31],[117,6,108,8],[117,10,108,12,"startY"],[117,16,108,18],[117,19,108,21,"startVal"],[117,27,108,29],[117,28,108,30,"y"],[117,29,108,31],[118,6,109,8],[118,11,109,13],[118,15,109,17,"i"],[118,16,109,18],[118,19,109,21,"newStartIndex"],[118,32,109,34],[118,34,109,36,"i"],[118,35,109,37],[118,39,109,41,"endIndex"],[118,47,109,49],[118,49,109,51,"i"],[118,50,109,52],[118,52,109,54],[118,54,109,56],[119,8,110,12],[119,12,110,16,"layout"],[119,18,110,22],[119,21,110,25],[119,25,110,29],[119,26,110,30,"getLayout"],[119,35,110,39],[119,36,110,40,"i"],[119,37,110,41],[119,38,110,42],[120,8,111,12],[120,12,111,16],[120,13,111,17],[120,17,111,21],[120,18,111,22,"checkBounds"],[120,29,111,33],[120,30,111,34,"startX"],[120,36,111,40],[120,38,111,42,"layout"],[120,44,111,48],[120,45,111,49,"width"],[120,50,111,54],[120,51,111,55],[120,53,111,57],[121,10,112,16],[121,14,112,20,"tallestItem"],[121,25,112,31],[121,28,112,34],[121,32,112,38],[121,33,112,39,"processAndReturnTallestItemInRow"],[121,65,112,71],[121,66,112,72,"i"],[121,67,112,73],[121,70,112,76],[121,71,112,77],[121,72,112,78],[122,10,113,16,"startY"],[122,16,113,22],[122,19,113,25,"tallestItem"],[122,30,113,36],[122,31,113,37,"y"],[122,32,113,38],[122,35,113,41,"tallestItem"],[122,46,113,52],[122,47,113,53,"height"],[122,53,113,59],[123,10,114,16,"startX"],[123,16,114,22],[123,19,114,25],[123,20,114,26],[124,8,115,12],[125,8,116,12,"layout"],[125,14,116,18],[125,15,116,19,"x"],[125,16,116,20],[125,19,116,23,"startX"],[125,25,116,29],[126,8,117,12,"layout"],[126,14,117,18],[126,15,117,19,"y"],[126,16,117,20],[126,19,117,23,"startY"],[126,25,117,29],[127,8,118,12,"startX"],[127,14,118,18],[127,18,118,22,"layout"],[127,24,118,28],[127,25,118,29,"width"],[127,30,118,34],[128,6,119,8],[129,6,120,8],[129,10,120,12,"endIndex"],[129,18,120,20],[129,23,120,25],[129,27,120,29],[129,28,120,30,"layouts"],[129,35,120,37],[129,36,120,38,"length"],[129,42,120,44],[129,45,120,47],[129,46,120,48],[129,48,120,50],[130,8,121,12],[130,12,121,16],[130,13,121,17,"processAndReturnTallestItemInRow"],[130,45,121,49],[130,46,121,50,"endIndex"],[130,54,121,58],[130,55,121,59],[131,6,122,8],[132,4,123,4],[132,5,123,5],[133,4,124,4],[134,0,125,0],[135,0,126,0],[136,0,127,0],[137,0,128,0],[138,4,129,4,"RVGridLayoutManagerImpl"],[138,27,129,27],[138,28,129,28,"prototype"],[138,37,129,37],[138,38,129,38,"getWidth"],[138,46,129,46],[138,49,129,49],[138,59,129,59,"index"],[138,64,129,64],[138,66,129,66],[139,6,130,8],[139,13,130,16],[139,17,130,20],[139,18,130,21,"boundedSize"],[139,29,130,32],[139,32,130,35],[139,36,130,39],[139,37,130,40,"maxColumns"],[139,47,130,50],[139,50,130,54],[139,54,130,58],[139,55,130,59,"getSpan"],[139,62,130,66],[139,63,130,67,"index"],[139,68,130,72],[139,69,130,73],[140,4,131,4],[140,5,131,5],[141,4,132,4],[142,0,133,0],[143,0,134,0],[144,0,135,0],[145,0,136,0],[146,0,137,0],[147,0,138,0],[148,4,139,4,"RVGridLayoutManagerImpl"],[148,27,139,27],[148,28,139,28,"prototype"],[148,37,139,37],[148,38,139,38,"processAndReturnTallestItemInRow"],[148,70,139,70],[148,73,139,73],[148,83,139,83,"endIndex"],[148,91,139,91],[148,93,139,93],[149,6,140,8],[149,10,140,12,"_a"],[149,12,140,14],[149,14,140,16,"_b"],[149,16,140,18],[150,6,141,8],[150,10,141,12,"startIndex"],[150,20,141,22],[150,23,141,25],[150,27,141,29],[150,28,141,30,"locateFirstIndexInRow"],[150,49,141,51],[150,50,141,52,"endIndex"],[150,58,141,60],[150,59,141,61],[151,6,142,8],[151,10,142,12,"tallestItem"],[151,21,142,23],[152,6,143,8],[152,10,143,12,"maxHeight"],[152,19,143,21],[152,22,143,24],[152,23,143,25],[153,6,144,8],[153,10,144,12,"i"],[153,11,144,13],[153,14,144,16,"startIndex"],[153,24,144,26],[154,6,145,8],[154,10,145,12,"isMeasured"],[154,20,145,22],[154,23,145,25],[154,28,145,30],[155,6,146,8],[155,13,146,15,"i"],[155,14,146,16],[155,18,146,20,"endIndex"],[155,26,146,28],[155,28,146,30],[156,8,147,12],[156,12,147,16,"layout"],[156,18,147,22],[156,21,147,25],[156,25,147,29],[156,26,147,30,"layouts"],[156,33,147,37],[156,34,147,38,"i"],[156,35,147,39],[156,36,147,40],[157,8,148,12,"isMeasured"],[157,18,148,22],[157,21,148,25,"isMeasured"],[157,31,148,35],[157,35,148,39,"Boolean"],[157,42,148,46],[157,43,148,47,"layout"],[157,49,148,53],[157,50,148,54,"isHeightMeasured"],[157,66,148,70],[157,67,148,71],[158,8,149,12,"maxHeight"],[158,17,149,21],[158,20,149,24,"Math"],[158,24,149,28],[158,25,149,29,"max"],[158,28,149,32],[158,29,149,33,"maxHeight"],[158,38,149,42],[158,40,149,44,"layout"],[158,46,149,50],[158,47,149,51,"height"],[158,53,149,57],[158,54,149,58],[159,8,150,12],[159,12,150,16,"layout"],[159,18,150,22],[159,19,150,23,"height"],[159,25,150,29],[159,29,150,33],[159,30,150,34,"_a"],[159,32,150,36],[159,35,150,39,"layout"],[159,41,150,45],[159,42,150,46,"minHeight"],[159,51,150,55],[159,57,150,61],[159,61,150,65],[159,65,150,69,"_a"],[159,67,150,71],[159,72,150,76],[159,77,150,81],[159,78,150,82],[159,81,150,85,"_a"],[159,83,150,87],[159,86,150,90],[159,87,150,91],[159,88,150,92],[159,92,151,16,"layout"],[159,98,151,22],[159,99,151,23,"height"],[159,105,151,29],[159,109,151,33],[159,110,151,34,"_b"],[159,112,151,36],[159,115,151,39,"tallestItem"],[159,126,151,50],[159,131,151,55],[159,135,151,59],[159,139,151,63,"tallestItem"],[159,150,151,74],[159,155,151,79],[159,160,151,84],[159,161,151,85],[159,164,151,88],[159,169,151,93],[159,170,151,94],[159,173,151,97,"tallestItem"],[159,184,151,108],[159,185,151,109,"height"],[159,191,151,115],[159,197,151,121],[159,201,151,125],[159,205,151,129,"_b"],[159,207,151,131],[159,212,151,136],[159,217,151,141],[159,218,151,142],[159,221,151,145,"_b"],[159,223,151,147],[159,226,151,150],[159,227,151,151],[159,228,151,152],[159,230,151,154],[160,10,152,16,"tallestItem"],[160,21,152,27],[160,24,152,30,"layout"],[160,30,152,36],[161,8,153,12],[162,8,154,12,"i"],[162,9,154,13],[162,11,154,15],[163,8,155,12],[163,12,155,16,"i"],[163,13,155,17],[163,17,155,21],[163,21,155,25],[163,22,155,26,"layouts"],[163,29,155,33],[163,30,155,34,"length"],[163,36,155,40],[163,38,155,42],[164,10,156,16],[165,8,157,12],[166,6,158,8],[167,6,159,8],[167,10,159,12],[167,11,159,13,"tallestItem"],[167,22,159,24],[167,26,159,28,"maxHeight"],[167,35,159,37],[167,38,159,40],[167,39,159,41],[167,41,159,43],[168,8,160,12,"maxHeight"],[168,17,160,21],[168,20,160,24,"Number"],[168,26,160,30],[168,27,160,31,"MAX_SAFE_INTEGER"],[168,43,160,47],[169,6,161,8],[170,6,162,8,"tallestItem"],[170,17,162,19],[170,20,162,22,"tallestItem"],[170,31,162,33],[170,36,162,38],[170,40,162,42],[170,44,162,46,"tallestItem"],[170,55,162,57],[170,60,162,62],[170,65,162,67],[170,66,162,68],[170,69,162,71,"tallestItem"],[170,80,162,82],[170,83,162,85],[170,87,162,89],[170,88,162,90,"layouts"],[170,95,162,97],[170,96,162,98,"startIndex"],[170,106,162,108],[170,107,162,109],[171,6,163,8],[171,10,163,12],[171,11,163,13,"isMeasured"],[171,21,163,23],[171,23,163,25],[172,8,164,12],[172,15,164,19,"tallestItem"],[172,26,164,30],[173,6,165,8],[174,6,166,8],[174,10,166,12,"tallestItem"],[174,21,166,23],[174,23,166,25],[175,8,167,12],[175,12,167,16,"targetHeight"],[175,24,167,28],[175,27,167,31,"tallestItem"],[175,38,167,42],[175,39,167,43,"height"],[175,45,167,49],[176,8,168,12],[176,12,168,16,"maxHeight"],[176,21,168,25],[176,24,168,28,"tallestItem"],[176,35,168,39],[176,36,168,40,"height"],[176,42,168,46],[176,45,168,49],[176,46,168,50],[176,48,168,52],[177,10,169,16,"targetHeight"],[177,22,169,28],[177,25,169,31],[177,26,169,32],[178,10,170,16],[178,14,170,20],[178,15,170,21,"requiresRepaint"],[178,30,170,36],[178,33,170,39],[178,37,170,43],[179,8,171,12],[180,8,172,12,"i"],[180,9,172,13],[180,12,172,16,"startIndex"],[180,22,172,26],[181,8,173,12],[181,15,173,19,"i"],[181,16,173,20],[181,20,173,24,"endIndex"],[181,28,173,32],[181,30,173,34],[182,10,174,16],[182,14,174,20],[182,15,174,21,"layouts"],[182,22,174,28],[182,23,174,29,"i"],[182,24,174,30],[182,25,174,31],[182,26,174,32,"minHeight"],[182,35,174,41],[182,38,174,44,"targetHeight"],[182,50,174,56],[183,10,175,16],[183,14,175,20,"targetHeight"],[183,26,175,32],[183,29,175,35],[183,30,175,36],[183,32,175,38],[184,12,176,20],[184,16,176,24],[184,17,176,25,"layouts"],[184,24,176,32],[184,25,176,33,"i"],[184,26,176,34],[184,27,176,35],[184,28,176,36,"height"],[184,34,176,42],[184,37,176,45,"targetHeight"],[184,49,176,57],[185,10,177,16],[186,10,178,16,"i"],[186,11,178,17],[186,13,178,19],[187,10,179,16],[187,14,179,20,"i"],[187,15,179,21],[187,19,179,25],[187,23,179,29],[187,24,179,30,"layouts"],[187,31,179,37],[187,32,179,38,"length"],[187,38,179,44],[187,40,179,46],[188,12,180,20],[189,10,181,16],[190,8,182,12],[191,8,183,12,"tallestItem"],[191,19,183,23],[191,20,183,24,"minHeight"],[191,29,183,33],[191,32,183,36],[191,33,183,37],[192,6,184,8],[193,6,185,8],[193,13,185,15,"tallestItem"],[193,24,185,26],[194,4,186,4],[194,5,186,5],[195,4,187,4],[196,0,188,0],[197,0,189,0],[198,0,190,0],[199,0,191,0],[200,4,192,4,"RVGridLayoutManagerImpl"],[200,27,192,27],[200,28,192,28,"prototype"],[200,37,192,37],[200,38,192,38,"computeTotalHeightTillRow"],[200,63,192,63],[200,66,192,66],[200,76,192,76,"endIndex"],[200,84,192,84],[200,86,192,86],[201,6,193,8],[201,10,193,12,"startIndex"],[201,20,193,22],[201,23,193,25],[201,27,193,29],[201,28,193,30,"locateFirstIndexInRow"],[201,49,193,51],[201,50,193,52,"endIndex"],[201,58,193,60],[201,59,193,61],[202,6,194,8],[202,10,194,12,"y"],[202,11,194,13],[202,14,194,16],[202,18,194,20],[202,19,194,21,"layouts"],[202,26,194,28],[202,27,194,29,"startIndex"],[202,37,194,39],[202,38,194,40],[202,39,194,41,"y"],[202,40,194,42],[203,6,195,8],[203,10,195,12,"maxHeight"],[203,19,195,21],[203,22,195,24],[203,23,195,25],[204,6,196,8],[204,10,196,12,"i"],[204,11,196,13],[204,14,196,16,"startIndex"],[204,24,196,26],[205,6,197,8],[205,13,197,15,"i"],[205,14,197,16],[205,18,197,20,"endIndex"],[205,26,197,28],[205,28,197,30],[206,8,198,12,"maxHeight"],[206,17,198,21],[206,20,198,24,"Math"],[206,24,198,28],[206,25,198,29,"max"],[206,28,198,32],[206,29,198,33,"maxHeight"],[206,38,198,42],[206,40,198,44],[206,44,198,48],[206,45,198,49,"layouts"],[206,52,198,56],[206,53,198,57,"i"],[206,54,198,58],[206,55,198,59],[206,56,198,60,"height"],[206,62,198,66],[206,63,198,67],[207,8,199,12,"i"],[207,9,199,13],[207,11,199,15],[208,8,200,12],[208,12,200,16,"i"],[208,13,200,17],[208,17,200,21],[208,21,200,25],[208,22,200,26,"layouts"],[208,29,200,33],[208,30,200,34,"length"],[208,36,200,40],[208,38,200,42],[209,10,201,16],[210,8,202,12],[211,6,203,8],[212,6,204,8],[212,13,204,15,"y"],[212,14,204,16],[212,17,204,19,"maxHeight"],[212,26,204,28],[213,4,205,4],[213,5,205,5],[214,4,206,4,"RVGridLayoutManagerImpl"],[214,27,206,27],[214,28,206,28,"prototype"],[214,37,206,37],[214,38,206,38,"updateAllWidths"],[214,53,206,53],[214,56,206,56],[214,68,206,68],[215,6,207,8],[215,11,207,13],[215,15,207,17,"i"],[215,16,207,18],[215,19,207,21],[215,20,207,22],[215,22,207,24,"i"],[215,23,207,25],[215,26,207,28],[215,30,207,32],[215,31,207,33,"layouts"],[215,38,207,40],[215,39,207,41,"length"],[215,45,207,47],[215,47,207,49,"i"],[215,48,207,50],[215,50,207,52],[215,52,207,54],[216,8,208,12],[216,12,208,16],[216,13,208,17,"layouts"],[216,20,208,24],[216,21,208,25,"i"],[216,22,208,26],[216,23,208,27],[216,24,208,28,"width"],[216,29,208,33],[216,32,208,36],[216,36,208,40],[216,37,208,41,"getWidth"],[216,45,208,49],[216,46,208,50,"i"],[216,47,208,51],[216,48,208,52],[217,6,209,8],[218,4,210,4],[218,5,210,5],[219,4,211,4],[220,0,212,0],[221,0,213,0],[222,0,214,0],[223,0,215,0],[224,0,216,0],[225,4,217,4,"RVGridLayoutManagerImpl"],[225,27,217,27],[225,28,217,28,"prototype"],[225,37,217,37],[225,38,217,38,"checkBounds"],[225,49,217,49],[225,52,217,52],[225,62,217,62,"itemX"],[225,67,217,67],[225,69,217,69,"width"],[225,74,217,74],[225,76,217,76],[226,6,218,8],[226,13,218,15,"itemX"],[226,18,218,20],[226,21,218,23,"width"],[226,26,218,28],[226,30,218,32],[226,34,218,36],[226,35,218,37,"boundedSize"],[226,46,218,48],[226,49,218,51],[226,52,218,54],[227,4,219,4],[227,5,219,5],[228,4,220,4],[229,0,221,0],[230,0,222,0],[231,0,223,0],[232,0,224,0],[233,4,225,4,"RVGridLayoutManagerImpl"],[233,27,225,27],[233,28,225,28,"prototype"],[233,37,225,37],[233,38,225,38,"locateFirstIndexInRow"],[233,59,225,59],[233,62,225,62],[233,72,225,72,"itemIndex"],[233,81,225,81],[233,83,225,83],[234,6,226,8],[234,10,226,12,"itemIndex"],[234,19,226,21],[234,24,226,26],[234,25,226,27],[234,27,226,29],[235,8,227,12],[235,15,227,19],[235,16,227,20],[236,6,228,8],[237,6,229,8],[237,10,229,12,"i"],[237,11,229,13],[237,14,229,16,"itemIndex"],[237,23,229,25],[238,6,230,8],[238,13,230,15,"i"],[238,14,230,16],[238,18,230,20],[238,19,230,21],[238,21,230,23,"i"],[238,22,230,24],[238,24,230,26],[238,26,230,28],[239,8,231,12],[239,12,231,16],[239,16,231,20],[239,17,231,21,"layouts"],[239,24,231,28],[239,25,231,29,"i"],[239,26,231,30],[239,27,231,31],[239,28,231,32,"x"],[239,29,231,33],[239,34,231,38],[239,35,231,39],[239,37,231,41],[240,10,232,16],[241,8,233,12],[242,6,234,8],[243,6,235,8],[243,13,235,15,"Math"],[243,17,235,19],[243,18,235,20,"max"],[243,21,235,23],[243,22,235,24,"i"],[243,23,235,25],[243,25,235,27],[243,26,235,28],[243,27,235,29],[244,4,236,4],[244,5,236,5],[245,4,237,4],[245,11,237,11,"RVGridLayoutManagerImpl"],[245,34,237,34],[246,2,238,0],[246,3,238,1],[246,4,238,2,"LayoutManager_1"],[246,19,238,17],[246,20,238,18,"RVLayoutManager"],[246,35,238,33],[246,36,238,35],[247,2,239,0,"exports"],[247,9,239,7],[247,10,239,8,"RVGridLayoutManagerImpl"],[247,33,239,31],[247,36,239,34,"RVGridLayoutManagerImpl"],[247,59,239,57],[248,0,239,58],[248,3]],"functionMap":{"names":["<global>","<anonymous>","RVGridLayoutManagerImpl","RVGridLayoutManagerImpl.prototype.updateLayoutParams","RVGridLayoutManagerImpl.prototype.processLayoutInfo","RVGridLayoutManagerImpl.prototype.estimateLayout","RVGridLayoutManagerImpl.prototype.handleSpanChange","RVGridLayoutManagerImpl.prototype.getLayoutSize","RVGridLayoutManagerImpl.prototype.recomputeLayouts","RVGridLayoutManagerImpl.prototype.getWidth","RVGridLayoutManagerImpl.prototype.processAndReturnTallestItemInRow","RVGridLayoutManagerImpl.prototype.computeTotalHeightTillRow","RVGridLayoutManagerImpl.prototype.updateAllWidths","RVGridLayoutManagerImpl.prototype.checkBounds","RVGridLayoutManagerImpl.prototype.locateFirstIndexInRow"],"mappings":"AAA;6CCS;ICE;KDM;2DEK;KFa;0DGM;KHyB;uDIK;KJM;yDKK;KLE;sDMK;KNQ;yDOM;KPmB;iDQM;KRE;yESQ;KT+C;kEUM;KVa;wDWC;KXI;oDYO;KZE;8DaM;KbW;CDE"},"hasCjsExports":true},"type":"js/module"}]}