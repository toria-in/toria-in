{"dependencies":[{"name":"./assignRef","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":40,"index":40}}],"key":"YFkdemC04xpzOlnEd9pTHe8eLzA=","exportNames":["*"],"imports":1}},{"name":"./createRef","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":41},"end":{"line":2,"column":48,"index":89}}],"key":"e39zUnNbAd4YRY/MGH4XGUbKEBg=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.mergeRefs = mergeRefs;\n  var _assignRef = require(_dependencyMap[0], \"./assignRef\");\n  var _createRef = require(_dependencyMap[1], \"./createRef\");\n  /**\n   * Merges two or more refs together providing a single interface to set their value\n   * @param {RefObject|Ref} refs\n   * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}\n   *\n   * @see {@link useMergeRefs} to be used in ReactComponents\n   * @example\n   * const Component = React.forwardRef((props, ref) => {\n   *   const ownRef = useRef();\n   *   const domRef = mergeRefs([ref, ownRef]); // ðŸ‘ˆ merge together\n   *   return <div ref={domRef}>...</div>\n   * }\n   */\n  function mergeRefs(refs) {\n    return (0, _createRef.createCallbackRef)(function (newValue) {\n      return refs.forEach(function (ref) {\n        return (0, _assignRef.assignRef)(ref, newValue);\n      });\n    });\n  }\n});","lineCount":30,"map":[[7,2,16,0,"exports"],[7,9,16,0],[7,10,16,0,"mergeRefs"],[7,19,16,0],[7,22,16,0,"mergeRefs"],[7,31,16,0],[8,2,1,0],[8,6,1,0,"_assignRef"],[8,16,1,0],[8,19,1,0,"require"],[8,26,1,0],[8,27,1,0,"_dependencyMap"],[8,41,1,0],[9,2,2,0],[9,6,2,0,"_createRef"],[9,16,2,0],[9,19,2,0,"require"],[9,26,2,0],[9,27,2,0,"_dependencyMap"],[9,41,2,0],[10,2,3,0],[11,0,4,0],[12,0,5,0],[13,0,6,0],[14,0,7,0],[15,0,8,0],[16,0,9,0],[17,0,10,0],[18,0,11,0],[19,0,12,0],[20,0,13,0],[21,0,14,0],[22,0,15,0],[23,2,16,7],[23,11,16,16,"mergeRefs"],[23,20,16,25,"mergeRefs"],[23,21,16,26,"refs"],[23,25,16,30],[23,27,16,32],[24,4,17,4],[24,11,17,11],[24,15,17,11,"createCallbackRef"],[24,25,17,28],[24,26,17,28,"createCallbackRef"],[24,43,17,28],[24,45,17,29],[24,55,17,39,"newValue"],[24,63,17,47],[24,65,17,49],[25,6,17,51],[25,13,17,58,"refs"],[25,17,17,62],[25,18,17,63,"forEach"],[25,25,17,70],[25,26,17,71],[25,36,17,81,"ref"],[25,39,17,84],[25,41,17,86],[26,8,17,88],[26,15,17,95],[26,19,17,95,"assignRef"],[26,29,17,104],[26,30,17,104,"assignRef"],[26,39,17,104],[26,41,17,105,"ref"],[26,44,17,108],[26,46,17,110,"newValue"],[26,54,17,118],[26,55,17,119],[27,6,17,121],[27,7,17,122],[27,8,17,123],[28,4,17,125],[28,5,17,126],[28,6,17,127],[29,2,18,0],[30,0,18,1],[30,3]],"functionMap":{"names":["<global>","mergeRefs","createCallbackRef$argument_0","refs.forEach$argument_0"],"mappings":"AAA;OCe;6BCC,0CC,mDD,ID;CDC"},"hasCjsExports":false},"type":"js/module"}]}