{"dependencies":[{"name":"tslib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":14,"index":128},"end":{"line":4,"column":30,"index":144}}],"key":"vm88vOsSPZItrLOmMEyUuGkd1y4=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.ConsecutiveNumbers = void 0;\n  var tslib_1 = require(_dependencyMap[0], \"tslib\");\n  /**\n   * A simple wrapper for consecutive postive integer arrays\n   * Only stores start and end indices for faster computation as numbers are consecutive.\n   */\n  var ConsecutiveNumbers = /** @class */function () {\n    function ConsecutiveNumbers(startIndex, endIndex) {\n      this.startIndex = startIndex;\n      this.endIndex = endIndex;\n    }\n    Object.defineProperty(ConsecutiveNumbers.prototype, \"length\", {\n      /**\n       * Get the length of the array\n       */\n      get: function () {\n        return Math.max(0, this.endIndex - this.startIndex + 1);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    /**\n     * Get element at specified index\n     */\n    ConsecutiveNumbers.prototype.at = function (index) {\n      return this.startIndex + index;\n    };\n    /**\n     * Check if two consecutive numbers are equal\n     */\n    ConsecutiveNumbers.prototype.equals = function (other) {\n      return this.startIndex === other.startIndex && this.endIndex === other.endIndex;\n    };\n    /**\n     * Converts the consecutive range to an actual array\n     * @returns An array containing all consecutive numbers\n     */\n    ConsecutiveNumbers.prototype.toArray = function () {\n      if (this.length === 0) {\n        return [];\n      }\n      var array = new Array(this.length);\n      for (var i = 0; i < this.length; i++) {\n        array[i] = this.startIndex + i;\n      }\n      return array;\n    };\n    /**\n     * Check if array includes a value\n     */\n    ConsecutiveNumbers.prototype.includes = function (value) {\n      return value >= this.startIndex && value <= this.endIndex;\n    };\n    /**\n     * Get index of a value in the consecutive range\n     */\n    ConsecutiveNumbers.prototype.indexOf = function (value) {\n      return this.includes(value) ? value - this.startIndex : -1;\n    };\n    ConsecutiveNumbers.prototype.findValue = function (predicate) {\n      for (var i = 0; i < this.length; i++) {\n        var value = this.startIndex + i;\n        if (predicate(value, i, this)) {\n          return value;\n        }\n      }\n      return undefined;\n    };\n    /**\n     * Tests whether all elements in the consecutive range pass the provided test function\n     * @param predicate A function that tests each element\n     * @returns true if all elements pass the test; otherwise, false\n     */\n    ConsecutiveNumbers.prototype.every = function (predicate) {\n      for (var i = 0; i < this.length; i++) {\n        var value = this.startIndex + i;\n        if (!predicate(value, i, this)) {\n          return false;\n        }\n      }\n      return true;\n    };\n    /**\n     * Get a slice of the consecutive array\n     */\n    ConsecutiveNumbers.prototype.slice = function (start, end) {\n      if (start === void 0) {\n        start = 0;\n      }\n      if (end === void 0) {\n        end = this.length;\n      }\n      var newStart = this.startIndex + start;\n      var newEnd = this.startIndex + Math.min(end, this.length) - 1;\n      return new ConsecutiveNumbers(newStart, Math.max(newStart - 1, newEnd));\n    };\n    /**\n     * Implement iterator to enable for...of\n     */\n    ConsecutiveNumbers.prototype[Symbol.iterator] = function () {\n      var i;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            i = this.startIndex;\n            _a.label = 1;\n          case 1:\n            if (!(i <= this.endIndex)) return [3 /*break*/, 4];\n            return [4 /*yield*/, i];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            i++;\n            return [3 /*break*/, 1];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    };\n    ConsecutiveNumbers.EMPTY = new ConsecutiveNumbers(-1, -2);\n    return ConsecutiveNumbers;\n  }();\n  exports.ConsecutiveNumbers = ConsecutiveNumbers;\n});","lineCount":131,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"ConsecutiveNumbers"],[7,28,3,26],[7,31,3,29],[7,36,3,34],[7,37,3,35],[8,2,4,0],[8,6,4,4,"tslib_1"],[8,13,4,11],[8,16,4,14,"require"],[8,23,4,21],[8,24,4,21,"_dependencyMap"],[8,38,4,21],[8,50,4,29],[8,51,4,30],[9,2,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,2,9,0],[13,6,9,4,"ConsecutiveNumbers"],[13,24,9,22],[13,27,9,25],[13,40,9,40],[13,52,9,52],[14,4,10,4],[14,13,10,13,"ConsecutiveNumbers"],[14,31,10,31,"ConsecutiveNumbers"],[14,32,10,32,"startIndex"],[14,42,10,42],[14,44,10,44,"endIndex"],[14,52,10,52],[14,54,10,54],[15,6,11,8],[15,10,11,12],[15,11,11,13,"startIndex"],[15,21,11,23],[15,24,11,26,"startIndex"],[15,34,11,36],[16,6,12,8],[16,10,12,12],[16,11,12,13,"endIndex"],[16,19,12,21],[16,22,12,24,"endIndex"],[16,30,12,32],[17,4,13,4],[18,4,14,4,"Object"],[18,10,14,10],[18,11,14,11,"defineProperty"],[18,25,14,25],[18,26,14,26,"ConsecutiveNumbers"],[18,44,14,44],[18,45,14,45,"prototype"],[18,54,14,54],[18,56,14,56],[18,64,14,64],[18,66,14,66],[19,6,15,8],[20,0,16,0],[21,0,17,0],[22,6,18,8,"get"],[22,9,18,11],[22,11,18,13],[22,20,18,13,"get"],[22,21,18,13],[22,23,18,25],[23,8,19,12],[23,15,19,19,"Math"],[23,19,19,23],[23,20,19,24,"max"],[23,23,19,27],[23,24,19,28],[23,25,19,29],[23,27,19,31],[23,31,19,35],[23,32,19,36,"endIndex"],[23,40,19,44],[23,43,19,47],[23,47,19,51],[23,48,19,52,"startIndex"],[23,58,19,62],[23,61,19,65],[23,62,19,66],[23,63,19,67],[24,6,20,8],[24,7,20,9],[25,6,21,8,"enumerable"],[25,16,21,18],[25,18,21,20],[25,23,21,25],[26,6,22,8,"configurable"],[26,18,22,20],[26,20,22,22],[27,4,23,4],[27,5,23,5],[27,6,23,6],[28,4,24,4],[29,0,25,0],[30,0,26,0],[31,4,27,4,"ConsecutiveNumbers"],[31,22,27,22],[31,23,27,23,"prototype"],[31,32,27,32],[31,33,27,33,"at"],[31,35,27,35],[31,38,27,38],[31,48,27,48,"index"],[31,53,27,53],[31,55,27,55],[32,6,28,8],[32,13,28,15],[32,17,28,19],[32,18,28,20,"startIndex"],[32,28,28,30],[32,31,28,33,"index"],[32,36,28,38],[33,4,29,4],[33,5,29,5],[34,4,30,4],[35,0,31,0],[36,0,32,0],[37,4,33,4,"ConsecutiveNumbers"],[37,22,33,22],[37,23,33,23,"prototype"],[37,32,33,32],[37,33,33,33,"equals"],[37,39,33,39],[37,42,33,42],[37,52,33,52,"other"],[37,57,33,57],[37,59,33,59],[38,6,34,8],[38,13,34,16],[38,17,34,20],[38,18,34,21,"startIndex"],[38,28,34,31],[38,33,34,36,"other"],[38,38,34,41],[38,39,34,42,"startIndex"],[38,49,34,52],[38,53,34,56],[38,57,34,60],[38,58,34,61,"endIndex"],[38,66,34,69],[38,71,34,74,"other"],[38,76,34,79],[38,77,34,80,"endIndex"],[38,85,34,88],[39,4,35,4],[39,5,35,5],[40,4,36,4],[41,0,37,0],[42,0,38,0],[43,0,39,0],[44,4,40,4,"ConsecutiveNumbers"],[44,22,40,22],[44,23,40,23,"prototype"],[44,32,40,32],[44,33,40,33,"toArray"],[44,40,40,40],[44,43,40,43],[44,55,40,55],[45,6,41,8],[45,10,41,12],[45,14,41,16],[45,15,41,17,"length"],[45,21,41,23],[45,26,41,28],[45,27,41,29],[45,29,41,31],[46,8,42,12],[46,15,42,19],[46,17,42,21],[47,6,43,8],[48,6,44,8],[48,10,44,12,"array"],[48,15,44,17],[48,18,44,20],[48,22,44,24,"Array"],[48,27,44,29],[48,28,44,30],[48,32,44,34],[48,33,44,35,"length"],[48,39,44,41],[48,40,44,42],[49,6,45,8],[49,11,45,13],[49,15,45,17,"i"],[49,16,45,18],[49,19,45,21],[49,20,45,22],[49,22,45,24,"i"],[49,23,45,25],[49,26,45,28],[49,30,45,32],[49,31,45,33,"length"],[49,37,45,39],[49,39,45,41,"i"],[49,40,45,42],[49,42,45,44],[49,44,45,46],[50,8,46,12,"array"],[50,13,46,17],[50,14,46,18,"i"],[50,15,46,19],[50,16,46,20],[50,19,46,23],[50,23,46,27],[50,24,46,28,"startIndex"],[50,34,46,38],[50,37,46,41,"i"],[50,38,46,42],[51,6,47,8],[52,6,48,8],[52,13,48,15,"array"],[52,18,48,20],[53,4,49,4],[53,5,49,5],[54,4,50,4],[55,0,51,0],[56,0,52,0],[57,4,53,4,"ConsecutiveNumbers"],[57,22,53,22],[57,23,53,23,"prototype"],[57,32,53,32],[57,33,53,33,"includes"],[57,41,53,41],[57,44,53,44],[57,54,53,54,"value"],[57,59,53,59],[57,61,53,61],[58,6,54,8],[58,13,54,15,"value"],[58,18,54,20],[58,22,54,24],[58,26,54,28],[58,27,54,29,"startIndex"],[58,37,54,39],[58,41,54,43,"value"],[58,46,54,48],[58,50,54,52],[58,54,54,56],[58,55,54,57,"endIndex"],[58,63,54,65],[59,4,55,4],[59,5,55,5],[60,4,56,4],[61,0,57,0],[62,0,58,0],[63,4,59,4,"ConsecutiveNumbers"],[63,22,59,22],[63,23,59,23,"prototype"],[63,32,59,32],[63,33,59,33,"indexOf"],[63,40,59,40],[63,43,59,43],[63,53,59,53,"value"],[63,58,59,58],[63,60,59,60],[64,6,60,8],[64,13,60,15],[64,17,60,19],[64,18,60,20,"includes"],[64,26,60,28],[64,27,60,29,"value"],[64,32,60,34],[64,33,60,35],[64,36,60,38,"value"],[64,41,60,43],[64,44,60,46],[64,48,60,50],[64,49,60,51,"startIndex"],[64,59,60,61],[64,62,60,64],[64,63,60,65],[64,64,60,66],[65,4,61,4],[65,5,61,5],[66,4,62,4,"ConsecutiveNumbers"],[66,22,62,22],[66,23,62,23,"prototype"],[66,32,62,32],[66,33,62,33,"findValue"],[66,42,62,42],[66,45,62,45],[66,55,62,55,"predicate"],[66,64,62,64],[66,66,62,66],[67,6,63,8],[67,11,63,13],[67,15,63,17,"i"],[67,16,63,18],[67,19,63,21],[67,20,63,22],[67,22,63,24,"i"],[67,23,63,25],[67,26,63,28],[67,30,63,32],[67,31,63,33,"length"],[67,37,63,39],[67,39,63,41,"i"],[67,40,63,42],[67,42,63,44],[67,44,63,46],[68,8,64,12],[68,12,64,16,"value"],[68,17,64,21],[68,20,64,24],[68,24,64,28],[68,25,64,29,"startIndex"],[68,35,64,39],[68,38,64,42,"i"],[68,39,64,43],[69,8,65,12],[69,12,65,16,"predicate"],[69,21,65,25],[69,22,65,26,"value"],[69,27,65,31],[69,29,65,33,"i"],[69,30,65,34],[69,32,65,36],[69,36,65,40],[69,37,65,41],[69,39,65,43],[70,10,66,16],[70,17,66,23,"value"],[70,22,66,28],[71,8,67,12],[72,6,68,8],[73,6,69,8],[73,13,69,15,"undefined"],[73,22,69,24],[74,4,70,4],[74,5,70,5],[75,4,71,4],[76,0,72,0],[77,0,73,0],[78,0,74,0],[79,0,75,0],[80,4,76,4,"ConsecutiveNumbers"],[80,22,76,22],[80,23,76,23,"prototype"],[80,32,76,32],[80,33,76,33,"every"],[80,38,76,38],[80,41,76,41],[80,51,76,51,"predicate"],[80,60,76,60],[80,62,76,62],[81,6,77,8],[81,11,77,13],[81,15,77,17,"i"],[81,16,77,18],[81,19,77,21],[81,20,77,22],[81,22,77,24,"i"],[81,23,77,25],[81,26,77,28],[81,30,77,32],[81,31,77,33,"length"],[81,37,77,39],[81,39,77,41,"i"],[81,40,77,42],[81,42,77,44],[81,44,77,46],[82,8,78,12],[82,12,78,16,"value"],[82,17,78,21],[82,20,78,24],[82,24,78,28],[82,25,78,29,"startIndex"],[82,35,78,39],[82,38,78,42,"i"],[82,39,78,43],[83,8,79,12],[83,12,79,16],[83,13,79,17,"predicate"],[83,22,79,26],[83,23,79,27,"value"],[83,28,79,32],[83,30,79,34,"i"],[83,31,79,35],[83,33,79,37],[83,37,79,41],[83,38,79,42],[83,40,79,44],[84,10,80,16],[84,17,80,23],[84,22,80,28],[85,8,81,12],[86,6,82,8],[87,6,83,8],[87,13,83,15],[87,17,83,19],[88,4,84,4],[88,5,84,5],[89,4,85,4],[90,0,86,0],[91,0,87,0],[92,4,88,4,"ConsecutiveNumbers"],[92,22,88,22],[92,23,88,23,"prototype"],[92,32,88,32],[92,33,88,33,"slice"],[92,38,88,38],[92,41,88,41],[92,51,88,51,"start"],[92,56,88,56],[92,58,88,58,"end"],[92,61,88,61],[92,63,88,63],[93,6,89,8],[93,10,89,12,"start"],[93,15,89,17],[93,20,89,22],[93,25,89,27],[93,26,89,28],[93,28,89,30],[94,8,89,32,"start"],[94,13,89,37],[94,16,89,40],[94,17,89,41],[95,6,89,43],[96,6,90,8],[96,10,90,12,"end"],[96,13,90,15],[96,18,90,20],[96,23,90,25],[96,24,90,26],[96,26,90,28],[97,8,90,30,"end"],[97,11,90,33],[97,14,90,36],[97,18,90,40],[97,19,90,41,"length"],[97,25,90,47],[98,6,90,49],[99,6,91,8],[99,10,91,12,"newStart"],[99,18,91,20],[99,21,91,23],[99,25,91,27],[99,26,91,28,"startIndex"],[99,36,91,38],[99,39,91,41,"start"],[99,44,91,46],[100,6,92,8],[100,10,92,12,"newEnd"],[100,16,92,18],[100,19,92,21],[100,23,92,25],[100,24,92,26,"startIndex"],[100,34,92,36],[100,37,92,39,"Math"],[100,41,92,43],[100,42,92,44,"min"],[100,45,92,47],[100,46,92,48,"end"],[100,49,92,51],[100,51,92,53],[100,55,92,57],[100,56,92,58,"length"],[100,62,92,64],[100,63,92,65],[100,66,92,68],[100,67,92,69],[101,6,93,8],[101,13,93,15],[101,17,93,19,"ConsecutiveNumbers"],[101,35,93,37],[101,36,93,38,"newStart"],[101,44,93,46],[101,46,93,48,"Math"],[101,50,93,52],[101,51,93,53,"max"],[101,54,93,56],[101,55,93,57,"newStart"],[101,63,93,65],[101,66,93,68],[101,67,93,69],[101,69,93,71,"newEnd"],[101,75,93,77],[101,76,93,78],[101,77,93,79],[102,4,94,4],[102,5,94,5],[103,4,95,4],[104,0,96,0],[105,0,97,0],[106,4,98,4,"ConsecutiveNumbers"],[106,22,98,22],[106,23,98,23,"prototype"],[106,32,98,32],[106,33,98,33,"Symbol"],[106,39,98,39],[106,40,98,40,"iterator"],[106,48,98,48],[106,49,98,49],[106,52,98,52],[106,64,98,64],[107,6,99,8],[107,10,99,12,"i"],[107,11,99,13],[108,6,100,8],[108,13,100,15,"tslib_1"],[108,20,100,22],[108,21,100,23,"__generator"],[108,32,100,34],[108,33,100,35],[108,37,100,39],[108,39,100,41],[108,49,100,51,"_a"],[108,51,100,53],[108,53,100,55],[109,8,101,12],[109,16,101,20,"_a"],[109,18,101,22],[109,19,101,23,"label"],[109,24,101,28],[110,10,102,16],[110,15,102,21],[110,16,102,22],[111,12,103,20,"i"],[111,13,103,21],[111,16,103,24],[111,20,103,28],[111,21,103,29,"startIndex"],[111,31,103,39],[112,12,104,20,"_a"],[112,14,104,22],[112,15,104,23,"label"],[112,20,104,28],[112,23,104,31],[112,24,104,32],[113,10,105,16],[113,15,105,21],[113,16,105,22],[114,12,106,20],[114,16,106,24],[114,18,106,26,"i"],[114,19,106,27],[114,23,106,31],[114,27,106,35],[114,28,106,36,"endIndex"],[114,36,106,44],[114,37,106,45],[114,39,106,47],[114,46,106,54],[114,47,106,55],[114,48,106,56],[114,49,106,57],[114,60,106,68],[114,61,106,69],[114,62,106,70],[115,12,107,20],[115,19,107,27],[115,20,107,28],[115,21,107,29],[115,22,107,30],[115,33,107,41,"i"],[115,34,107,42],[115,35,107,43],[116,10,108,16],[116,15,108,21],[116,16,108,22],[117,12,109,20,"_a"],[117,14,109,22],[117,15,109,23,"sent"],[117,19,109,27],[117,20,109,28],[117,21,109,29],[118,12,110,20,"_a"],[118,14,110,22],[118,15,110,23,"label"],[118,20,110,28],[118,23,110,31],[118,24,110,32],[119,10,111,16],[119,15,111,21],[119,16,111,22],[120,12,112,20,"i"],[120,13,112,21],[120,15,112,23],[121,12,113,20],[121,19,113,27],[121,20,113,28],[121,21,113,29],[121,22,113,30],[121,33,113,41],[121,34,113,42],[121,35,113,43],[122,10,114,16],[122,15,114,21],[122,16,114,22],[123,12,114,24],[123,19,114,31],[123,20,114,32],[123,21,114,33],[123,22,114,34],[123,33,114,45],[124,8,115,12],[125,6,116,8],[125,7,116,9],[125,8,116,10],[126,4,117,4],[126,5,117,5],[127,4,118,4,"ConsecutiveNumbers"],[127,22,118,22],[127,23,118,23,"EMPTY"],[127,28,118,28],[127,31,118,31],[127,35,118,35,"ConsecutiveNumbers"],[127,53,118,53],[127,54,118,54],[127,55,118,55],[127,56,118,56],[127,58,118,58],[127,59,118,59],[127,60,118,60],[127,61,118,61],[128,4,119,4],[128,11,119,11,"ConsecutiveNumbers"],[128,29,119,29],[129,2,120,0],[129,3,120,1],[129,4,120,2],[129,5,120,4],[130,2,121,0,"exports"],[130,9,121,7],[130,10,121,8,"ConsecutiveNumbers"],[130,28,121,26],[130,31,121,29,"ConsecutiveNumbers"],[130,49,121,47],[131,0,121,48],[131,3]],"functionMap":{"names":["<global>","<anonymous>","ConsecutiveNumbers","Object.defineProperty$argument_2.get","prototype.at","prototype.equals","prototype.toArray","prototype.includes","prototype.indexOf","prototype.findValue","prototype.every","prototype.slice","prototype.@@iterator","tslib_1.__generator$argument_1"],"mappings":"AAA;wCCQ;ICC;KDG;aEK;SFE;sCGO;KHE;0CII;KJE;2CKK;KLS;4CMI;KNE;2COI;KPE;6CQC;KRQ;yCSM;KTQ;yCUI;KVM;oDWI;yCCE;SDgB;KXC;CDG"},"hasCjsExports":true},"type":"js/module"}]}