{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Portions Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  /**\n   * BezierEasing - use bezier curve for transition easing function\n   * https://github.com/gre/bezier-easing\n   * @copyright 2014-2015 GaÃ«tan Renaudeau. MIT License.\n   */\n\n  'use strict';\n\n  // These values are established by empiricism with tests (tradeoff: performance VS precision)\n  exports.__esModule = true;\n  exports.default = bezier;\n  var NEWTON_ITERATIONS = 4;\n  var NEWTON_MIN_SLOPE = 0.001;\n  var SUBDIVISION_PRECISION = 0.0000001;\n  var SUBDIVISION_MAX_ITERATIONS = 10;\n  var kSplineTableSize = 11;\n  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n  var float32ArraySupported = typeof Float32Array === 'function';\n  function A(aA1, aA2) {\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n  }\n  function B(aA1, aA2) {\n    return 3.0 * aA2 - 6.0 * aA1;\n  }\n  function C(aA1) {\n    return 3.0 * aA1;\n  }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function calcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function getSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n  function binarySubdivide(aX, _aA, _aB, mX1, mX2) {\n    var currentX,\n      currentT,\n      i = 0,\n      aA = _aA,\n      aB = _aB;\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n    return currentT;\n  }\n  function newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {\n    var aGuessT = _aGuessT;\n    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n      var currentSlope = getSlope(aGuessT, mX1, mX2);\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  function bezier(mX1, mY1, mX2, mY2) {\n    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n      throw new Error('bezier x values must be in [0, 1] range');\n    }\n\n    // Precompute samples table\n    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n    if (mX1 !== mY1 || mX2 !== mY2) {\n      for (var i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n      }\n    }\n    function getTForX(aX) {\n      var intervalStart = 0.0;\n      var currentSample = 1;\n      var lastSample = kSplineTableSize - 1;\n      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n        intervalStart += kSampleStepSize;\n      }\n      --currentSample;\n\n      // Interpolate to provide an initial guess for t\n      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n      var guessForT = intervalStart + dist * kSampleStepSize;\n      var initialSlope = getSlope(guessForT, mX1, mX2);\n      if (initialSlope >= NEWTON_MIN_SLOPE) {\n        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n      } else if (initialSlope === 0.0) {\n        return guessForT;\n      } else {\n        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n      }\n    }\n    return function BezierEasing(x) {\n      if (mX1 === mY1 && mX2 === mY2) {\n        return x; // linear\n      }\n      // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n      if (x === 0) {\n        return 0;\n      }\n      if (x === 1) {\n        return 1;\n      }\n      return calcBezier(getTForX(x), mY1, mY2);\n    };\n  }\n  ;\n  module.exports = exports.default;\n});","lineCount":127,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[18,2,17,0],[18,14,17,12],[20,2,19,0],[21,2,20,0,"exports"],[21,9,20,7],[21,10,20,8,"__esModule"],[21,20,20,18],[21,23,20,21],[21,27,20,25],[22,2,21,0,"exports"],[22,9,21,7],[22,10,21,8,"default"],[22,17,21,15],[22,20,21,18,"bezier"],[22,26,21,24],[23,2,22,0],[23,6,22,4,"NEWTON_ITERATIONS"],[23,23,22,21],[23,26,22,24],[23,27,22,25],[24,2,23,0],[24,6,23,4,"NEWTON_MIN_SLOPE"],[24,22,23,20],[24,25,23,23],[24,30,23,28],[25,2,24,0],[25,6,24,4,"SUBDIVISION_PRECISION"],[25,27,24,25],[25,30,24,28],[25,39,24,37],[26,2,25,0],[26,6,25,4,"SUBDIVISION_MAX_ITERATIONS"],[26,32,25,30],[26,35,25,33],[26,37,25,35],[27,2,26,0],[27,6,26,4,"kSplineTableSize"],[27,22,26,20],[27,25,26,23],[27,27,26,25],[28,2,27,0],[28,6,27,4,"kSampleStepSize"],[28,21,27,19],[28,24,27,22],[28,27,27,25],[28,31,27,29,"kSplineTableSize"],[28,47,27,45],[28,50,27,48],[28,53,27,51],[28,54,27,52],[29,2,28,0],[29,6,28,4,"float32ArraySupported"],[29,27,28,25],[29,30,28,28],[29,37,28,35,"Float32Array"],[29,49,28,47],[29,54,28,52],[29,64,28,62],[30,2,29,0],[30,11,29,9,"A"],[30,12,29,10,"A"],[30,13,29,11,"aA1"],[30,16,29,14],[30,18,29,16,"aA2"],[30,21,29,19],[30,23,29,21],[31,4,30,2],[31,11,30,9],[31,14,30,12],[31,17,30,15],[31,20,30,18],[31,23,30,21,"aA2"],[31,26,30,24],[31,29,30,27],[31,32,30,30],[31,35,30,33,"aA1"],[31,38,30,36],[32,2,31,0],[33,2,32,0],[33,11,32,9,"B"],[33,12,32,10,"B"],[33,13,32,11,"aA1"],[33,16,32,14],[33,18,32,16,"aA2"],[33,21,32,19],[33,23,32,21],[34,4,33,2],[34,11,33,9],[34,14,33,12],[34,17,33,15,"aA2"],[34,20,33,18],[34,23,33,21],[34,26,33,24],[34,29,33,27,"aA1"],[34,32,33,30],[35,2,34,0],[36,2,35,0],[36,11,35,9,"C"],[36,12,35,10,"C"],[36,13,35,11,"aA1"],[36,16,35,14],[36,18,35,16],[37,4,36,2],[37,11,36,9],[37,14,36,12],[37,17,36,15,"aA1"],[37,20,36,18],[38,2,37,0],[40,2,39,0],[41,2,40,0],[41,11,40,9,"calcBezier"],[41,21,40,19,"calcBezier"],[41,22,40,20,"aT"],[41,24,40,22],[41,26,40,24,"aA1"],[41,29,40,27],[41,31,40,29,"aA2"],[41,34,40,32],[41,36,40,34],[42,4,41,2],[42,11,41,9],[42,12,41,10],[42,13,41,11,"A"],[42,14,41,12],[42,15,41,13,"aA1"],[42,18,41,16],[42,20,41,18,"aA2"],[42,23,41,21],[42,24,41,22],[42,27,41,25,"aT"],[42,29,41,27],[42,32,41,30,"B"],[42,33,41,31],[42,34,41,32,"aA1"],[42,37,41,35],[42,39,41,37,"aA2"],[42,42,41,40],[42,43,41,41],[42,47,41,45,"aT"],[42,49,41,47],[42,52,41,50,"C"],[42,53,41,51],[42,54,41,52,"aA1"],[42,57,41,55],[42,58,41,56],[42,62,41,60,"aT"],[42,64,41,62],[43,2,42,0],[45,2,44,0],[46,2,45,0],[46,11,45,9,"getSlope"],[46,19,45,17,"getSlope"],[46,20,45,18,"aT"],[46,22,45,20],[46,24,45,22,"aA1"],[46,27,45,25],[46,29,45,27,"aA2"],[46,32,45,30],[46,34,45,32],[47,4,46,2],[47,11,46,9],[47,14,46,12],[47,17,46,15,"A"],[47,18,46,16],[47,19,46,17,"aA1"],[47,22,46,20],[47,24,46,22,"aA2"],[47,27,46,25],[47,28,46,26],[47,31,46,29,"aT"],[47,33,46,31],[47,36,46,34,"aT"],[47,38,46,36],[47,41,46,39],[47,44,46,42],[47,47,46,45,"B"],[47,48,46,46],[47,49,46,47,"aA1"],[47,52,46,50],[47,54,46,52,"aA2"],[47,57,46,55],[47,58,46,56],[47,61,46,59,"aT"],[47,63,46,61],[47,66,46,64,"C"],[47,67,46,65],[47,68,46,66,"aA1"],[47,71,46,69],[47,72,46,70],[48,2,47,0],[49,2,48,0],[49,11,48,9,"binarySubdivide"],[49,26,48,24,"binarySubdivide"],[49,27,48,25,"aX"],[49,29,48,27],[49,31,48,29,"_aA"],[49,34,48,32],[49,36,48,34,"_aB"],[49,39,48,37],[49,41,48,39,"mX1"],[49,44,48,42],[49,46,48,44,"mX2"],[49,49,48,47],[49,51,48,49],[50,4,49,2],[50,8,49,6,"currentX"],[50,16,49,14],[51,6,50,4,"currentT"],[51,14,50,12],[52,6,51,4,"i"],[52,7,51,5],[52,10,51,8],[52,11,51,9],[53,6,52,4,"aA"],[53,8,52,6],[53,11,52,9,"_aA"],[53,14,52,12],[54,6,53,4,"aB"],[54,8,53,6],[54,11,53,9,"_aB"],[54,14,53,12],[55,4,54,2],[55,7,54,5],[56,6,55,4,"currentT"],[56,14,55,12],[56,17,55,15,"aA"],[56,19,55,17],[56,22,55,20],[56,23,55,21,"aB"],[56,25,55,23],[56,28,55,26,"aA"],[56,30,55,28],[56,34,55,32],[56,37,55,35],[57,6,56,4,"currentX"],[57,14,56,12],[57,17,56,15,"calcBezier"],[57,27,56,25],[57,28,56,26,"currentT"],[57,36,56,34],[57,38,56,36,"mX1"],[57,41,56,39],[57,43,56,41,"mX2"],[57,46,56,44],[57,47,56,45],[57,50,56,48,"aX"],[57,52,56,50],[58,6,57,4],[58,10,57,8,"currentX"],[58,18,57,16],[58,21,57,19],[58,24,57,22],[58,26,57,24],[59,8,58,6,"aB"],[59,10,58,8],[59,13,58,11,"currentT"],[59,21,58,19],[60,6,59,4],[60,7,59,5],[60,13,59,11],[61,8,60,6,"aA"],[61,10,60,8],[61,13,60,11,"currentT"],[61,21,60,19],[62,6,61,4],[63,4,62,2],[63,5,62,3],[63,13,62,11,"Math"],[63,17,62,15],[63,18,62,16,"abs"],[63,21,62,19],[63,22,62,20,"currentX"],[63,30,62,28],[63,31,62,29],[63,34,62,32,"SUBDIVISION_PRECISION"],[63,55,62,53],[63,59,62,57],[63,61,62,59,"i"],[63,62,62,60],[63,65,62,63,"SUBDIVISION_MAX_ITERATIONS"],[63,91,62,89],[64,4,63,2],[64,11,63,9,"currentT"],[64,19,63,17],[65,2,64,0],[66,2,65,0],[66,11,65,9,"newtonRaphsonIterate"],[66,31,65,29,"newtonRaphsonIterate"],[66,32,65,30,"aX"],[66,34,65,32],[66,36,65,34,"_aGuessT"],[66,44,65,42],[66,46,65,44,"mX1"],[66,49,65,47],[66,51,65,49,"mX2"],[66,54,65,52],[66,56,65,54],[67,4,66,2],[67,8,66,6,"aGuessT"],[67,15,66,13],[67,18,66,16,"_aGuessT"],[67,26,66,24],[68,4,67,2],[68,9,67,7],[68,13,67,11,"i"],[68,14,67,12],[68,17,67,15],[68,18,67,16],[68,20,67,18,"i"],[68,21,67,19],[68,24,67,22,"NEWTON_ITERATIONS"],[68,41,67,39],[68,43,67,41],[68,45,67,43,"i"],[68,46,67,44],[68,48,67,46],[69,6,68,4],[69,10,68,8,"currentSlope"],[69,22,68,20],[69,25,68,23,"getSlope"],[69,33,68,31],[69,34,68,32,"aGuessT"],[69,41,68,39],[69,43,68,41,"mX1"],[69,46,68,44],[69,48,68,46,"mX2"],[69,51,68,49],[69,52,68,50],[70,6,69,4],[70,10,69,8,"currentSlope"],[70,22,69,20],[70,27,69,25],[70,30,69,28],[70,32,69,30],[71,8,70,6],[71,15,70,13,"aGuessT"],[71,22,70,20],[72,6,71,4],[73,6,72,4],[73,10,72,8,"currentX"],[73,18,72,16],[73,21,72,19,"calcBezier"],[73,31,72,29],[73,32,72,30,"aGuessT"],[73,39,72,37],[73,41,72,39,"mX1"],[73,44,72,42],[73,46,72,44,"mX2"],[73,49,72,47],[73,50,72,48],[73,53,72,51,"aX"],[73,55,72,53],[74,6,73,4,"aGuessT"],[74,13,73,11],[74,17,73,15,"currentX"],[74,25,73,23],[74,28,73,26,"currentSlope"],[74,40,73,38],[75,4,74,2],[76,4,75,2],[76,11,75,9,"aGuessT"],[76,18,75,16],[77,2,76,0],[78,2,77,0],[78,11,77,9,"bezier"],[78,17,77,15,"bezier"],[78,18,77,16,"mX1"],[78,21,77,19],[78,23,77,21,"mY1"],[78,26,77,24],[78,28,77,26,"mX2"],[78,31,77,29],[78,33,77,31,"mY2"],[78,36,77,34],[78,38,77,36],[79,4,78,2],[79,8,78,6],[79,10,78,8,"mX1"],[79,13,78,11],[79,17,78,15],[79,18,78,16],[79,22,78,20,"mX1"],[79,25,78,23],[79,29,78,27],[79,30,78,28],[79,34,78,32,"mX2"],[79,37,78,35],[79,41,78,39],[79,42,78,40],[79,46,78,44,"mX2"],[79,49,78,47],[79,53,78,51],[79,54,78,52],[79,55,78,53],[79,57,78,55],[80,6,79,4],[80,12,79,10],[80,16,79,14,"Error"],[80,21,79,19],[80,22,79,20],[80,63,79,61],[80,64,79,62],[81,4,80,2],[83,4,82,2],[84,4,83,2],[84,8,83,6,"sampleValues"],[84,20,83,18],[84,23,83,21,"float32ArraySupported"],[84,44,83,42],[84,47,83,45],[84,51,83,49,"Float32Array"],[84,63,83,61],[84,64,83,62,"kSplineTableSize"],[84,80,83,78],[84,81,83,79],[84,84,83,82],[84,88,83,86,"Array"],[84,93,83,91],[84,94,83,92,"kSplineTableSize"],[84,110,83,108],[84,111,83,109],[85,4,84,2],[85,8,84,6,"mX1"],[85,11,84,9],[85,16,84,14,"mY1"],[85,19,84,17],[85,23,84,21,"mX2"],[85,26,84,24],[85,31,84,29,"mY2"],[85,34,84,32],[85,36,84,34],[86,6,85,4],[86,11,85,9],[86,15,85,13,"i"],[86,16,85,14],[86,19,85,17],[86,20,85,18],[86,22,85,20,"i"],[86,23,85,21],[86,26,85,24,"kSplineTableSize"],[86,42,85,40],[86,44,85,42],[86,46,85,44,"i"],[86,47,85,45],[86,49,85,47],[87,8,86,6,"sampleValues"],[87,20,86,18],[87,21,86,19,"i"],[87,22,86,20],[87,23,86,21],[87,26,86,24,"calcBezier"],[87,36,86,34],[87,37,86,35,"i"],[87,38,86,36],[87,41,86,39,"kSampleStepSize"],[87,56,86,54],[87,58,86,56,"mX1"],[87,61,86,59],[87,63,86,61,"mX2"],[87,66,86,64],[87,67,86,65],[88,6,87,4],[89,4,88,2],[90,4,89,2],[90,13,89,11,"getTForX"],[90,21,89,19,"getTForX"],[90,22,89,20,"aX"],[90,24,89,22],[90,26,89,24],[91,6,90,4],[91,10,90,8,"intervalStart"],[91,23,90,21],[91,26,90,24],[91,29,90,27],[92,6,91,4],[92,10,91,8,"currentSample"],[92,23,91,21],[92,26,91,24],[92,27,91,25],[93,6,92,4],[93,10,92,8,"lastSample"],[93,20,92,18],[93,23,92,21,"kSplineTableSize"],[93,39,92,37],[93,42,92,40],[93,43,92,41],[94,6,93,4],[94,13,93,11,"currentSample"],[94,26,93,24],[94,31,93,29,"lastSample"],[94,41,93,39],[94,45,93,43,"sampleValues"],[94,57,93,55],[94,58,93,56,"currentSample"],[94,71,93,69],[94,72,93,70],[94,76,93,74,"aX"],[94,78,93,76],[94,80,93,78],[94,82,93,80,"currentSample"],[94,95,93,93],[94,97,93,95],[95,8,94,6,"intervalStart"],[95,21,94,19],[95,25,94,23,"kSampleStepSize"],[95,40,94,38],[96,6,95,4],[97,6,96,4],[97,8,96,6,"currentSample"],[97,21,96,19],[99,6,98,4],[100,6,99,4],[100,10,99,8,"dist"],[100,14,99,12],[100,17,99,15],[100,18,99,16,"aX"],[100,20,99,18],[100,23,99,21,"sampleValues"],[100,35,99,33],[100,36,99,34,"currentSample"],[100,49,99,47],[100,50,99,48],[100,55,99,53,"sampleValues"],[100,67,99,65],[100,68,99,66,"currentSample"],[100,81,99,79],[100,84,99,82],[100,85,99,83],[100,86,99,84],[100,89,99,87,"sampleValues"],[100,101,99,99],[100,102,99,100,"currentSample"],[100,115,99,113],[100,116,99,114],[100,117,99,115],[101,6,100,4],[101,10,100,8,"guessForT"],[101,19,100,17],[101,22,100,20,"intervalStart"],[101,35,100,33],[101,38,100,36,"dist"],[101,42,100,40],[101,45,100,43,"kSampleStepSize"],[101,60,100,58],[102,6,101,4],[102,10,101,8,"initialSlope"],[102,22,101,20],[102,25,101,23,"getSlope"],[102,33,101,31],[102,34,101,32,"guessForT"],[102,43,101,41],[102,45,101,43,"mX1"],[102,48,101,46],[102,50,101,48,"mX2"],[102,53,101,51],[102,54,101,52],[103,6,102,4],[103,10,102,8,"initialSlope"],[103,22,102,20],[103,26,102,24,"NEWTON_MIN_SLOPE"],[103,42,102,40],[103,44,102,42],[104,8,103,6],[104,15,103,13,"newtonRaphsonIterate"],[104,35,103,33],[104,36,103,34,"aX"],[104,38,103,36],[104,40,103,38,"guessForT"],[104,49,103,47],[104,51,103,49,"mX1"],[104,54,103,52],[104,56,103,54,"mX2"],[104,59,103,57],[104,60,103,58],[105,6,104,4],[105,7,104,5],[105,13,104,11],[105,17,104,15,"initialSlope"],[105,29,104,27],[105,34,104,32],[105,37,104,35],[105,39,104,37],[106,8,105,6],[106,15,105,13,"guessForT"],[106,24,105,22],[107,6,106,4],[107,7,106,5],[107,13,106,11],[108,8,107,6],[108,15,107,13,"binarySubdivide"],[108,30,107,28],[108,31,107,29,"aX"],[108,33,107,31],[108,35,107,33,"intervalStart"],[108,48,107,46],[108,50,107,48,"intervalStart"],[108,63,107,61],[108,66,107,64,"kSampleStepSize"],[108,81,107,79],[108,83,107,81,"mX1"],[108,86,107,84],[108,88,107,86,"mX2"],[108,91,107,89],[108,92,107,90],[109,6,108,4],[110,4,109,2],[111,4,110,2],[111,11,110,9],[111,20,110,18,"BezierEasing"],[111,32,110,30,"BezierEasing"],[111,33,110,31,"x"],[111,34,110,32],[111,36,110,34],[112,6,111,4],[112,10,111,8,"mX1"],[112,13,111,11],[112,18,111,16,"mY1"],[112,21,111,19],[112,25,111,23,"mX2"],[112,28,111,26],[112,33,111,31,"mY2"],[112,36,111,34],[112,38,111,36],[113,8,112,6],[113,15,112,13,"x"],[113,16,112,14],[113,17,112,15],[113,18,112,16],[114,6,113,4],[115,6,114,4],[116,6,115,4],[116,10,115,8,"x"],[116,11,115,9],[116,16,115,14],[116,17,115,15],[116,19,115,17],[117,8,116,6],[117,15,116,13],[117,16,116,14],[118,6,117,4],[119,6,118,4],[119,10,118,8,"x"],[119,11,118,9],[119,16,118,14],[119,17,118,15],[119,19,118,17],[120,8,119,6],[120,15,119,13],[120,16,119,14],[121,6,120,4],[122,6,121,4],[122,13,121,11,"calcBezier"],[122,23,121,21],[122,24,121,22,"getTForX"],[122,32,121,30],[122,33,121,31,"x"],[122,34,121,32],[122,35,121,33],[122,37,121,35,"mY1"],[122,40,121,38],[122,42,121,40,"mY2"],[122,45,121,43],[122,46,121,44],[123,4,122,2],[123,5,122,3],[124,2,123,0],[125,2,124,0],[126,2,125,0,"module"],[126,8,125,6],[126,9,125,7,"exports"],[126,16,125,14],[126,19,125,17,"exports"],[126,26,125,24],[126,27,125,25,"default"],[126,34,125,32],[127,0,125,33],[127,3]],"functionMap":{"names":["<global>","A","B","C","calcBezier","getSlope","binarySubdivide","newtonRaphsonIterate","bezier","getTForX","BezierEasing"],"mappings":"AAA;AC4B;CDE;AEC;CFE;AGC;CHE;AIG;CJE;AKG;CLE;AMC;CNgB;AOC;CPW;AQC;ECY;GDoB;SEC;GFY;CRC"},"hasCjsExports":true},"type":"js/module"}]}