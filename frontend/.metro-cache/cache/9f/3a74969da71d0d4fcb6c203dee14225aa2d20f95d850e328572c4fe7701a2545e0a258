{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":29,"index":44},"end":{"line":3,"column":84,"index":99}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createForOfIteratorHelperLoose","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":62,"index":224},"end":{"line":6,"column":126,"index":288}}],"key":"D8hazSpj47mvz7vrnefek88staE=","exportNames":["*"],"imports":1}},{"name":"fbjs/lib/invariant","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":40,"index":331},"end":{"line":7,"column":69,"index":360}}],"key":"ePiUN85REKH0vTLGPPDgdWgjFww=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\").default;\n  exports.__esModule = true;\n  exports.default = void 0;\n  var _createForOfIteratorHelperLoose2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/createForOfIteratorHelperLoose\"));\n  var _invariant = _interopRequireDefault(require(_dependencyMap[2], \"fbjs/lib/invariant\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  class ChildListCollection {\n    constructor() {\n      this._cellKeyToChildren = new Map();\n      this._childrenToCellKey = new Map();\n    }\n    add(list, cellKey) {\n      var _this$_cellKeyToChild;\n      (0, _invariant.default)(!this._childrenToCellKey.has(list), 'Trying to add already present child list');\n      var cellLists = (_this$_cellKeyToChild = this._cellKeyToChildren.get(cellKey)) !== null && _this$_cellKeyToChild !== void 0 ? _this$_cellKeyToChild : new Set();\n      cellLists.add(list);\n      this._cellKeyToChildren.set(cellKey, cellLists);\n      this._childrenToCellKey.set(list, cellKey);\n    }\n    remove(list) {\n      var cellKey = this._childrenToCellKey.get(list);\n      (0, _invariant.default)(cellKey != null, 'Trying to remove non-present child list');\n      this._childrenToCellKey.delete(list);\n      var cellLists = this._cellKeyToChildren.get(cellKey);\n      (0, _invariant.default)(cellLists, '_cellKeyToChildren should contain cellKey');\n      cellLists.delete(list);\n      if (cellLists.size === 0) {\n        this._cellKeyToChildren.delete(cellKey);\n      }\n    }\n    forEach(fn) {\n      for (var _iterator = (0, _createForOfIteratorHelperLoose2.default)(this._cellKeyToChildren.values()), _step; !(_step = _iterator()).done;) {\n        var listSet = _step.value;\n        for (var _iterator2 = (0, _createForOfIteratorHelperLoose2.default)(listSet), _step2; !(_step2 = _iterator2()).done;) {\n          var list = _step2.value;\n          fn(list);\n        }\n      }\n    }\n    forEachInCell(cellKey, fn) {\n      var _this$_cellKeyToChild2;\n      var listSet = (_this$_cellKeyToChild2 = this._cellKeyToChildren.get(cellKey)) !== null && _this$_cellKeyToChild2 !== void 0 ? _this$_cellKeyToChild2 : [];\n      for (var _iterator3 = (0, _createForOfIteratorHelperLoose2.default)(listSet), _step3; !(_step3 = _iterator3()).done;) {\n        var list = _step3.value;\n        fn(list);\n      }\n    }\n    anyInCell(cellKey, fn) {\n      var _this$_cellKeyToChild3;\n      var listSet = (_this$_cellKeyToChild3 = this._cellKeyToChildren.get(cellKey)) !== null && _this$_cellKeyToChild3 !== void 0 ? _this$_cellKeyToChild3 : [];\n      for (var _iterator4 = (0, _createForOfIteratorHelperLoose2.default)(listSet), _step4; !(_step4 = _iterator4()).done;) {\n        var list = _step4.value;\n        if (fn(list)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    size() {\n      return this._childrenToCellKey.size;\n    }\n  }\n  exports.default = ChildListCollection;\n  module.exports = exports.default;\n});","lineCount":77,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"_interopRequireDefault"],[4,28,3,26],[4,31,3,29,"require"],[4,38,3,36],[4,39,3,36,"_dependencyMap"],[4,53,3,36],[4,104,3,83],[4,105,3,84],[4,106,3,85,"default"],[4,113,3,92],[5,2,4,0,"exports"],[5,9,4,7],[5,10,4,8,"__esModule"],[5,20,4,18],[5,23,4,21],[5,27,4,25],[6,2,5,0,"exports"],[6,9,5,7],[6,10,5,8,"default"],[6,17,5,15],[6,20,5,18],[6,25,5,23],[6,26,5,24],[7,2,6,0],[7,6,6,4,"_createForOfIteratorHelperLoose2"],[7,38,6,36],[7,41,6,39,"_interopRequireDefault"],[7,63,6,61],[7,64,6,62,"require"],[7,71,6,69],[7,72,6,69,"_dependencyMap"],[7,86,6,69],[7,146,6,125],[7,147,6,126],[7,148,6,127],[8,2,7,0],[8,6,7,4,"_invariant"],[8,16,7,14],[8,19,7,17,"_interopRequireDefault"],[8,41,7,39],[8,42,7,40,"require"],[8,49,7,47],[8,50,7,47,"_dependencyMap"],[8,64,7,47],[8,89,7,68],[8,90,7,69],[8,91,7,70],[9,2,8,0],[10,0,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[19,2,18,0],[19,8,18,6,"ChildListCollection"],[19,27,18,25],[19,28,18,26],[20,4,19,2,"constructor"],[20,15,19,13,"constructor"],[20,16,19,13],[20,18,19,16],[21,6,20,4],[21,10,20,8],[21,11,20,9,"_cellKeyToChildren"],[21,29,20,27],[21,32,20,30],[21,36,20,34,"Map"],[21,39,20,37],[21,40,20,38],[21,41,20,39],[22,6,21,4],[22,10,21,8],[22,11,21,9,"_childrenToCellKey"],[22,29,21,27],[22,32,21,30],[22,36,21,34,"Map"],[22,39,21,37],[22,40,21,38],[22,41,21,39],[23,4,22,2],[24,4,23,2,"add"],[24,7,23,5,"add"],[24,8,23,6,"list"],[24,12,23,10],[24,14,23,12,"cellKey"],[24,21,23,19],[24,23,23,21],[25,6,24,4],[25,10,24,8,"_this$_cellKeyToChild"],[25,31,24,29],[26,6,25,4],[26,7,25,5],[26,8,25,6],[26,10,25,8,"_invariant"],[26,20,25,18],[26,21,25,19,"default"],[26,28,25,26],[26,30,25,28],[26,31,25,29],[26,35,25,33],[26,36,25,34,"_childrenToCellKey"],[26,54,25,52],[26,55,25,53,"has"],[26,58,25,56],[26,59,25,57,"list"],[26,63,25,61],[26,64,25,62],[26,66,25,64],[26,108,25,106],[26,109,25,107],[27,6,26,4],[27,10,26,8,"cellLists"],[27,19,26,17],[27,22,26,20],[27,23,26,21,"_this$_cellKeyToChild"],[27,44,26,42],[27,47,26,45],[27,51,26,49],[27,52,26,50,"_cellKeyToChildren"],[27,70,26,68],[27,71,26,69,"get"],[27,74,26,72],[27,75,26,73,"cellKey"],[27,82,26,80],[27,83,26,81],[27,89,26,87],[27,93,26,91],[27,97,26,95,"_this$_cellKeyToChild"],[27,118,26,116],[27,123,26,121],[27,128,26,126],[27,129,26,127],[27,132,26,130,"_this$_cellKeyToChild"],[27,153,26,151],[27,156,26,154],[27,160,26,158,"Set"],[27,163,26,161],[27,164,26,162],[27,165,26,163],[28,6,27,4,"cellLists"],[28,15,27,13],[28,16,27,14,"add"],[28,19,27,17],[28,20,27,18,"list"],[28,24,27,22],[28,25,27,23],[29,6,28,4],[29,10,28,8],[29,11,28,9,"_cellKeyToChildren"],[29,29,28,27],[29,30,28,28,"set"],[29,33,28,31],[29,34,28,32,"cellKey"],[29,41,28,39],[29,43,28,41,"cellLists"],[29,52,28,50],[29,53,28,51],[30,6,29,4],[30,10,29,8],[30,11,29,9,"_childrenToCellKey"],[30,29,29,27],[30,30,29,28,"set"],[30,33,29,31],[30,34,29,32,"list"],[30,38,29,36],[30,40,29,38,"cellKey"],[30,47,29,45],[30,48,29,46],[31,4,30,2],[32,4,31,2,"remove"],[32,10,31,8,"remove"],[32,11,31,9,"list"],[32,15,31,13],[32,17,31,15],[33,6,32,4],[33,10,32,8,"cellKey"],[33,17,32,15],[33,20,32,18],[33,24,32,22],[33,25,32,23,"_childrenToCellKey"],[33,43,32,41],[33,44,32,42,"get"],[33,47,32,45],[33,48,32,46,"list"],[33,52,32,50],[33,53,32,51],[34,6,33,4],[34,7,33,5],[34,8,33,6],[34,10,33,8,"_invariant"],[34,20,33,18],[34,21,33,19,"default"],[34,28,33,26],[34,30,33,28,"cellKey"],[34,37,33,35],[34,41,33,39],[34,45,33,43],[34,47,33,45],[34,88,33,86],[34,89,33,87],[35,6,34,4],[35,10,34,8],[35,11,34,9,"_childrenToCellKey"],[35,29,34,27],[35,30,34,28,"delete"],[35,36,34,34],[35,37,34,35,"list"],[35,41,34,39],[35,42,34,40],[36,6,35,4],[36,10,35,8,"cellLists"],[36,19,35,17],[36,22,35,20],[36,26,35,24],[36,27,35,25,"_cellKeyToChildren"],[36,45,35,43],[36,46,35,44,"get"],[36,49,35,47],[36,50,35,48,"cellKey"],[36,57,35,55],[36,58,35,56],[37,6,36,4],[37,7,36,5],[37,8,36,6],[37,10,36,8,"_invariant"],[37,20,36,18],[37,21,36,19,"default"],[37,28,36,26],[37,30,36,28,"cellLists"],[37,39,36,37],[37,41,36,39],[37,84,36,82],[37,85,36,83],[38,6,37,4,"cellLists"],[38,15,37,13],[38,16,37,14,"delete"],[38,22,37,20],[38,23,37,21,"list"],[38,27,37,25],[38,28,37,26],[39,6,38,4],[39,10,38,8,"cellLists"],[39,19,38,17],[39,20,38,18,"size"],[39,24,38,22],[39,29,38,27],[39,30,38,28],[39,32,38,30],[40,8,39,6],[40,12,39,10],[40,13,39,11,"_cellKeyToChildren"],[40,31,39,29],[40,32,39,30,"delete"],[40,38,39,36],[40,39,39,37,"cellKey"],[40,46,39,44],[40,47,39,45],[41,6,40,4],[42,4,41,2],[43,4,42,2,"forEach"],[43,11,42,9,"forEach"],[43,12,42,10,"fn"],[43,14,42,12],[43,16,42,14],[44,6,43,4],[44,11,43,9],[44,15,43,13,"_iterator"],[44,24,43,22],[44,27,43,25],[44,28,43,26],[44,29,43,27],[44,31,43,29,"_createForOfIteratorHelperLoose2"],[44,63,43,61],[44,64,43,62,"default"],[44,71,43,69],[44,73,43,71],[44,77,43,75],[44,78,43,76,"_cellKeyToChildren"],[44,96,43,94],[44,97,43,95,"values"],[44,103,43,101],[44,104,43,102],[44,105,43,103],[44,106,43,104],[44,108,43,106,"_step"],[44,113,43,111],[44,115,43,113],[44,116,43,114],[44,117,43,115,"_step"],[44,122,43,120],[44,125,43,123,"_iterator"],[44,134,43,132],[44,135,43,133],[44,136,43,134],[44,138,43,136,"done"],[44,142,43,140],[44,145,43,143],[45,8,44,6],[45,12,44,10,"listSet"],[45,19,44,17],[45,22,44,20,"_step"],[45,27,44,25],[45,28,44,26,"value"],[45,33,44,31],[46,8,45,6],[46,13,45,11],[46,17,45,15,"_iterator2"],[46,27,45,25],[46,30,45,28],[46,31,45,29],[46,32,45,30],[46,34,45,32,"_createForOfIteratorHelperLoose2"],[46,66,45,64],[46,67,45,65,"default"],[46,74,45,72],[46,76,45,74,"listSet"],[46,83,45,81],[46,84,45,82],[46,86,45,84,"_step2"],[46,92,45,90],[46,94,45,92],[46,95,45,93],[46,96,45,94,"_step2"],[46,102,45,100],[46,105,45,103,"_iterator2"],[46,115,45,113],[46,116,45,114],[46,117,45,115],[46,119,45,117,"done"],[46,123,45,121],[46,126,45,124],[47,10,46,8],[47,14,46,12,"list"],[47,18,46,16],[47,21,46,19,"_step2"],[47,27,46,25],[47,28,46,26,"value"],[47,33,46,31],[48,10,47,8,"fn"],[48,12,47,10],[48,13,47,11,"list"],[48,17,47,15],[48,18,47,16],[49,8,48,6],[50,6,49,4],[51,4,50,2],[52,4,51,2,"forEachInCell"],[52,17,51,15,"forEachInCell"],[52,18,51,16,"cellKey"],[52,25,51,23],[52,27,51,25,"fn"],[52,29,51,27],[52,31,51,29],[53,6,52,4],[53,10,52,8,"_this$_cellKeyToChild2"],[53,32,52,30],[54,6,53,4],[54,10,53,8,"listSet"],[54,17,53,15],[54,20,53,18],[54,21,53,19,"_this$_cellKeyToChild2"],[54,43,53,41],[54,46,53,44],[54,50,53,48],[54,51,53,49,"_cellKeyToChildren"],[54,69,53,67],[54,70,53,68,"get"],[54,73,53,71],[54,74,53,72,"cellKey"],[54,81,53,79],[54,82,53,80],[54,88,53,86],[54,92,53,90],[54,96,53,94,"_this$_cellKeyToChild2"],[54,118,53,116],[54,123,53,121],[54,128,53,126],[54,129,53,127],[54,132,53,130,"_this$_cellKeyToChild2"],[54,154,53,152],[54,157,53,155],[54,159,53,157],[55,6,54,4],[55,11,54,9],[55,15,54,13,"_iterator3"],[55,25,54,23],[55,28,54,26],[55,29,54,27],[55,30,54,28],[55,32,54,30,"_createForOfIteratorHelperLoose2"],[55,64,54,62],[55,65,54,63,"default"],[55,72,54,70],[55,74,54,72,"listSet"],[55,81,54,79],[55,82,54,80],[55,84,54,82,"_step3"],[55,90,54,88],[55,92,54,90],[55,93,54,91],[55,94,54,92,"_step3"],[55,100,54,98],[55,103,54,101,"_iterator3"],[55,113,54,111],[55,114,54,112],[55,115,54,113],[55,117,54,115,"done"],[55,121,54,119],[55,124,54,122],[56,8,55,6],[56,12,55,10,"list"],[56,16,55,14],[56,19,55,17,"_step3"],[56,25,55,23],[56,26,55,24,"value"],[56,31,55,29],[57,8,56,6,"fn"],[57,10,56,8],[57,11,56,9,"list"],[57,15,56,13],[57,16,56,14],[58,6,57,4],[59,4,58,2],[60,4,59,2,"anyInCell"],[60,13,59,11,"anyInCell"],[60,14,59,12,"cellKey"],[60,21,59,19],[60,23,59,21,"fn"],[60,25,59,23],[60,27,59,25],[61,6,60,4],[61,10,60,8,"_this$_cellKeyToChild3"],[61,32,60,30],[62,6,61,4],[62,10,61,8,"listSet"],[62,17,61,15],[62,20,61,18],[62,21,61,19,"_this$_cellKeyToChild3"],[62,43,61,41],[62,46,61,44],[62,50,61,48],[62,51,61,49,"_cellKeyToChildren"],[62,69,61,67],[62,70,61,68,"get"],[62,73,61,71],[62,74,61,72,"cellKey"],[62,81,61,79],[62,82,61,80],[62,88,61,86],[62,92,61,90],[62,96,61,94,"_this$_cellKeyToChild3"],[62,118,61,116],[62,123,61,121],[62,128,61,126],[62,129,61,127],[62,132,61,130,"_this$_cellKeyToChild3"],[62,154,61,152],[62,157,61,155],[62,159,61,157],[63,6,62,4],[63,11,62,9],[63,15,62,13,"_iterator4"],[63,25,62,23],[63,28,62,26],[63,29,62,27],[63,30,62,28],[63,32,62,30,"_createForOfIteratorHelperLoose2"],[63,64,62,62],[63,65,62,63,"default"],[63,72,62,70],[63,74,62,72,"listSet"],[63,81,62,79],[63,82,62,80],[63,84,62,82,"_step4"],[63,90,62,88],[63,92,62,90],[63,93,62,91],[63,94,62,92,"_step4"],[63,100,62,98],[63,103,62,101,"_iterator4"],[63,113,62,111],[63,114,62,112],[63,115,62,113],[63,117,62,115,"done"],[63,121,62,119],[63,124,62,122],[64,8,63,6],[64,12,63,10,"list"],[64,16,63,14],[64,19,63,17,"_step4"],[64,25,63,23],[64,26,63,24,"value"],[64,31,63,29],[65,8,64,6],[65,12,64,10,"fn"],[65,14,64,12],[65,15,64,13,"list"],[65,19,64,17],[65,20,64,18],[65,22,64,20],[66,10,65,8],[66,17,65,15],[66,21,65,19],[67,8,66,6],[68,6,67,4],[69,6,68,4],[69,13,68,11],[69,18,68,16],[70,4,69,2],[71,4,70,2,"size"],[71,8,70,6,"size"],[71,9,70,6],[71,11,70,9],[72,6,71,4],[72,13,71,11],[72,17,71,15],[72,18,71,16,"_childrenToCellKey"],[72,36,71,34],[72,37,71,35,"size"],[72,41,71,39],[73,4,72,2],[74,2,73,0],[75,2,74,0,"exports"],[75,9,74,7],[75,10,74,8,"default"],[75,17,74,15],[75,20,74,18,"ChildListCollection"],[75,39,74,37],[76,2,75,0,"module"],[76,8,75,6],[76,9,75,7,"exports"],[76,16,75,14],[76,19,75,17,"exports"],[76,26,75,24],[76,27,75,25,"default"],[76,34,75,32],[77,0,75,33],[77,3]],"functionMap":{"names":["<global>","ChildListCollection","constructor","add","remove","forEach","forEachInCell","anyInCell","size"],"mappings":"AAA;ACiB;ECC;GDG;EEC;GFO;EGC;GHU;EIC;GJQ;EKC;GLO;EMC;GNU;EOC;GPE;CDC"},"hasCjsExports":true},"type":"js/module"}]}