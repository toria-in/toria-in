{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  'use strict';\n\n  exports.__esModule = true;\n  exports.computeWindowedRenderLimits = computeWindowedRenderLimits;\n  exports.elementsThatOverlapOffsets = elementsThatOverlapOffsets;\n  exports.keyExtractor = keyExtractor;\n  exports.newRangeCount = newRangeCount;\n  /**\n   * Used to find the indices of the frames that overlap the given offsets. Useful for finding the\n   * items that bound different windows of content, such as the visible area or the buffered overscan\n   * area.\n   */\n  function elementsThatOverlapOffsets(offsets, props, getFrameMetrics, zoomScale) {\n    if (zoomScale === void 0) {\n      zoomScale = 1;\n    }\n    var itemCount = props.getItemCount(props.data);\n    var result = [];\n    for (var offsetIndex = 0; offsetIndex < offsets.length; offsetIndex++) {\n      var currentOffset = offsets[offsetIndex];\n      var left = 0;\n      var right = itemCount - 1;\n      while (left <= right) {\n        // eslint-disable-next-line no-bitwise\n        var mid = left + (right - left >>> 1);\n        var frame = getFrameMetrics(mid, props);\n        var scaledOffsetStart = frame.offset * zoomScale;\n        var scaledOffsetEnd = (frame.offset + frame.length) * zoomScale;\n\n        // We want the first frame that contains the offset, with inclusive bounds. Thus, for the\n        // first frame the scaledOffsetStart is inclusive, while for other frames it is exclusive.\n        if (mid === 0 && currentOffset < scaledOffsetStart || mid !== 0 && currentOffset <= scaledOffsetStart) {\n          right = mid - 1;\n        } else if (currentOffset > scaledOffsetEnd) {\n          left = mid + 1;\n        } else {\n          result[offsetIndex] = mid;\n          break;\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Computes the number of elements in the `next` range that are new compared to the `prev` range.\n   * Handy for calculating how many new items will be rendered when the render window changes so we\n   * can restrict the number of new items render at once so that content can appear on the screen\n   * faster.\n   */\n  function newRangeCount(prev, next) {\n    return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));\n  }\n\n  /**\n   * Custom logic for determining which items should be rendered given the current frame and scroll\n   * metrics, as well as the previous render state. The algorithm may evolve over time, but generally\n   * prioritizes the visible area first, then expands that with overscan regions ahead and behind,\n   * biased in the direction of scroll.\n   */\n  function computeWindowedRenderLimits(props, maxToRenderPerBatch, windowSize, prev, getFrameMetricsApprox, scrollMetrics) {\n    var itemCount = props.getItemCount(props.data);\n    if (itemCount === 0) {\n      return {\n        first: 0,\n        last: -1\n      };\n    }\n    var offset = scrollMetrics.offset,\n      velocity = scrollMetrics.velocity,\n      visibleLength = scrollMetrics.visibleLength,\n      _scrollMetrics$zoomSc = scrollMetrics.zoomScale,\n      zoomScale = _scrollMetrics$zoomSc === void 0 ? 1 : _scrollMetrics$zoomSc;\n\n    // Start with visible area, then compute maximum overscan region by expanding from there, biased\n    // in the direction of scroll. Total overscan area is capped, which should cap memory consumption\n    // too.\n    var visibleBegin = Math.max(0, offset);\n    var visibleEnd = visibleBegin + visibleLength;\n    var overscanLength = (windowSize - 1) * visibleLength;\n\n    // Considering velocity seems to introduce more churn than it's worth.\n    var leadFactor = 0.5; // Math.max(0, Math.min(1, velocity / 25 + 0.5));\n\n    var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';\n    var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);\n    var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);\n    var lastItemOffset = getFrameMetricsApprox(itemCount - 1, props).offset * zoomScale;\n    if (lastItemOffset < overscanBegin) {\n      // Entire list is before our overscan window\n      return {\n        first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),\n        last: itemCount - 1\n      };\n    }\n\n    // Find the indices that correspond to the items at the render boundaries we're targeting.\n    var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props, getFrameMetricsApprox, zoomScale),\n      overscanFirst = _elementsThatOverlapO[0],\n      first = _elementsThatOverlapO[1],\n      last = _elementsThatOverlapO[2],\n      overscanLast = _elementsThatOverlapO[3];\n    overscanFirst = overscanFirst == null ? 0 : overscanFirst;\n    first = first == null ? Math.max(0, overscanFirst) : first;\n    overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;\n    last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;\n    var visible = {\n      first,\n      last\n    };\n\n    // We want to limit the number of new cells we're rendering per batch so that we can fill the\n    // content on the screen quickly. If we rendered the entire overscan window at once, the user\n    // could be staring at white space for a long time waiting for a bunch of offscreen content to\n    // render.\n    var newCellCount = newRangeCount(prev, visible);\n    while (true) {\n      if (first <= overscanFirst && last >= overscanLast) {\n        // If we fill the entire overscan range, we're done.\n        break;\n      }\n      var maxNewCells = newCellCount >= maxToRenderPerBatch;\n      var firstWillAddMore = first <= prev.first || first > prev.last;\n      var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);\n      var lastWillAddMore = last >= prev.last || last < prev.first;\n      var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);\n      if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {\n        // We only want to stop if we've hit maxNewCells AND we cannot increment first or last\n        // without rendering new items. This let's us preserve as many already rendered items as\n        // possible, reducing render churn and keeping the rendered overscan range as large as\n        // possible.\n        break;\n      }\n      if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {\n        if (firstWillAddMore) {\n          newCellCount++;\n        }\n        first--;\n      }\n      if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {\n        if (lastWillAddMore) {\n          newCellCount++;\n        }\n        last++;\n      }\n    }\n    if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {\n      throw new Error('Bad window calculation ' + JSON.stringify({\n        first,\n        last,\n        itemCount,\n        overscanFirst,\n        overscanLast,\n        visible\n      }));\n    }\n    return {\n      first,\n      last\n    };\n  }\n  function keyExtractor(item, index) {\n    if (typeof item === 'object' && (item == null ? void 0 : item.key) != null) {\n      return item.key;\n    }\n    if (typeof item === 'object' && (item == null ? void 0 : item.id) != null) {\n      return item.id;\n    }\n    return String(index);\n  }\n});","lineCount":182,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,13,0,"exports"],[14,9,13,7],[14,10,13,8,"__esModule"],[14,20,13,18],[14,23,13,21],[14,27,13,25],[15,2,14,0,"exports"],[15,9,14,7],[15,10,14,8,"computeWindowedRenderLimits"],[15,37,14,35],[15,40,14,38,"computeWindowedRenderLimits"],[15,67,14,65],[16,2,15,0,"exports"],[16,9,15,7],[16,10,15,8,"elementsThatOverlapOffsets"],[16,36,15,34],[16,39,15,37,"elementsThatOverlapOffsets"],[16,65,15,63],[17,2,16,0,"exports"],[17,9,16,7],[17,10,16,8,"keyExtractor"],[17,22,16,20],[17,25,16,23,"keyExtractor"],[17,37,16,35],[18,2,17,0,"exports"],[18,9,17,7],[18,10,17,8,"newRangeCount"],[18,23,17,21],[18,26,17,24,"newRangeCount"],[18,39,17,37],[19,2,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[24,2,23,0],[24,11,23,9,"elementsThatOverlapOffsets"],[24,37,23,35,"elementsThatOverlapOffsets"],[24,38,23,36,"offsets"],[24,45,23,43],[24,47,23,45,"props"],[24,52,23,50],[24,54,23,52,"getFrameMetrics"],[24,69,23,67],[24,71,23,69,"zoomScale"],[24,80,23,78],[24,82,23,80],[25,4,24,2],[25,8,24,6,"zoomScale"],[25,17,24,15],[25,22,24,20],[25,27,24,25],[25,28,24,26],[25,30,24,28],[26,6,25,4,"zoomScale"],[26,15,25,13],[26,18,25,16],[26,19,25,17],[27,4,26,2],[28,4,27,2],[28,8,27,6,"itemCount"],[28,17,27,15],[28,20,27,18,"props"],[28,25,27,23],[28,26,27,24,"getItemCount"],[28,38,27,36],[28,39,27,37,"props"],[28,44,27,42],[28,45,27,43,"data"],[28,49,27,47],[28,50,27,48],[29,4,28,2],[29,8,28,6,"result"],[29,14,28,12],[29,17,28,15],[29,19,28,17],[30,4,29,2],[30,9,29,7],[30,13,29,11,"offsetIndex"],[30,24,29,22],[30,27,29,25],[30,28,29,26],[30,30,29,28,"offsetIndex"],[30,41,29,39],[30,44,29,42,"offsets"],[30,51,29,49],[30,52,29,50,"length"],[30,58,29,56],[30,60,29,58,"offsetIndex"],[30,71,29,69],[30,73,29,71],[30,75,29,73],[31,6,30,4],[31,10,30,8,"currentOffset"],[31,23,30,21],[31,26,30,24,"offsets"],[31,33,30,31],[31,34,30,32,"offsetIndex"],[31,45,30,43],[31,46,30,44],[32,6,31,4],[32,10,31,8,"left"],[32,14,31,12],[32,17,31,15],[32,18,31,16],[33,6,32,4],[33,10,32,8,"right"],[33,15,32,13],[33,18,32,16,"itemCount"],[33,27,32,25],[33,30,32,28],[33,31,32,29],[34,6,33,4],[34,13,33,11,"left"],[34,17,33,15],[34,21,33,19,"right"],[34,26,33,24],[34,28,33,26],[35,8,34,6],[36,8,35,6],[36,12,35,10,"mid"],[36,15,35,13],[36,18,35,16,"left"],[36,22,35,20],[36,26,35,24,"right"],[36,31,35,29],[36,34,35,32,"left"],[36,38,35,36],[36,43,35,41],[36,44,35,42],[36,45,35,43],[37,8,36,6],[37,12,36,10,"frame"],[37,17,36,15],[37,20,36,18,"getFrameMetrics"],[37,35,36,33],[37,36,36,34,"mid"],[37,39,36,37],[37,41,36,39,"props"],[37,46,36,44],[37,47,36,45],[38,8,37,6],[38,12,37,10,"scaledOffsetStart"],[38,29,37,27],[38,32,37,30,"frame"],[38,37,37,35],[38,38,37,36,"offset"],[38,44,37,42],[38,47,37,45,"zoomScale"],[38,56,37,54],[39,8,38,6],[39,12,38,10,"scaledOffsetEnd"],[39,27,38,25],[39,30,38,28],[39,31,38,29,"frame"],[39,36,38,34],[39,37,38,35,"offset"],[39,43,38,41],[39,46,38,44,"frame"],[39,51,38,49],[39,52,38,50,"length"],[39,58,38,56],[39,62,38,60,"zoomScale"],[39,71,38,69],[41,8,40,6],[42,8,41,6],[43,8,42,6],[43,12,42,10,"mid"],[43,15,42,13],[43,20,42,18],[43,21,42,19],[43,25,42,23,"currentOffset"],[43,38,42,36],[43,41,42,39,"scaledOffsetStart"],[43,58,42,56],[43,62,42,60,"mid"],[43,65,42,63],[43,70,42,68],[43,71,42,69],[43,75,42,73,"currentOffset"],[43,88,42,86],[43,92,42,90,"scaledOffsetStart"],[43,109,42,107],[43,111,42,109],[44,10,43,8,"right"],[44,15,43,13],[44,18,43,16,"mid"],[44,21,43,19],[44,24,43,22],[44,25,43,23],[45,8,44,6],[45,9,44,7],[45,15,44,13],[45,19,44,17,"currentOffset"],[45,32,44,30],[45,35,44,33,"scaledOffsetEnd"],[45,50,44,48],[45,52,44,50],[46,10,45,8,"left"],[46,14,45,12],[46,17,45,15,"mid"],[46,20,45,18],[46,23,45,21],[46,24,45,22],[47,8,46,6],[47,9,46,7],[47,15,46,13],[48,10,47,8,"result"],[48,16,47,14],[48,17,47,15,"offsetIndex"],[48,28,47,26],[48,29,47,27],[48,32,47,30,"mid"],[48,35,47,33],[49,10,48,8],[50,8,49,6],[51,6,50,4],[52,4,51,2],[53,4,52,2],[53,11,52,9,"result"],[53,17,52,15],[54,2,53,0],[56,2,55,0],[57,0,56,0],[58,0,57,0],[59,0,58,0],[60,0,59,0],[61,0,60,0],[62,2,61,0],[62,11,61,9,"newRangeCount"],[62,24,61,22,"newRangeCount"],[62,25,61,23,"prev"],[62,29,61,27],[62,31,61,29,"next"],[62,35,61,33],[62,37,61,35],[63,4,62,2],[63,11,62,9,"next"],[63,15,62,13],[63,16,62,14,"last"],[63,20,62,18],[63,23,62,21,"next"],[63,27,62,25],[63,28,62,26,"first"],[63,33,62,31],[63,36,62,34],[63,37,62,35],[63,40,62,38,"Math"],[63,44,62,42],[63,45,62,43,"max"],[63,48,62,46],[63,49,62,47],[63,50,62,48],[63,52,62,50],[63,53,62,51],[63,56,62,54,"Math"],[63,60,62,58],[63,61,62,59,"min"],[63,64,62,62],[63,65,62,63,"next"],[63,69,62,67],[63,70,62,68,"last"],[63,74,62,72],[63,76,62,74,"prev"],[63,80,62,78],[63,81,62,79,"last"],[63,85,62,83],[63,86,62,84],[63,89,62,87,"Math"],[63,93,62,91],[63,94,62,92,"max"],[63,97,62,95],[63,98,62,96,"next"],[63,102,62,100],[63,103,62,101,"first"],[63,108,62,106],[63,110,62,108,"prev"],[63,114,62,112],[63,115,62,113,"first"],[63,120,62,118],[63,121,62,119],[63,122,62,120],[64,2,63,0],[66,2,65,0],[67,0,66,0],[68,0,67,0],[69,0,68,0],[70,0,69,0],[71,0,70,0],[72,2,71,0],[72,11,71,9,"computeWindowedRenderLimits"],[72,38,71,36,"computeWindowedRenderLimits"],[72,39,71,37,"props"],[72,44,71,42],[72,46,71,44,"maxToRenderPerBatch"],[72,65,71,63],[72,67,71,65,"windowSize"],[72,77,71,75],[72,79,71,77,"prev"],[72,83,71,81],[72,85,71,83,"getFrameMetricsApprox"],[72,106,71,104],[72,108,71,106,"scrollMetrics"],[72,121,71,119],[72,123,71,121],[73,4,72,2],[73,8,72,6,"itemCount"],[73,17,72,15],[73,20,72,18,"props"],[73,25,72,23],[73,26,72,24,"getItemCount"],[73,38,72,36],[73,39,72,37,"props"],[73,44,72,42],[73,45,72,43,"data"],[73,49,72,47],[73,50,72,48],[74,4,73,2],[74,8,73,6,"itemCount"],[74,17,73,15],[74,22,73,20],[74,23,73,21],[74,25,73,23],[75,6,74,4],[75,13,74,11],[76,8,75,6,"first"],[76,13,75,11],[76,15,75,13],[76,16,75,14],[77,8,76,6,"last"],[77,12,76,10],[77,14,76,12],[77,15,76,13],[78,6,77,4],[78,7,77,5],[79,4,78,2],[80,4,79,2],[80,8,79,6,"offset"],[80,14,79,12],[80,17,79,15,"scrollMetrics"],[80,30,79,28],[80,31,79,29,"offset"],[80,37,79,35],[81,6,80,4,"velocity"],[81,14,80,12],[81,17,80,15,"scrollMetrics"],[81,30,80,28],[81,31,80,29,"velocity"],[81,39,80,37],[82,6,81,4,"visibleLength"],[82,19,81,17],[82,22,81,20,"scrollMetrics"],[82,35,81,33],[82,36,81,34,"visibleLength"],[82,49,81,47],[83,6,82,4,"_scrollMetrics$zoomSc"],[83,27,82,25],[83,30,82,28,"scrollMetrics"],[83,43,82,41],[83,44,82,42,"zoomScale"],[83,53,82,51],[84,6,83,4,"zoomScale"],[84,15,83,13],[84,18,83,16,"_scrollMetrics$zoomSc"],[84,39,83,37],[84,44,83,42],[84,49,83,47],[84,50,83,48],[84,53,83,51],[84,54,83,52],[84,57,83,55,"_scrollMetrics$zoomSc"],[84,78,83,76],[86,4,85,2],[87,4,86,2],[88,4,87,2],[89,4,88,2],[89,8,88,6,"visibleBegin"],[89,20,88,18],[89,23,88,21,"Math"],[89,27,88,25],[89,28,88,26,"max"],[89,31,88,29],[89,32,88,30],[89,33,88,31],[89,35,88,33,"offset"],[89,41,88,39],[89,42,88,40],[90,4,89,2],[90,8,89,6,"visibleEnd"],[90,18,89,16],[90,21,89,19,"visibleBegin"],[90,33,89,31],[90,36,89,34,"visibleLength"],[90,49,89,47],[91,4,90,2],[91,8,90,6,"overscanLength"],[91,22,90,20],[91,25,90,23],[91,26,90,24,"windowSize"],[91,36,90,34],[91,39,90,37],[91,40,90,38],[91,44,90,42,"visibleLength"],[91,57,90,55],[93,4,92,2],[94,4,93,2],[94,8,93,6,"leadFactor"],[94,18,93,16],[94,21,93,19],[94,24,93,22],[94,25,93,23],[94,26,93,24],[96,4,95,2],[96,8,95,6,"fillPreference"],[96,22,95,20],[96,25,95,23,"velocity"],[96,33,95,31],[96,36,95,34],[96,37,95,35],[96,40,95,38],[96,47,95,45],[96,50,95,48,"velocity"],[96,58,95,56],[96,61,95,59],[96,62,95,60],[96,63,95,61],[96,66,95,64],[96,74,95,72],[96,77,95,75],[96,83,95,81],[97,4,96,2],[97,8,96,6,"overscanBegin"],[97,21,96,19],[97,24,96,22,"Math"],[97,28,96,26],[97,29,96,27,"max"],[97,32,96,30],[97,33,96,31],[97,34,96,32],[97,36,96,34,"visibleBegin"],[97,48,96,46],[97,51,96,49],[97,52,96,50],[97,53,96,51],[97,56,96,54,"leadFactor"],[97,66,96,64],[97,70,96,68,"overscanLength"],[97,84,96,82],[97,85,96,83],[98,4,97,2],[98,8,97,6,"overscanEnd"],[98,19,97,17],[98,22,97,20,"Math"],[98,26,97,24],[98,27,97,25,"max"],[98,30,97,28],[98,31,97,29],[98,32,97,30],[98,34,97,32,"visibleEnd"],[98,44,97,42],[98,47,97,45,"leadFactor"],[98,57,97,55],[98,60,97,58,"overscanLength"],[98,74,97,72],[98,75,97,73],[99,4,98,2],[99,8,98,6,"lastItemOffset"],[99,22,98,20],[99,25,98,23,"getFrameMetricsApprox"],[99,46,98,44],[99,47,98,45,"itemCount"],[99,56,98,54],[99,59,98,57],[99,60,98,58],[99,62,98,60,"props"],[99,67,98,65],[99,68,98,66],[99,69,98,67,"offset"],[99,75,98,73],[99,78,98,76,"zoomScale"],[99,87,98,85],[100,4,99,2],[100,8,99,6,"lastItemOffset"],[100,22,99,20],[100,25,99,23,"overscanBegin"],[100,38,99,36],[100,40,99,38],[101,6,100,4],[102,6,101,4],[102,13,101,11],[103,8,102,6,"first"],[103,13,102,11],[103,15,102,13,"Math"],[103,19,102,17],[103,20,102,18,"max"],[103,23,102,21],[103,24,102,22],[103,25,102,23],[103,27,102,25,"itemCount"],[103,36,102,34],[103,39,102,37],[103,40,102,38],[103,43,102,41,"maxToRenderPerBatch"],[103,62,102,60],[103,63,102,61],[104,8,103,6,"last"],[104,12,103,10],[104,14,103,12,"itemCount"],[104,23,103,21],[104,26,103,24],[105,6,104,4],[105,7,104,5],[106,4,105,2],[108,4,107,2],[109,4,108,2],[109,8,108,6,"_elementsThatOverlapO"],[109,29,108,27],[109,32,108,30,"elementsThatOverlapOffsets"],[109,58,108,56],[109,59,108,57],[109,60,108,58,"overscanBegin"],[109,73,108,71],[109,75,108,73,"visibleBegin"],[109,87,108,85],[109,89,108,87,"visibleEnd"],[109,99,108,97],[109,101,108,99,"overscanEnd"],[109,112,108,110],[109,113,108,111],[109,115,108,113,"props"],[109,120,108,118],[109,122,108,120,"getFrameMetricsApprox"],[109,143,108,141],[109,145,108,143,"zoomScale"],[109,154,108,152],[109,155,108,153],[110,6,109,4,"overscanFirst"],[110,19,109,17],[110,22,109,20,"_elementsThatOverlapO"],[110,43,109,41],[110,44,109,42],[110,45,109,43],[110,46,109,44],[111,6,110,4,"first"],[111,11,110,9],[111,14,110,12,"_elementsThatOverlapO"],[111,35,110,33],[111,36,110,34],[111,37,110,35],[111,38,110,36],[112,6,111,4,"last"],[112,10,111,8],[112,13,111,11,"_elementsThatOverlapO"],[112,34,111,32],[112,35,111,33],[112,36,111,34],[112,37,111,35],[113,6,112,4,"overscanLast"],[113,18,112,16],[113,21,112,19,"_elementsThatOverlapO"],[113,42,112,40],[113,43,112,41],[113,44,112,42],[113,45,112,43],[114,4,113,2,"overscanFirst"],[114,17,113,15],[114,20,113,18,"overscanFirst"],[114,33,113,31],[114,37,113,35],[114,41,113,39],[114,44,113,42],[114,45,113,43],[114,48,113,46,"overscanFirst"],[114,61,113,59],[115,4,114,2,"first"],[115,9,114,7],[115,12,114,10,"first"],[115,17,114,15],[115,21,114,19],[115,25,114,23],[115,28,114,26,"Math"],[115,32,114,30],[115,33,114,31,"max"],[115,36,114,34],[115,37,114,35],[115,38,114,36],[115,40,114,38,"overscanFirst"],[115,53,114,51],[115,54,114,52],[115,57,114,55,"first"],[115,62,114,60],[116,4,115,2,"overscanLast"],[116,16,115,14],[116,19,115,17,"overscanLast"],[116,31,115,29],[116,35,115,33],[116,39,115,37],[116,42,115,40,"itemCount"],[116,51,115,49],[116,54,115,52],[116,55,115,53],[116,58,115,56,"overscanLast"],[116,70,115,68],[117,4,116,2,"last"],[117,8,116,6],[117,11,116,9,"last"],[117,15,116,13],[117,19,116,17],[117,23,116,21],[117,26,116,24,"Math"],[117,30,116,28],[117,31,116,29,"min"],[117,34,116,32],[117,35,116,33,"overscanLast"],[117,47,116,45],[117,49,116,47,"first"],[117,54,116,52],[117,57,116,55,"maxToRenderPerBatch"],[117,76,116,74],[117,79,116,77],[117,80,116,78],[117,81,116,79],[117,84,116,82,"last"],[117,88,116,86],[118,4,117,2],[118,8,117,6,"visible"],[118,15,117,13],[118,18,117,16],[119,6,118,4,"first"],[119,11,118,9],[120,6,119,4,"last"],[121,4,120,2],[121,5,120,3],[123,4,122,2],[124,4,123,2],[125,4,124,2],[126,4,125,2],[127,4,126,2],[127,8,126,6,"newCellCount"],[127,20,126,18],[127,23,126,21,"newRangeCount"],[127,36,126,34],[127,37,126,35,"prev"],[127,41,126,39],[127,43,126,41,"visible"],[127,50,126,48],[127,51,126,49],[128,4,127,2],[128,11,127,9],[128,15,127,13],[128,17,127,15],[129,6,128,4],[129,10,128,8,"first"],[129,15,128,13],[129,19,128,17,"overscanFirst"],[129,32,128,30],[129,36,128,34,"last"],[129,40,128,38],[129,44,128,42,"overscanLast"],[129,56,128,54],[129,58,128,56],[130,8,129,6],[131,8,130,6],[132,6,131,4],[133,6,132,4],[133,10,132,8,"maxNewCells"],[133,21,132,19],[133,24,132,22,"newCellCount"],[133,36,132,34],[133,40,132,38,"maxToRenderPerBatch"],[133,59,132,57],[134,6,133,4],[134,10,133,8,"firstWillAddMore"],[134,26,133,24],[134,29,133,27,"first"],[134,34,133,32],[134,38,133,36,"prev"],[134,42,133,40],[134,43,133,41,"first"],[134,48,133,46],[134,52,133,50,"first"],[134,57,133,55],[134,60,133,58,"prev"],[134,64,133,62],[134,65,133,63,"last"],[134,69,133,67],[135,6,134,4],[135,10,134,8,"firstShouldIncrement"],[135,30,134,28],[135,33,134,31,"first"],[135,38,134,36],[135,41,134,39,"overscanFirst"],[135,54,134,52],[135,59,134,57],[135,60,134,58,"maxNewCells"],[135,71,134,69],[135,75,134,73],[135,76,134,74,"firstWillAddMore"],[135,92,134,90],[135,93,134,91],[136,6,135,4],[136,10,135,8,"lastWillAddMore"],[136,25,135,23],[136,28,135,26,"last"],[136,32,135,30],[136,36,135,34,"prev"],[136,40,135,38],[136,41,135,39,"last"],[136,45,135,43],[136,49,135,47,"last"],[136,53,135,51],[136,56,135,54,"prev"],[136,60,135,58],[136,61,135,59,"first"],[136,66,135,64],[137,6,136,4],[137,10,136,8,"lastShouldIncrement"],[137,29,136,27],[137,32,136,30,"last"],[137,36,136,34],[137,39,136,37,"overscanLast"],[137,51,136,49],[137,56,136,54],[137,57,136,55,"maxNewCells"],[137,68,136,66],[137,72,136,70],[137,73,136,71,"lastWillAddMore"],[137,88,136,86],[137,89,136,87],[138,6,137,4],[138,10,137,8,"maxNewCells"],[138,21,137,19],[138,25,137,23],[138,26,137,24,"firstShouldIncrement"],[138,46,137,44],[138,50,137,48],[138,51,137,49,"lastShouldIncrement"],[138,70,137,68],[138,72,137,70],[139,8,138,6],[140,8,139,6],[141,8,140,6],[142,8,141,6],[143,8,142,6],[144,6,143,4],[145,6,144,4],[145,10,144,8,"firstShouldIncrement"],[145,30,144,28],[145,34,144,32],[145,36,144,34,"fillPreference"],[145,50,144,48],[145,55,144,53],[145,62,144,60],[145,66,144,64,"lastShouldIncrement"],[145,85,144,83],[145,89,144,87,"lastWillAddMore"],[145,104,144,102],[145,105,144,103],[145,107,144,105],[146,8,145,6],[146,12,145,10,"firstWillAddMore"],[146,28,145,26],[146,30,145,28],[147,10,146,8,"newCellCount"],[147,22,146,20],[147,24,146,22],[148,8,147,6],[149,8,148,6,"first"],[149,13,148,11],[149,15,148,13],[150,6,149,4],[151,6,150,4],[151,10,150,8,"lastShouldIncrement"],[151,29,150,27],[151,33,150,31],[151,35,150,33,"fillPreference"],[151,49,150,47],[151,54,150,52],[151,62,150,60],[151,66,150,64,"firstShouldIncrement"],[151,86,150,84],[151,90,150,88,"firstWillAddMore"],[151,106,150,104],[151,107,150,105],[151,109,150,107],[152,8,151,6],[152,12,151,10,"lastWillAddMore"],[152,27,151,25],[152,29,151,27],[153,10,152,8,"newCellCount"],[153,22,152,20],[153,24,152,22],[154,8,153,6],[155,8,154,6,"last"],[155,12,154,10],[155,14,154,12],[156,6,155,4],[157,4,156,2],[158,4,157,2],[158,8,157,6],[158,10,157,8,"last"],[158,14,157,12],[158,18,157,16,"first"],[158,23,157,21],[158,27,157,25,"first"],[158,32,157,30],[158,36,157,34],[158,37,157,35],[158,41,157,39,"last"],[158,45,157,43],[158,48,157,46,"itemCount"],[158,57,157,55],[158,61,157,59,"first"],[158,66,157,64],[158,70,157,68,"overscanFirst"],[158,83,157,81],[158,87,157,85,"last"],[158,91,157,89],[158,95,157,93,"overscanLast"],[158,107,157,105],[158,111,157,109,"first"],[158,116,157,114],[158,120,157,118,"visible"],[158,127,157,125],[158,128,157,126,"first"],[158,133,157,131],[158,137,157,135,"last"],[158,141,157,139],[158,145,157,143,"visible"],[158,152,157,150],[158,153,157,151,"last"],[158,157,157,155],[158,158,157,156],[158,160,157,158],[159,6,158,4],[159,12,158,10],[159,16,158,14,"Error"],[159,21,158,19],[159,22,158,20],[159,47,158,45],[159,50,158,48,"JSON"],[159,54,158,52],[159,55,158,53,"stringify"],[159,64,158,62],[159,65,158,63],[160,8,159,6,"first"],[160,13,159,11],[161,8,160,6,"last"],[161,12,160,10],[162,8,161,6,"itemCount"],[162,17,161,15],[163,8,162,6,"overscanFirst"],[163,21,162,19],[164,8,163,6,"overscanLast"],[164,20,163,18],[165,8,164,6,"visible"],[166,6,165,4],[166,7,165,5],[166,8,165,6],[166,9,165,7],[167,4,166,2],[168,4,167,2],[168,11,167,9],[169,6,168,4,"first"],[169,11,168,9],[170,6,169,4,"last"],[171,4,170,2],[171,5,170,3],[172,2,171,0],[173,2,172,0],[173,11,172,9,"keyExtractor"],[173,23,172,21,"keyExtractor"],[173,24,172,22,"item"],[173,28,172,26],[173,30,172,28,"index"],[173,35,172,33],[173,37,172,35],[174,4,173,2],[174,8,173,6],[174,15,173,13,"item"],[174,19,173,17],[174,24,173,22],[174,32,173,30],[174,36,173,34],[174,37,173,35,"item"],[174,41,173,39],[174,45,173,43],[174,49,173,47],[174,52,173,50],[174,57,173,55],[174,58,173,56],[174,61,173,59,"item"],[174,65,173,63],[174,66,173,64,"key"],[174,69,173,67],[174,74,173,72],[174,78,173,76],[174,80,173,78],[175,6,174,4],[175,13,174,11,"item"],[175,17,174,15],[175,18,174,16,"key"],[175,21,174,19],[176,4,175,2],[177,4,176,2],[177,8,176,6],[177,15,176,13,"item"],[177,19,176,17],[177,24,176,22],[177,32,176,30],[177,36,176,34],[177,37,176,35,"item"],[177,41,176,39],[177,45,176,43],[177,49,176,47],[177,52,176,50],[177,57,176,55],[177,58,176,56],[177,61,176,59,"item"],[177,65,176,63],[177,66,176,64,"id"],[177,68,176,66],[177,73,176,71],[177,77,176,75],[177,79,176,77],[178,6,177,4],[178,13,177,11,"item"],[178,17,177,15],[178,18,177,16,"id"],[178,20,177,18],[179,4,178,2],[180,4,179,2],[180,11,179,9,"String"],[180,17,179,15],[180,18,179,16,"index"],[180,23,179,21],[180,24,179,22],[181,2,180,0],[182,0,180,1],[182,3]],"functionMap":{"names":["<global>","elementsThatOverlapOffsets","newRangeCount","computeWindowedRenderLimits","keyExtractor"],"mappings":"AAA;ACsB;CD8B;AEQ;CFE;AGQ;CHoG;AIC"},"hasCjsExports":true},"type":"js/module"}]}