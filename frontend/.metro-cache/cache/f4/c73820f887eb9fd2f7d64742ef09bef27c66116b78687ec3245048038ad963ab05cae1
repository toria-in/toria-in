{"dependencies":[{"name":"@react-navigation/native","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":17,"index":147},"end":{"line":5,"column":52,"index":182}}],"key":"uE+cRVNnMKkS9OYKR5fpRqPul5s=","exportNames":["*"],"imports":1}},{"name":"./global-state/utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":16,"index":200},"end":{"line":6,"column":47,"index":231}}],"key":"2cOx3UAq5SFd9tljLVJAJK5T+H4=","exportNames":["*"],"imports":1}},{"name":"./link/href","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":15,"index":248},"end":{"line":7,"column":37,"index":270}}],"key":"bbOjCna2na3KLYIiMI/X7Z9HiTo=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n  'use client';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useNavigation = useNavigation;\n  const native_1 = require(_dependencyMap[0], \"@react-navigation/native\");\n  const utils_1 = require(_dependencyMap[1], \"./global-state/utils\");\n  const href_1 = require(_dependencyMap[2], \"./link/href\");\n  /**\n   * Returns the underlying React Navigation [`navigation` object](https://reactnavigation.org/docs/navigation-object)\n   * to imperatively access layout-specific functionality like `navigation.openDrawer()` in a\n   * [Drawer](/router/advanced/drawer/) layout.\n   *\n   * @example\n   * ```tsx app/index.tsx\n   * import { useNavigation } from 'expo-router';\n   *\n   * export default function Route() {\n   *   // Access the current navigation object for the current route.\n   *   const navigation = useNavigation();\n   *\n   *   return (\n   *     <View>\n   *       <Text onPress={() => {\n   *         // Open the drawer view.\n   *         navigation.openDrawer();\n   *       }}>\n   *         Open Drawer\n   *       </Text>\n   *     </View>\n   *   );\n   * }\n   * ```\n   *\n   * When using nested layouts, you can access higher-order layouts by passing a secondary argument denoting the layout route.\n   * For example, `/menu/_layout.tsx` is nested inside `/app/orders/`, you can use `useNavigation('/orders/menu/')`.\n   *\n   * @example\n   * ```tsx app/orders/menu/index.tsx\n   * import { useNavigation } from 'expo-router';\n   *\n   * export default function MenuRoute() {\n   *   const rootLayout = useNavigation('/');\n   *   const ordersLayout = useNavigation('/orders');\n   *\n   *   // Same as the default results of `useNavigation()` when invoked in this route.\n   *   const parentLayout = useNavigation('/orders/menu');\n   * }\n   * ```\n   *\n   * If you attempt to access a layout that doesn't exist, an error such as\n   * `Could not find parent navigation with route \"/non-existent\"` is thrown.\n   *\n   *\n   * @param parent Provide an absolute path such as `/(root)` to the parent route or a relative path like `../../` to the parent route.\n   * @returns The navigation object for the current route.\n   *\n   * @see React Navigation documentation on [navigation dependent functions](https://reactnavigation.org/docs/navigation-object/#navigator-dependent-functions)\n   * for more information.\n   */\n  function useNavigation(parent) {\n    const rnNavigation = (0, native_1.useNavigation)();\n    let navigation = rnNavigation;\n    let state = (0, native_1.useStateForPath)();\n    if (parent === undefined) {\n      // If no parent is provided, return the current navigation object\n      return navigation;\n    }\n    // Check for the top-level navigator - we cannot fetch anything higher!\n    const currentId = navigation.getId();\n    if (currentId === '' || currentId === `/expo-router/build/views/Navigator`) {\n      return navigation;\n    }\n    if (typeof parent === 'object') {\n      parent = (0, href_1.resolveHref)(parent);\n    }\n    if (parent === '/') {\n      // This is the root navigator\n      return navigation.getParent(`/expo-router/build/views/Navigator`) ?? navigation.getParent(``);\n    } else if (parent?.startsWith('../')) {\n      const names = [];\n      while (state) {\n        const route = state.routes[0];\n        state = route.state;\n        // Don't include the last router, as thats the current route\n        if (state) {\n          names.push(route.name);\n        }\n      }\n      // Removing the trailing slash to make splitting easier\n      const originalParent = parent;\n      if (parent.endsWith('/')) {\n        parent = parent.slice(0, -1);\n      }\n      const segments = parent.split('/');\n      if (!segments.every(segment => segment === '..')) {\n        throw new Error(`Invalid parent path \"${originalParent}\". Only \"../\" segments are allowed when using relative paths.`);\n      }\n      const levels = segments.length;\n      const index = names.length - 1 - levels;\n      if (index < 0) {\n        throw new Error(`Invalid parent path \"${originalParent}\". Cannot go up ${levels} levels from the current route.`);\n      }\n      parent = names[index];\n      // Expo Router navigators use the context key as the name which has a leading `/`\n      // The exception to this are the root stack routes, and the root navigator which uses ''\n      if (parent && !(0, utils_1.getRootStackRouteNames)().includes(parent)) {\n        parent = `/${parent}`;\n      }\n    }\n    navigation = navigation.getParent(parent);\n    if (process.env.NODE_ENV !== 'production') {\n      if (!navigation) {\n        navigation = rnNavigation;\n        const ids = [];\n        while (navigation) {\n          if (navigation.getId()) ids.push(navigation.getId());\n          navigation = navigation.getParent();\n        }\n        throw new Error(`Could not find parent navigation with route \"${parent}\". Available routes are: '${ids.join(\"', '\")}'`);\n      }\n    }\n    return navigation;\n  }\n});","lineCount":128,"map":[[2,2,1,0],[2,14,1,12],[3,2,2,0],[3,14,2,12],[5,2,3,0,"Object"],[5,8,3,6],[5,9,3,7,"defineProperty"],[5,23,3,21],[5,24,3,22,"exports"],[5,31,3,29],[5,33,3,31],[5,45,3,43],[5,47,3,45],[6,4,3,47,"value"],[6,9,3,52],[6,11,3,54],[7,2,3,59],[7,3,3,60],[7,4,3,61],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"useNavigation"],[8,23,4,21],[8,26,4,24,"useNavigation"],[8,39,4,37],[9,2,5,0],[9,8,5,6,"native_1"],[9,16,5,14],[9,19,5,17,"require"],[9,26,5,24],[9,27,5,24,"_dependencyMap"],[9,41,5,24],[9,72,5,51],[9,73,5,52],[10,2,6,0],[10,8,6,6,"utils_1"],[10,15,6,13],[10,18,6,16,"require"],[10,25,6,23],[10,26,6,23,"_dependencyMap"],[10,40,6,23],[10,67,6,46],[10,68,6,47],[11,2,7,0],[11,8,7,6,"href_1"],[11,14,7,12],[11,17,7,15,"require"],[11,24,7,22],[11,25,7,22,"_dependencyMap"],[11,39,7,22],[11,57,7,36],[11,58,7,37],[12,2,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,0,27,0],[32,0,28,0],[33,0,29,0],[34,0,30,0],[35,0,31,0],[36,0,32,0],[37,0,33,0],[38,0,34,0],[39,0,35,0],[40,0,36,0],[41,0,37,0],[42,0,38,0],[43,0,39,0],[44,0,40,0],[45,0,41,0],[46,0,42,0],[47,0,43,0],[48,0,44,0],[49,0,45,0],[50,0,46,0],[51,0,47,0],[52,0,48,0],[53,0,49,0],[54,0,50,0],[55,0,51,0],[56,0,52,0],[57,0,53,0],[58,0,54,0],[59,0,55,0],[60,0,56,0],[61,0,57,0],[62,0,58,0],[63,0,59,0],[64,2,60,0],[64,11,60,9,"useNavigation"],[64,24,60,22,"useNavigation"],[64,25,60,23,"parent"],[64,31,60,29],[64,33,60,31],[65,4,61,4],[65,10,61,10,"rnNavigation"],[65,22,61,22],[65,25,61,25],[65,26,61,26],[65,27,61,27],[65,29,61,29,"native_1"],[65,37,61,37],[65,38,61,38,"useNavigation"],[65,51,61,51],[65,53,61,53],[65,54,61,54],[66,4,62,4],[66,8,62,8,"navigation"],[66,18,62,18],[66,21,62,21,"rnNavigation"],[66,33,62,33],[67,4,63,4],[67,8,63,8,"state"],[67,13,63,13],[67,16,63,16],[67,17,63,17],[67,18,63,18],[67,20,63,20,"native_1"],[67,28,63,28],[67,29,63,29,"useStateForPath"],[67,44,63,44],[67,46,63,46],[67,47,63,47],[68,4,64,4],[68,8,64,8,"parent"],[68,14,64,14],[68,19,64,19,"undefined"],[68,28,64,28],[68,30,64,30],[69,6,65,8],[70,6,66,8],[70,13,66,15,"navigation"],[70,23,66,25],[71,4,67,4],[72,4,68,4],[73,4,69,4],[73,10,69,10,"currentId"],[73,19,69,19],[73,22,69,22,"navigation"],[73,32,69,32],[73,33,69,33,"getId"],[73,38,69,38],[73,39,69,39],[73,40,69,40],[74,4,70,4],[74,8,70,8,"currentId"],[74,17,70,17],[74,22,70,22],[74,24,70,24],[74,28,70,28,"currentId"],[74,37,70,37],[74,42,70,42],[74,78,70,78],[74,80,70,80],[75,6,71,8],[75,13,71,15,"navigation"],[75,23,71,25],[76,4,72,4],[77,4,73,4],[77,8,73,8],[77,15,73,15,"parent"],[77,21,73,21],[77,26,73,26],[77,34,73,34],[77,36,73,36],[78,6,74,8,"parent"],[78,12,74,14],[78,15,74,17],[78,16,74,18],[78,17,74,19],[78,19,74,21,"href_1"],[78,25,74,27],[78,26,74,28,"resolveHref"],[78,37,74,39],[78,39,74,41,"parent"],[78,45,74,47],[78,46,74,48],[79,4,75,4],[80,4,76,4],[80,8,76,8,"parent"],[80,14,76,14],[80,19,76,19],[80,22,76,22],[80,24,76,24],[81,6,77,8],[82,6,78,8],[82,13,78,15,"navigation"],[82,23,78,25],[82,24,78,26,"getParent"],[82,33,78,35],[82,34,78,36],[82,70,78,72],[82,71,78,73],[82,75,78,77,"navigation"],[82,85,78,87],[82,86,78,88,"getParent"],[82,95,78,97],[82,96,78,98],[82,98,78,100],[82,99,78,101],[83,4,79,4],[83,5,79,5],[83,11,80,9],[83,15,80,13,"parent"],[83,21,80,19],[83,23,80,21,"startsWith"],[83,33,80,31],[83,34,80,32],[83,39,80,37],[83,40,80,38],[83,42,80,40],[84,6,81,8],[84,12,81,14,"names"],[84,17,81,19],[84,20,81,22],[84,22,81,24],[85,6,82,8],[85,13,82,15,"state"],[85,18,82,20],[85,20,82,22],[86,8,83,12],[86,14,83,18,"route"],[86,19,83,23],[86,22,83,26,"state"],[86,27,83,31],[86,28,83,32,"routes"],[86,34,83,38],[86,35,83,39],[86,36,83,40],[86,37,83,41],[87,8,84,12,"state"],[87,13,84,17],[87,16,84,20,"route"],[87,21,84,25],[87,22,84,26,"state"],[87,27,84,31],[88,8,85,12],[89,8,86,12],[89,12,86,16,"state"],[89,17,86,21],[89,19,86,23],[90,10,87,16,"names"],[90,15,87,21],[90,16,87,22,"push"],[90,20,87,26],[90,21,87,27,"route"],[90,26,87,32],[90,27,87,33,"name"],[90,31,87,37],[90,32,87,38],[91,8,88,12],[92,6,89,8],[93,6,90,8],[94,6,91,8],[94,12,91,14,"originalParent"],[94,26,91,28],[94,29,91,31,"parent"],[94,35,91,37],[95,6,92,8],[95,10,92,12,"parent"],[95,16,92,18],[95,17,92,19,"endsWith"],[95,25,92,27],[95,26,92,28],[95,29,92,31],[95,30,92,32],[95,32,92,34],[96,8,93,12,"parent"],[96,14,93,18],[96,17,93,21,"parent"],[96,23,93,27],[96,24,93,28,"slice"],[96,29,93,33],[96,30,93,34],[96,31,93,35],[96,33,93,37],[96,34,93,38],[96,35,93,39],[96,36,93,40],[97,6,94,8],[98,6,95,8],[98,12,95,14,"segments"],[98,20,95,22],[98,23,95,25,"parent"],[98,29,95,31],[98,30,95,32,"split"],[98,35,95,37],[98,36,95,38],[98,39,95,41],[98,40,95,42],[99,6,96,8],[99,10,96,12],[99,11,96,13,"segments"],[99,19,96,21],[99,20,96,22,"every"],[99,25,96,27],[99,26,96,29,"segment"],[99,33,96,36],[99,37,96,41,"segment"],[99,44,96,48],[99,49,96,53],[99,53,96,57],[99,54,96,58],[99,56,96,60],[100,8,97,12],[100,14,97,18],[100,18,97,22,"Error"],[100,23,97,27],[100,24,97,28],[100,48,97,52,"originalParent"],[100,62,97,66],[100,125,97,129],[100,126,97,130],[101,6,98,8],[102,6,99,8],[102,12,99,14,"levels"],[102,18,99,20],[102,21,99,23,"segments"],[102,29,99,31],[102,30,99,32,"length"],[102,36,99,38],[103,6,100,8],[103,12,100,14,"index"],[103,17,100,19],[103,20,100,22,"names"],[103,25,100,27],[103,26,100,28,"length"],[103,32,100,34],[103,35,100,37],[103,36,100,38],[103,39,100,41,"levels"],[103,45,100,47],[104,6,101,8],[104,10,101,12,"index"],[104,15,101,17],[104,18,101,20],[104,19,101,21],[104,21,101,23],[105,8,102,12],[105,14,102,18],[105,18,102,22,"Error"],[105,23,102,27],[105,24,102,28],[105,48,102,52,"originalParent"],[105,62,102,66],[105,81,102,85,"levels"],[105,87,102,91],[105,120,102,124],[105,121,102,125],[106,6,103,8],[107,6,104,8,"parent"],[107,12,104,14],[107,15,104,17,"names"],[107,20,104,22],[107,21,104,23,"index"],[107,26,104,28],[107,27,104,29],[108,6,105,8],[109,6,106,8],[110,6,107,8],[110,10,107,12,"parent"],[110,16,107,18],[110,20,107,22],[110,21,107,23],[110,22,107,24],[110,23,107,25],[110,25,107,27,"utils_1"],[110,32,107,34],[110,33,107,35,"getRootStackRouteNames"],[110,55,107,57],[110,57,107,59],[110,58,107,60],[110,59,107,61,"includes"],[110,67,107,69],[110,68,107,70,"parent"],[110,74,107,76],[110,75,107,77],[110,77,107,79],[111,8,108,12,"parent"],[111,14,108,18],[111,17,108,21],[111,21,108,25,"parent"],[111,27,108,31],[111,29,108,33],[112,6,109,8],[113,4,110,4],[114,4,111,4,"navigation"],[114,14,111,14],[114,17,111,17,"navigation"],[114,27,111,27],[114,28,111,28,"getParent"],[114,37,111,37],[114,38,111,38,"parent"],[114,44,111,44],[114,45,111,45],[115,4,112,4],[115,8,112,8,"process"],[115,15,112,15],[115,16,112,16,"env"],[115,19,112,19],[115,20,112,20,"NODE_ENV"],[115,28,112,28],[115,33,112,33],[115,45,112,45],[115,47,112,47],[116,6,113,8],[116,10,113,12],[116,11,113,13,"navigation"],[116,21,113,23],[116,23,113,25],[117,8,114,12,"navigation"],[117,18,114,22],[117,21,114,25,"rnNavigation"],[117,33,114,37],[118,8,115,12],[118,14,115,18,"ids"],[118,17,115,21],[118,20,115,24],[118,22,115,26],[119,8,116,12],[119,15,116,19,"navigation"],[119,25,116,29],[119,27,116,31],[120,10,117,16],[120,14,117,20,"navigation"],[120,24,117,30],[120,25,117,31,"getId"],[120,30,117,36],[120,31,117,37],[120,32,117,38],[120,34,118,20,"ids"],[120,37,118,23],[120,38,118,24,"push"],[120,42,118,28],[120,43,118,29,"navigation"],[120,53,118,39],[120,54,118,40,"getId"],[120,59,118,45],[120,60,118,46],[120,61,118,47],[120,62,118,48],[121,10,119,16,"navigation"],[121,20,119,26],[121,23,119,29,"navigation"],[121,33,119,39],[121,34,119,40,"getParent"],[121,43,119,49],[121,44,119,50],[121,45,119,51],[122,8,120,12],[123,8,121,12],[123,14,121,18],[123,18,121,22,"Error"],[123,23,121,27],[123,24,121,28],[123,72,121,76,"parent"],[123,78,121,82],[123,107,121,111,"ids"],[123,110,121,114],[123,111,121,115,"join"],[123,115,121,119],[123,116,121,120],[123,122,121,126],[123,123,121,127],[123,126,121,130],[123,127,121,131],[124,6,122,8],[125,4,123,4],[126,4,124,4],[126,11,124,11,"navigation"],[126,21,124,21],[127,2,125,0],[128,0,125,1],[128,3]],"functionMap":{"names":["<global>","useNavigation","segments.every$argument_0"],"mappings":"AAA;AC2D;4BCoC,6BD;CD6B"},"hasCjsExports":true},"type":"js/module"}]}