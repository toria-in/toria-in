{"dependencies":[{"name":"tslib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":14,"index":143},"end":{"line":4,"column":30,"index":159}}],"key":"vm88vOsSPZItrLOmMEyUuGkd1y4=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":14,"index":175},"end":{"line":5,"column":30,"index":191}}],"key":"XN65eZP/QkNMzaBAXbG/zPyidpY=","exportNames":["*"],"imports":1}},{"name":"./useUnmountAwareCallbacks","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":33,"index":226},"end":{"line":6,"column":70,"index":263}}],"key":"xt/8bpq069BTrRpJjg7SxhAJ+qs=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useOnLoad = exports.useOnListLoad = void 0;\n  var tslib_1 = require(_dependencyMap[0], \"tslib\");\n  var react_1 = require(_dependencyMap[1], \"react\");\n  var useUnmountAwareCallbacks_1 = require(_dependencyMap[2], \"./useUnmountAwareCallbacks\");\n  // import { ToastAndroid } from \"react-native\";\n  /**\n   * Hook to track when the RecyclerView has loaded its items and notify when loading is complete.\n   * Similar to FlashList's onLoad functionality, this hook tracks the time it takes to render\n   * the initial set of items in the RecyclerView and provides performance metrics.\n   *\n   * @param recyclerViewManager - The RecyclerViewManager instance managing the list\n   * @param onLoad - Optional callback function that will be called when the list has loaded with timing information\n   * @returns Object containing isLoaded state indicating whether the list has completed initial rendering\n   */\n  var useOnListLoad = function (recyclerViewManager, onLoad) {\n    var loadStartTimeRef = (0, react_1.useRef)(Date.now());\n    var _a = tslib_1.__read((0, react_1.useState)(false), 2),\n      isLoaded = _a[0],\n      setIsLoaded = _a[1];\n    var dataLength = recyclerViewManager.getDataLength();\n    // const dataCollector = useRef<number[]>([]);\n    var requestAnimationFrame = (0, useUnmountAwareCallbacks_1.useUnmountAwareAnimationFrame)().requestAnimationFrame;\n    // Track render cycles by collecting elapsed time on each render\n    // useEffect(() => {\n    //   const elapsedTimeInMs = Date.now() - loadStartTimeRef.current;\n    //   dataCollector.current?.push(elapsedTimeInMs);\n    // });\n    (0, react_1.useMemo)(function () {\n      loadStartTimeRef.current = Date.now();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [dataLength]);\n    (0, exports.useOnLoad)(recyclerViewManager, function () {\n      var elapsedTimeInMs = Date.now() - loadStartTimeRef.current;\n      // Commented code below was used for debugging purposes\n      // to display all collected timing data points\n      // const dataCollectorString = dataCollector.current\n      //   ?.map((value) => value.toString())\n      //   .join(\", \");\n      // ToastAndroid?.show(\n      //   `onLoad called after ${dataCollectorString}`,\n      //   ToastAndroid.SHORT\n      // );\n      // console.log(\"----------> dataCollector\", dataCollectorString);\n      // console.log(\"----------> FlashList v2 load in\", `${elapsedTimeInMs} ms`);\n      requestAnimationFrame(function () {\n        onLoad === null || onLoad === void 0 ? void 0 : onLoad({\n          elapsedTimeInMs: elapsedTimeInMs\n        });\n        setIsLoaded(true);\n      });\n    });\n    return {\n      isLoaded: isLoaded\n    };\n  };\n  exports.useOnListLoad = useOnListLoad;\n  /**\n   * Core hook that detects when a RecyclerView has completed its initial layout.\n   * This hook monitors the RecyclerViewManager and triggers the provided callback\n   * once the first layout is complete.\n   *\n   * @param recyclerViewManager - The RecyclerViewManager instance to monitor\n   * @param onLoad - Callback function that will be called once when the first layout is complete\n   */\n  var useOnLoad = function (recyclerViewManager, onLoad) {\n    var isLoaded = (0, react_1.useRef)(false);\n    (0, react_1.useEffect)(function () {\n      // Only trigger onLoad callback once when first layout is complete\n      if (recyclerViewManager.getIsFirstLayoutComplete() && !isLoaded.current) {\n        isLoaded.current = true;\n        onLoad();\n      }\n    });\n  };\n  exports.useOnLoad = useOnLoad;\n});","lineCount":82,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"useOnLoad"],[7,19,3,17],[7,22,3,20,"exports"],[7,29,3,27],[7,30,3,28,"useOnListLoad"],[7,43,3,41],[7,46,3,44],[7,51,3,49],[7,52,3,50],[8,2,4,0],[8,6,4,4,"tslib_1"],[8,13,4,11],[8,16,4,14,"require"],[8,23,4,21],[8,24,4,21,"_dependencyMap"],[8,38,4,21],[8,50,4,29],[8,51,4,30],[9,2,5,0],[9,6,5,4,"react_1"],[9,13,5,11],[9,16,5,14,"require"],[9,23,5,21],[9,24,5,21,"_dependencyMap"],[9,38,5,21],[9,50,5,29],[9,51,5,30],[10,2,6,0],[10,6,6,4,"useUnmountAwareCallbacks_1"],[10,32,6,30],[10,35,6,33,"require"],[10,42,6,40],[10,43,6,40,"_dependencyMap"],[10,57,6,40],[10,90,6,69],[10,91,6,70],[11,2,7,0],[12,2,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,2,17,0],[21,6,17,4,"useOnListLoad"],[21,19,17,17],[21,22,17,20],[21,31,17,20,"useOnListLoad"],[21,32,17,30,"recyclerViewManager"],[21,51,17,49],[21,53,17,51,"onLoad"],[21,59,17,57],[21,61,17,59],[22,4,18,4],[22,8,18,8,"loadStartTimeRef"],[22,24,18,24],[22,27,18,27],[22,28,18,28],[22,29,18,29],[22,31,18,31,"react_1"],[22,38,18,38],[22,39,18,39,"useRef"],[22,45,18,45],[22,47,18,47,"Date"],[22,51,18,51],[22,52,18,52,"now"],[22,55,18,55],[22,56,18,56],[22,57,18,57],[22,58,18,58],[23,4,19,4],[23,8,19,8,"_a"],[23,10,19,10],[23,13,19,13,"tslib_1"],[23,20,19,20],[23,21,19,21,"__read"],[23,27,19,27],[23,28,19,28],[23,29,19,29],[23,30,19,30],[23,32,19,32,"react_1"],[23,39,19,39],[23,40,19,40,"useState"],[23,48,19,48],[23,50,19,50],[23,55,19,55],[23,56,19,56],[23,58,19,58],[23,59,19,59],[23,60,19,60],[24,6,19,62,"isLoaded"],[24,14,19,70],[24,17,19,73,"_a"],[24,19,19,75],[24,20,19,76],[24,21,19,77],[24,22,19,78],[25,6,19,80,"setIsLoaded"],[25,17,19,91],[25,20,19,94,"_a"],[25,22,19,96],[25,23,19,97],[25,24,19,98],[25,25,19,99],[26,4,20,4],[26,8,20,8,"dataLength"],[26,18,20,18],[26,21,20,21,"recyclerViewManager"],[26,40,20,40],[26,41,20,41,"getDataLength"],[26,54,20,54],[26,55,20,55],[26,56,20,56],[27,4,21,4],[28,4,22,4],[28,8,22,8,"requestAnimationFrame"],[28,29,22,29],[28,32,22,32],[28,33,22,33],[28,34,22,34],[28,36,22,36,"useUnmountAwareCallbacks_1"],[28,62,22,62],[28,63,22,63,"useUnmountAwareAnimationFrame"],[28,92,22,92],[28,94,22,94],[28,95,22,95],[28,96,22,96,"requestAnimationFrame"],[28,117,22,117],[29,4,23,4],[30,4,24,4],[31,4,25,4],[32,4,26,4],[33,4,27,4],[34,4,28,4],[34,5,28,5],[34,6,28,6],[34,8,28,8,"react_1"],[34,15,28,15],[34,16,28,16,"useMemo"],[34,23,28,23],[34,25,28,25],[34,37,28,37],[35,6,29,8,"loadStartTimeRef"],[35,22,29,24],[35,23,29,25,"current"],[35,30,29,32],[35,33,29,35,"Date"],[35,37,29,39],[35,38,29,40,"now"],[35,41,29,43],[35,42,29,44],[35,43,29,45],[36,6,30,8],[37,4,31,4],[37,5,31,5],[37,7,31,7],[37,8,31,8,"dataLength"],[37,18,31,18],[37,19,31,19],[37,20,31,20],[38,4,32,4],[38,5,32,5],[38,6,32,6],[38,8,32,8,"exports"],[38,15,32,15],[38,16,32,16,"useOnLoad"],[38,25,32,25],[38,27,32,27,"recyclerViewManager"],[38,46,32,46],[38,48,32,48],[38,60,32,60],[39,6,33,8],[39,10,33,12,"elapsedTimeInMs"],[39,25,33,27],[39,28,33,30,"Date"],[39,32,33,34],[39,33,33,35,"now"],[39,36,33,38],[39,37,33,39],[39,38,33,40],[39,41,33,43,"loadStartTimeRef"],[39,57,33,59],[39,58,33,60,"current"],[39,65,33,67],[40,6,34,8],[41,6,35,8],[42,6,36,8],[43,6,37,8],[44,6,38,8],[45,6,39,8],[46,6,40,8],[47,6,41,8],[48,6,42,8],[49,6,43,8],[50,6,44,8],[51,6,45,8,"requestAnimationFrame"],[51,27,45,29],[51,28,45,30],[51,40,45,42],[52,8,46,12,"onLoad"],[52,14,46,18],[52,19,46,23],[52,23,46,27],[52,27,46,31,"onLoad"],[52,33,46,37],[52,38,46,42],[52,43,46,47],[52,44,46,48],[52,47,46,51],[52,52,46,56],[52,53,46,57],[52,56,46,60,"onLoad"],[52,62,46,66],[52,63,46,67],[53,10,46,69,"elapsedTimeInMs"],[53,25,46,84],[53,27,46,86,"elapsedTimeInMs"],[54,8,46,102],[54,9,46,103],[54,10,46,104],[55,8,47,12,"setIsLoaded"],[55,19,47,23],[55,20,47,24],[55,24,47,28],[55,25,47,29],[56,6,48,8],[56,7,48,9],[56,8,48,10],[57,4,49,4],[57,5,49,5],[57,6,49,6],[58,4,50,4],[58,11,50,11],[59,6,50,13,"isLoaded"],[59,14,50,21],[59,16,50,23,"isLoaded"],[60,4,50,32],[60,5,50,33],[61,2,51,0],[61,3,51,1],[62,2,52,0,"exports"],[62,9,52,7],[62,10,52,8,"useOnListLoad"],[62,23,52,21],[62,26,52,24,"useOnListLoad"],[62,39,52,37],[63,2,53,0],[64,0,54,0],[65,0,55,0],[66,0,56,0],[67,0,57,0],[68,0,58,0],[69,0,59,0],[70,0,60,0],[71,2,61,0],[71,6,61,4,"useOnLoad"],[71,15,61,13],[71,18,61,16],[71,27,61,16,"useOnLoad"],[71,28,61,26,"recyclerViewManager"],[71,47,61,45],[71,49,61,47,"onLoad"],[71,55,61,53],[71,57,61,55],[72,4,62,4],[72,8,62,8,"isLoaded"],[72,16,62,16],[72,19,62,19],[72,20,62,20],[72,21,62,21],[72,23,62,23,"react_1"],[72,30,62,30],[72,31,62,31,"useRef"],[72,37,62,37],[72,39,62,39],[72,44,62,44],[72,45,62,45],[73,4,63,4],[73,5,63,5],[73,6,63,6],[73,8,63,8,"react_1"],[73,15,63,15],[73,16,63,16,"useEffect"],[73,25,63,25],[73,27,63,27],[73,39,63,39],[74,6,64,8],[75,6,65,8],[75,10,65,12,"recyclerViewManager"],[75,29,65,31],[75,30,65,32,"getIsFirstLayoutComplete"],[75,54,65,56],[75,55,65,57],[75,56,65,58],[75,60,65,62],[75,61,65,63,"isLoaded"],[75,69,65,71],[75,70,65,72,"current"],[75,77,65,79],[75,79,65,81],[76,8,66,12,"isLoaded"],[76,16,66,20],[76,17,66,21,"current"],[76,24,66,28],[76,27,66,31],[76,31,66,35],[77,8,67,12,"onLoad"],[77,14,67,18],[77,15,67,19],[77,16,67,20],[78,6,68,8],[79,4,69,4],[79,5,69,5],[79,6,69,6],[80,2,70,0],[80,3,70,1],[81,2,71,0,"exports"],[81,9,71,7],[81,10,71,8,"useOnLoad"],[81,19,71,17],[81,22,71,20,"useOnLoad"],[81,31,71,29],[82,0,71,30],[82,3]],"functionMap":{"names":["<global>","useOnListLoad","<anonymous>","requestAnimationFrame$argument_0","useOnLoad"],"mappings":"AAA;oBCgB;yBCW;KDG;gDCC;8BCa;SDG;KDC;CDE;gBIU;2BFE;KEM;CJC"},"hasCjsExports":true},"type":"js/module"}]}