{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  exports.__esModule = true;\n  exports.default = void 0;\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  /**\n   * EventEmitter manages listeners and publishes events to them.\n   *\n   * EventEmitter accepts a single type parameter that defines the valid events\n   * and associated listener argument(s).\n   *\n   * @example\n   *\n   *   const emitter = new EventEmitter<{\n   *     success: [number, string],\n   *     error: [Error],\n   *   }>();\n   *\n   *   emitter.on('success', (statusCode, responseText) => {...});\n   *   emitter.emit('success', 200, '...');\n   *\n   *   emitter.on('error', error => {...});\n   *   emitter.emit('error', new Error('Resource not found'));\n   *\n   */\n  class EventEmitter {\n    constructor() {\n      this._registry = {};\n    }\n    /**\n     * Registers a listener that is called when the supplied event is emitted.\n     * Returns a subscription that has a `remove` method to undo registration.\n     */\n    addListener(eventType, listener, context) {\n      var registrations = allocate(this._registry, eventType);\n      var registration = {\n        context,\n        listener,\n        remove() {\n          registrations.delete(registration);\n        }\n      };\n      registrations.add(registration);\n      return registration;\n    }\n\n    /**\n     * Emits the supplied event. Additional arguments supplied to `emit` will be\n     * passed through to each of the registered listeners.\n     *\n     * If a listener modifies the listeners registered for the same event, those\n     * changes will not be reflected in the current invocation of `emit`.\n     */\n    emit(eventType) {\n      var registrations = this._registry[eventType];\n      if (registrations != null) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        for (var _i = 0, _arr = [...registrations]; _i < _arr.length; _i++) {\n          var registration = _arr[_i];\n          registration.listener.apply(registration.context, args);\n        }\n      }\n    }\n\n    /**\n     * Removes all registered listeners.\n     */\n    removeAllListeners(eventType) {\n      if (eventType == null) {\n        this._registry = {};\n      } else {\n        delete this._registry[eventType];\n      }\n    }\n\n    /**\n     * Returns the number of registered listeners for the supplied event.\n     */\n    listenerCount(eventType) {\n      var registrations = this._registry[eventType];\n      return registrations == null ? 0 : registrations.size;\n    }\n  }\n  exports.default = EventEmitter;\n  function allocate(registry, eventType) {\n    var registrations = registry[eventType];\n    if (registrations == null) {\n      registrations = new Set();\n      registry[eventType] = registrations;\n    }\n    return registrations;\n  }\n  module.exports = exports.default;\n});","lineCount":106,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"exports"],[4,9,3,7],[4,10,3,8,"__esModule"],[4,20,3,18],[4,23,3,21],[4,27,3,25],[5,2,4,0,"exports"],[5,9,4,7],[5,10,4,8,"default"],[5,17,4,15],[5,20,4,18],[5,25,4,23],[5,26,4,24],[6,2,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[16,2,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[24,0,23,0],[25,0,24,0],[26,0,25,0],[27,0,26,0],[28,0,27,0],[29,0,28,0],[30,0,29,0],[31,0,30,0],[32,0,31,0],[33,0,32,0],[34,0,33,0],[35,0,34,0],[36,2,35,0],[36,8,35,6,"EventEmitter"],[36,20,35,18],[36,21,35,19],[37,4,36,2,"constructor"],[37,15,36,13,"constructor"],[37,16,36,13],[37,18,36,16],[38,6,37,4],[38,10,37,8],[38,11,37,9,"_registry"],[38,20,37,18],[38,23,37,21],[38,24,37,22],[38,25,37,23],[39,4,38,2],[40,4,39,2],[41,0,40,0],[42,0,41,0],[43,0,42,0],[44,4,43,2,"addListener"],[44,15,43,13,"addListener"],[44,16,43,14,"eventType"],[44,25,43,23],[44,27,43,25,"listener"],[44,35,43,33],[44,37,43,35,"context"],[44,44,43,42],[44,46,43,44],[45,6,44,4],[45,10,44,8,"registrations"],[45,23,44,21],[45,26,44,24,"allocate"],[45,34,44,32],[45,35,44,33],[45,39,44,37],[45,40,44,38,"_registry"],[45,49,44,47],[45,51,44,49,"eventType"],[45,60,44,58],[45,61,44,59],[46,6,45,4],[46,10,45,8,"registration"],[46,22,45,20],[46,25,45,23],[47,8,46,6,"context"],[47,15,46,13],[48,8,47,6,"listener"],[48,16,47,14],[49,8,48,6,"remove"],[49,14,48,12,"remove"],[49,15,48,12],[49,17,48,15],[50,10,49,8,"registrations"],[50,23,49,21],[50,24,49,22,"delete"],[50,30,49,28],[50,31,49,29,"registration"],[50,43,49,41],[50,44,49,42],[51,8,50,6],[52,6,51,4],[52,7,51,5],[53,6,52,4,"registrations"],[53,19,52,17],[53,20,52,18,"add"],[53,23,52,21],[53,24,52,22,"registration"],[53,36,52,34],[53,37,52,35],[54,6,53,4],[54,13,53,11,"registration"],[54,25,53,23],[55,4,54,2],[57,4,56,2],[58,0,57,0],[59,0,58,0],[60,0,59,0],[61,0,60,0],[62,0,61,0],[63,0,62,0],[64,4,63,2,"emit"],[64,8,63,6,"emit"],[64,9,63,7,"eventType"],[64,18,63,16],[64,20,63,18],[65,6,64,4],[65,10,64,8,"registrations"],[65,23,64,21],[65,26,64,24],[65,30,64,28],[65,31,64,29,"_registry"],[65,40,64,38],[65,41,64,39,"eventType"],[65,50,64,48],[65,51,64,49],[66,6,65,4],[66,10,65,8,"registrations"],[66,23,65,21],[66,27,65,25],[66,31,65,29],[66,33,65,31],[67,8,66,6],[67,13,66,11],[67,17,66,15,"_len"],[67,21,66,19],[67,24,66,22,"arguments"],[67,33,66,31],[67,34,66,32,"length"],[67,40,66,38],[67,42,66,40,"args"],[67,46,66,44],[67,49,66,47],[67,53,66,51,"Array"],[67,58,66,56],[67,59,66,57,"_len"],[67,63,66,61],[67,66,66,64],[67,67,66,65],[67,70,66,68,"_len"],[67,74,66,72],[67,77,66,75],[67,78,66,76],[67,81,66,79],[67,82,66,80],[67,83,66,81],[67,85,66,83,"_key"],[67,89,66,87],[67,92,66,90],[67,93,66,91],[67,95,66,93,"_key"],[67,99,66,97],[67,102,66,100,"_len"],[67,106,66,104],[67,108,66,106,"_key"],[67,112,66,110],[67,114,66,112],[67,116,66,114],[68,10,67,8,"args"],[68,14,67,12],[68,15,67,13,"_key"],[68,19,67,17],[68,22,67,20],[68,23,67,21],[68,24,67,22],[68,27,67,25,"arguments"],[68,36,67,34],[68,37,67,35,"_key"],[68,41,67,39],[68,42,67,40],[69,8,68,6],[70,8,69,6],[70,13,69,11],[70,17,69,15,"_i"],[70,19,69,17],[70,22,69,20],[70,23,69,21],[70,25,69,23,"_arr"],[70,29,69,27],[70,32,69,30],[70,33,69,31],[70,36,69,34,"registrations"],[70,49,69,47],[70,50,69,48],[70,52,69,50,"_i"],[70,54,69,52],[70,57,69,55,"_arr"],[70,61,69,59],[70,62,69,60,"length"],[70,68,69,66],[70,70,69,68,"_i"],[70,72,69,70],[70,74,69,72],[70,76,69,74],[71,10,70,8],[71,14,70,12,"registration"],[71,26,70,24],[71,29,70,27,"_arr"],[71,33,70,31],[71,34,70,32,"_i"],[71,36,70,34],[71,37,70,35],[72,10,71,8,"registration"],[72,22,71,20],[72,23,71,21,"listener"],[72,31,71,29],[72,32,71,30,"apply"],[72,37,71,35],[72,38,71,36,"registration"],[72,50,71,48],[72,51,71,49,"context"],[72,58,71,56],[72,60,71,58,"args"],[72,64,71,62],[72,65,71,63],[73,8,72,6],[74,6,73,4],[75,4,74,2],[77,4,76,2],[78,0,77,0],[79,0,78,0],[80,4,79,2,"removeAllListeners"],[80,22,79,20,"removeAllListeners"],[80,23,79,21,"eventType"],[80,32,79,30],[80,34,79,32],[81,6,80,4],[81,10,80,8,"eventType"],[81,19,80,17],[81,23,80,21],[81,27,80,25],[81,29,80,27],[82,8,81,6],[82,12,81,10],[82,13,81,11,"_registry"],[82,22,81,20],[82,25,81,23],[82,26,81,24],[82,27,81,25],[83,6,82,4],[83,7,82,5],[83,13,82,11],[84,8,83,6],[84,15,83,13],[84,19,83,17],[84,20,83,18,"_registry"],[84,29,83,27],[84,30,83,28,"eventType"],[84,39,83,37],[84,40,83,38],[85,6,84,4],[86,4,85,2],[88,4,87,2],[89,0,88,0],[90,0,89,0],[91,4,90,2,"listenerCount"],[91,17,90,15,"listenerCount"],[91,18,90,16,"eventType"],[91,27,90,25],[91,29,90,27],[92,6,91,4],[92,10,91,8,"registrations"],[92,23,91,21],[92,26,91,24],[92,30,91,28],[92,31,91,29,"_registry"],[92,40,91,38],[92,41,91,39,"eventType"],[92,50,91,48],[92,51,91,49],[93,6,92,4],[93,13,92,11,"registrations"],[93,26,92,24],[93,30,92,28],[93,34,92,32],[93,37,92,35],[93,38,92,36],[93,41,92,39,"registrations"],[93,54,92,52],[93,55,92,53,"size"],[93,59,92,57],[94,4,93,2],[95,2,94,0],[96,2,95,0,"exports"],[96,9,95,7],[96,10,95,8,"default"],[96,17,95,15],[96,20,95,18,"EventEmitter"],[96,32,95,30],[97,2,96,0],[97,11,96,9,"allocate"],[97,19,96,17,"allocate"],[97,20,96,18,"registry"],[97,28,96,26],[97,30,96,28,"eventType"],[97,39,96,37],[97,41,96,39],[98,4,97,2],[98,8,97,6,"registrations"],[98,21,97,19],[98,24,97,22,"registry"],[98,32,97,30],[98,33,97,31,"eventType"],[98,42,97,40],[98,43,97,41],[99,4,98,2],[99,8,98,6,"registrations"],[99,21,98,19],[99,25,98,23],[99,29,98,27],[99,31,98,29],[100,6,99,4,"registrations"],[100,19,99,17],[100,22,99,20],[100,26,99,24,"Set"],[100,29,99,27],[100,30,99,28],[100,31,99,29],[101,6,100,4,"registry"],[101,14,100,12],[101,15,100,13,"eventType"],[101,24,100,22],[101,25,100,23],[101,28,100,26,"registrations"],[101,41,100,39],[102,4,101,2],[103,4,102,2],[103,11,102,9,"registrations"],[103,24,102,22],[104,2,103,0],[105,2,104,0,"module"],[105,8,104,6],[105,9,104,7,"exports"],[105,16,104,14],[105,19,104,17,"exports"],[105,26,104,24],[105,27,104,25,"default"],[105,34,104,32],[106,0,104,33],[106,3]],"functionMap":{"names":["<global>","EventEmitter","constructor","addListener","registration.remove","emit","removeAllListeners","listenerCount","allocate"],"mappings":"AAA;ACkC;ECC;GDE;EEK;MCK;ODE;GFI;EIS;GJW;EKK;GLM;EMK;GNG;CDC;AQE;CRO"},"hasCjsExports":true},"type":"js/module"}]}