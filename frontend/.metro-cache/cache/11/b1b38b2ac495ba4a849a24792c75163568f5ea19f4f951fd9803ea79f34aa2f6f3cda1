{"dependencies":[{"name":"./thenable.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":20},"end":{"line":2,"column":47,"index":67}}],"key":"kKA5IQ5mf6XoWFagMsmQasyMyhE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"defaultShouldDehydrateMutation\", {\n    enumerable: true,\n    get: function () {\n      return defaultShouldDehydrateMutation;\n    }\n  });\n  Object.defineProperty(exports, \"defaultShouldDehydrateQuery\", {\n    enumerable: true,\n    get: function () {\n      return defaultShouldDehydrateQuery;\n    }\n  });\n  Object.defineProperty(exports, \"dehydrate\", {\n    enumerable: true,\n    get: function () {\n      return dehydrate;\n    }\n  });\n  Object.defineProperty(exports, \"hydrate\", {\n    enumerable: true,\n    get: function () {\n      return hydrate;\n    }\n  });\n  var _thenableJs = require(_dependencyMap[0], \"./thenable.js\");\n  // src/hydration.ts\n\n  function defaultTransformerFn(data) {\n    return data;\n  }\n  function dehydrateMutation(mutation) {\n    return {\n      mutationKey: mutation.options.mutationKey,\n      state: mutation.state,\n      ...(mutation.options.scope && {\n        scope: mutation.options.scope\n      }),\n      ...(mutation.meta && {\n        meta: mutation.meta\n      })\n    };\n  }\n  function dehydrateQuery(query, serializeData, shouldRedactErrors) {\n    return {\n      dehydratedAt: Date.now(),\n      state: {\n        ...query.state,\n        ...(query.state.data !== void 0 && {\n          data: serializeData(query.state.data)\n        })\n      },\n      queryKey: query.queryKey,\n      queryHash: query.queryHash,\n      ...(query.state.status === \"pending\" && {\n        promise: query.promise?.then(serializeData).catch(error => {\n          if (!shouldRedactErrors(error)) {\n            return Promise.reject(error);\n          }\n          if (process.env.NODE_ENV !== \"production\") {\n            console.error(`A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`);\n          }\n          return Promise.reject(new Error(\"redacted\"));\n        })\n      }),\n      ...(query.meta && {\n        meta: query.meta\n      })\n    };\n  }\n  function defaultShouldDehydrateMutation(mutation) {\n    return mutation.state.isPaused;\n  }\n  function defaultShouldDehydrateQuery(query) {\n    return query.state.status === \"success\";\n  }\n  function defaultShouldRedactErrors(_) {\n    return true;\n  }\n  function dehydrate(client, options = {}) {\n    const filterMutation = options.shouldDehydrateMutation ?? client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ?? defaultShouldDehydrateMutation;\n    const mutations = client.getMutationCache().getAll().flatMap(mutation => filterMutation(mutation) ? [dehydrateMutation(mutation)] : []);\n    const filterQuery = options.shouldDehydrateQuery ?? client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ?? defaultShouldDehydrateQuery;\n    const shouldRedactErrors = options.shouldRedactErrors ?? client.getDefaultOptions().dehydrate?.shouldRedactErrors ?? defaultShouldRedactErrors;\n    const serializeData = options.serializeData ?? client.getDefaultOptions().dehydrate?.serializeData ?? defaultTransformerFn;\n    const queries = client.getQueryCache().getAll().flatMap(query => filterQuery(query) ? [dehydrateQuery(query, serializeData, shouldRedactErrors)] : []);\n    return {\n      mutations,\n      queries\n    };\n  }\n  function hydrate(client, dehydratedState, options) {\n    if (typeof dehydratedState !== \"object\" || dehydratedState === null) {\n      return;\n    }\n    const mutationCache = client.getMutationCache();\n    const queryCache = client.getQueryCache();\n    const deserializeData = options?.defaultOptions?.deserializeData ?? client.getDefaultOptions().hydrate?.deserializeData ?? defaultTransformerFn;\n    const mutations = dehydratedState.mutations || [];\n    const queries = dehydratedState.queries || [];\n    mutations.forEach(({\n      state,\n      ...mutationOptions\n    }) => {\n      mutationCache.build(client, {\n        ...client.getDefaultOptions().hydrate?.mutations,\n        ...options?.defaultOptions?.mutations,\n        ...mutationOptions\n      }, state);\n    });\n    queries.forEach(({\n      queryKey,\n      state,\n      queryHash,\n      meta,\n      promise,\n      dehydratedAt\n    }) => {\n      const syncData = promise ? (0, _thenableJs.tryResolveSync)(promise) : void 0;\n      const rawData = state.data === void 0 ? syncData?.data : state.data;\n      const data = rawData === void 0 ? rawData : deserializeData(rawData);\n      let query = queryCache.get(queryHash);\n      const existingQueryIsPending = query?.state.status === \"pending\";\n      const existingQueryIsFetching = query?.state.fetchStatus === \"fetching\";\n      if (query) {\n        const hasNewerSyncData = syncData &&\n        // We only need this undefined check to handle older dehydration\n        // payloads that might not have dehydratedAt\n        dehydratedAt !== void 0 && dehydratedAt > query.state.dataUpdatedAt;\n        if (state.dataUpdatedAt > query.state.dataUpdatedAt || hasNewerSyncData) {\n          const {\n            fetchStatus: _ignored,\n            ...serializedState\n          } = state;\n          query.setState({\n            ...serializedState,\n            data\n          });\n        }\n      } else {\n        query = queryCache.build(client, {\n          ...client.getDefaultOptions().hydrate?.queries,\n          ...options?.defaultOptions?.queries,\n          queryKey,\n          queryHash,\n          meta\n        },\n        // Reset fetch status to idle to avoid\n        // query being stuck in fetching state upon hydration\n        {\n          ...state,\n          data,\n          fetchStatus: \"idle\",\n          status: data !== void 0 ? \"success\" : state.status\n        });\n      }\n      if (promise && !existingQueryIsPending && !existingQueryIsFetching && (\n      // Only hydrate if dehydration is newer than any existing data,\n      // this is always true for new queries\n      dehydratedAt === void 0 || dehydratedAt > query.state.dataUpdatedAt)) {\n        void query.fetch(void 0, {\n          // RSC transformed promises are not thenable\n          initialPromise: Promise.resolve(promise).then(deserializeData)\n        });\n      }\n    });\n  }\n});","lineCount":173,"map":[[7,2,133,0,"Object"],[7,8,133,0],[7,9,133,0,"defineProperty"],[7,23,133,0],[7,24,133,0,"exports"],[7,31,133,0],[8,4,133,0,"enumerable"],[8,14,133,0],[9,4,133,0,"get"],[9,7,133,0],[9,18,133,0,"get"],[9,19,133,0],[10,6,133,0],[10,13,134,2,"defaultShouldDehydrateMutation"],[10,43,134,32],[11,4,134,32],[12,2,134,32],[13,2,133,0,"Object"],[13,8,133,0],[13,9,133,0,"defineProperty"],[13,23,133,0],[13,24,133,0,"exports"],[13,31,133,0],[14,4,133,0,"enumerable"],[14,14,133,0],[15,4,133,0,"get"],[15,7,133,0],[15,18,133,0,"get"],[15,19,133,0],[16,6,133,0],[16,13,135,2,"defaultShouldDehydrateQuery"],[16,40,135,29],[17,4,135,29],[18,2,135,29],[19,2,133,0,"Object"],[19,8,133,0],[19,9,133,0,"defineProperty"],[19,23,133,0],[19,24,133,0,"exports"],[19,31,133,0],[20,4,133,0,"enumerable"],[20,14,133,0],[21,4,133,0,"get"],[21,7,133,0],[21,18,133,0,"get"],[21,19,133,0],[22,6,133,0],[22,13,136,2,"dehydrate"],[22,22,136,11],[23,4,136,11],[24,2,136,11],[25,2,133,0,"Object"],[25,8,133,0],[25,9,133,0,"defineProperty"],[25,23,133,0],[25,24,133,0,"exports"],[25,31,133,0],[26,4,133,0,"enumerable"],[26,14,133,0],[27,4,133,0,"get"],[27,7,133,0],[27,18,133,0,"get"],[27,19,133,0],[28,6,133,0],[28,13,137,2,"hydrate"],[28,20,137,9],[29,4,137,9],[30,2,137,9],[31,2,2,0],[31,6,2,0,"_thenableJs"],[31,17,2,0],[31,20,2,0,"require"],[31,27,2,0],[31,28,2,0,"_dependencyMap"],[31,42,2,0],[32,2,1,0],[34,2,3,0],[34,11,3,9,"defaultTransformerFn"],[34,31,3,29,"defaultTransformerFn"],[34,32,3,30,"data"],[34,36,3,34],[34,38,3,36],[35,4,4,2],[35,11,4,9,"data"],[35,15,4,13],[36,2,5,0],[37,2,6,0],[37,11,6,9,"dehydrateMutation"],[37,28,6,26,"dehydrateMutation"],[37,29,6,27,"mutation"],[37,37,6,35],[37,39,6,37],[38,4,7,2],[38,11,7,9],[39,6,8,4,"mutationKey"],[39,17,8,15],[39,19,8,17,"mutation"],[39,27,8,25],[39,28,8,26,"options"],[39,35,8,33],[39,36,8,34,"mutationKey"],[39,47,8,45],[40,6,9,4,"state"],[40,11,9,9],[40,13,9,11,"mutation"],[40,21,9,19],[40,22,9,20,"state"],[40,27,9,25],[41,6,10,4],[41,10,10,7,"mutation"],[41,18,10,15],[41,19,10,16,"options"],[41,26,10,23],[41,27,10,24,"scope"],[41,32,10,29],[41,36,10,33],[42,8,10,35,"scope"],[42,13,10,40],[42,15,10,42,"mutation"],[42,23,10,50],[42,24,10,51,"options"],[42,31,10,58],[42,32,10,59,"scope"],[43,6,10,65],[43,7,10,66],[44,6,11,4],[44,10,11,7,"mutation"],[44,18,11,15],[44,19,11,16,"meta"],[44,23,11,20],[44,27,11,24],[45,8,11,26,"meta"],[45,12,11,30],[45,14,11,32,"mutation"],[45,22,11,40],[45,23,11,41,"meta"],[46,6,11,46],[46,7,11,47],[47,4,12,2],[47,5,12,3],[48,2,13,0],[49,2,14,0],[49,11,14,9,"dehydrateQuery"],[49,25,14,23,"dehydrateQuery"],[49,26,14,24,"query"],[49,31,14,29],[49,33,14,31,"serializeData"],[49,46,14,44],[49,48,14,46,"shouldRedactErrors"],[49,66,14,64],[49,68,14,66],[50,4,15,2],[50,11,15,9],[51,6,16,4,"dehydratedAt"],[51,18,16,16],[51,20,16,18,"Date"],[51,24,16,22],[51,25,16,23,"now"],[51,28,16,26],[51,29,16,27],[51,30,16,28],[52,6,17,4,"state"],[52,11,17,9],[52,13,17,11],[53,8,18,6],[53,11,18,9,"query"],[53,16,18,14],[53,17,18,15,"state"],[53,22,18,20],[54,8,19,6],[54,12,19,9,"query"],[54,17,19,14],[54,18,19,15,"state"],[54,23,19,20],[54,24,19,21,"data"],[54,28,19,25],[54,33,19,30],[54,38,19,35],[54,39,19,36],[54,43,19,40],[55,10,20,8,"data"],[55,14,20,12],[55,16,20,14,"serializeData"],[55,29,20,27],[55,30,20,28,"query"],[55,35,20,33],[55,36,20,34,"state"],[55,41,20,39],[55,42,20,40,"data"],[55,46,20,44],[56,8,21,6],[56,9,21,7],[57,6,22,4],[57,7,22,5],[58,6,23,4,"queryKey"],[58,14,23,12],[58,16,23,14,"query"],[58,21,23,19],[58,22,23,20,"queryKey"],[58,30,23,28],[59,6,24,4,"queryHash"],[59,15,24,13],[59,17,24,15,"query"],[59,22,24,20],[59,23,24,21,"queryHash"],[59,32,24,30],[60,6,25,4],[60,10,25,7,"query"],[60,15,25,12],[60,16,25,13,"state"],[60,21,25,18],[60,22,25,19,"status"],[60,28,25,25],[60,33,25,30],[60,42,25,39],[60,46,25,43],[61,8,26,6,"promise"],[61,15,26,13],[61,17,26,15,"query"],[61,22,26,20],[61,23,26,21,"promise"],[61,30,26,28],[61,32,26,30,"then"],[61,36,26,34],[61,37,26,35,"serializeData"],[61,50,26,48],[61,51,26,49],[61,52,26,50,"catch"],[61,57,26,55],[61,58,26,57,"error"],[61,63,26,62],[61,67,26,67],[62,10,27,8],[62,14,27,12],[62,15,27,13,"shouldRedactErrors"],[62,33,27,31],[62,34,27,32,"error"],[62,39,27,37],[62,40,27,38],[62,42,27,40],[63,12,28,10],[63,19,28,17,"Promise"],[63,26,28,24],[63,27,28,25,"reject"],[63,33,28,31],[63,34,28,32,"error"],[63,39,28,37],[63,40,28,38],[64,10,29,8],[65,10,30,8],[65,14,30,12,"process"],[65,21,30,19],[65,22,30,20,"env"],[65,25,30,23],[65,26,30,24,"NODE_ENV"],[65,34,30,32],[65,39,30,37],[65,51,30,49],[65,53,30,51],[66,12,31,10,"console"],[66,19,31,17],[66,20,31,18,"error"],[66,25,31,23],[66,26,32,12],[66,89,32,75,"query"],[66,94,32,80],[66,95,32,81,"queryHash"],[66,104,32,90],[66,110,32,96,"error"],[66,115,32,101],[66,166,33,10],[66,167,33,11],[67,10,34,8],[68,10,35,8],[68,17,35,15,"Promise"],[68,24,35,22],[68,25,35,23,"reject"],[68,31,35,29],[68,32,35,30],[68,36,35,34,"Error"],[68,41,35,39],[68,42,35,40],[68,52,35,50],[68,53,35,51],[68,54,35,52],[69,8,36,6],[69,9,36,7],[70,6,37,4],[70,7,37,5],[71,6,38,4],[71,10,38,7,"query"],[71,15,38,12],[71,16,38,13,"meta"],[71,20,38,17],[71,24,38,21],[72,8,38,23,"meta"],[72,12,38,27],[72,14,38,29,"query"],[72,19,38,34],[72,20,38,35,"meta"],[73,6,38,40],[73,7,38,41],[74,4,39,2],[74,5,39,3],[75,2,40,0],[76,2,41,0],[76,11,41,9,"defaultShouldDehydrateMutation"],[76,41,41,39,"defaultShouldDehydrateMutation"],[76,42,41,40,"mutation"],[76,50,41,48],[76,52,41,50],[77,4,42,2],[77,11,42,9,"mutation"],[77,19,42,17],[77,20,42,18,"state"],[77,25,42,23],[77,26,42,24,"isPaused"],[77,34,42,32],[78,2,43,0],[79,2,44,0],[79,11,44,9,"defaultShouldDehydrateQuery"],[79,38,44,36,"defaultShouldDehydrateQuery"],[79,39,44,37,"query"],[79,44,44,42],[79,46,44,44],[80,4,45,2],[80,11,45,9,"query"],[80,16,45,14],[80,17,45,15,"state"],[80,22,45,20],[80,23,45,21,"status"],[80,29,45,27],[80,34,45,32],[80,43,45,41],[81,2,46,0],[82,2,47,0],[82,11,47,9,"defaultShouldRedactErrors"],[82,36,47,34,"defaultShouldRedactErrors"],[82,37,47,35,"_"],[82,38,47,36],[82,40,47,38],[83,4,48,2],[83,11,48,9],[83,15,48,13],[84,2,49,0],[85,2,50,0],[85,11,50,9,"dehydrate"],[85,20,50,18,"dehydrate"],[85,21,50,19,"client"],[85,27,50,25],[85,29,50,27,"options"],[85,36,50,34],[85,39,50,37],[85,40,50,38],[85,41,50,39],[85,43,50,41],[86,4,51,2],[86,10,51,8,"filterMutation"],[86,24,51,22],[86,27,51,25,"options"],[86,34,51,32],[86,35,51,33,"shouldDehydrateMutation"],[86,58,51,56],[86,62,51,60,"client"],[86,68,51,66],[86,69,51,67,"getDefaultOptions"],[86,86,51,84],[86,87,51,85],[86,88,51,86],[86,89,51,87,"dehydrate"],[86,98,51,96],[86,100,51,98,"shouldDehydrateMutation"],[86,123,51,121],[86,127,51,125,"defaultShouldDehydrateMutation"],[86,157,51,155],[87,4,52,2],[87,10,52,8,"mutations"],[87,19,52,17],[87,22,52,20,"client"],[87,28,52,26],[87,29,52,27,"getMutationCache"],[87,45,52,43],[87,46,52,44],[87,47,52,45],[87,48,52,46,"getAll"],[87,54,52,52],[87,55,52,53],[87,56,52,54],[87,57,52,55,"flatMap"],[87,64,52,62],[87,65,53,5,"mutation"],[87,73,53,13],[87,77,53,18,"filterMutation"],[87,91,53,32],[87,92,53,33,"mutation"],[87,100,53,41],[87,101,53,42],[87,104,53,45],[87,105,53,46,"dehydrateMutation"],[87,122,53,63],[87,123,53,64,"mutation"],[87,131,53,72],[87,132,53,73],[87,133,53,74],[87,136,53,77],[87,138,54,2],[87,139,54,3],[88,4,55,2],[88,10,55,8,"filterQuery"],[88,21,55,19],[88,24,55,22,"options"],[88,31,55,29],[88,32,55,30,"shouldDehydrateQuery"],[88,52,55,50],[88,56,55,54,"client"],[88,62,55,60],[88,63,55,61,"getDefaultOptions"],[88,80,55,78],[88,81,55,79],[88,82,55,80],[88,83,55,81,"dehydrate"],[88,92,55,90],[88,94,55,92,"shouldDehydrateQuery"],[88,114,55,112],[88,118,55,116,"defaultShouldDehydrateQuery"],[88,145,55,143],[89,4,56,2],[89,10,56,8,"shouldRedactErrors"],[89,28,56,26],[89,31,56,29,"options"],[89,38,56,36],[89,39,56,37,"shouldRedactErrors"],[89,57,56,55],[89,61,56,59,"client"],[89,67,56,65],[89,68,56,66,"getDefaultOptions"],[89,85,56,83],[89,86,56,84],[89,87,56,85],[89,88,56,86,"dehydrate"],[89,97,56,95],[89,99,56,97,"shouldRedactErrors"],[89,117,56,115],[89,121,56,119,"defaultShouldRedactErrors"],[89,146,56,144],[90,4,57,2],[90,10,57,8,"serializeData"],[90,23,57,21],[90,26,57,24,"options"],[90,33,57,31],[90,34,57,32,"serializeData"],[90,47,57,45],[90,51,57,49,"client"],[90,57,57,55],[90,58,57,56,"getDefaultOptions"],[90,75,57,73],[90,76,57,74],[90,77,57,75],[90,78,57,76,"dehydrate"],[90,87,57,85],[90,89,57,87,"serializeData"],[90,102,57,100],[90,106,57,104,"defaultTransformerFn"],[90,126,57,124],[91,4,58,2],[91,10,58,8,"queries"],[91,17,58,15],[91,20,58,18,"client"],[91,26,58,24],[91,27,58,25,"getQueryCache"],[91,40,58,38],[91,41,58,39],[91,42,58,40],[91,43,58,41,"getAll"],[91,49,58,47],[91,50,58,48],[91,51,58,49],[91,52,58,50,"flatMap"],[91,59,58,57],[91,60,59,5,"query"],[91,65,59,10],[91,69,59,15,"filterQuery"],[91,80,59,26],[91,81,59,27,"query"],[91,86,59,32],[91,87,59,33],[91,90,59,36],[91,91,59,37,"dehydrateQuery"],[91,105,59,51],[91,106,59,52,"query"],[91,111,59,57],[91,113,59,59,"serializeData"],[91,126,59,72],[91,128,59,74,"shouldRedactErrors"],[91,146,59,92],[91,147,59,93],[91,148,59,94],[91,151,59,97],[91,153,60,2],[91,154,60,3],[92,4,61,2],[92,11,61,9],[93,6,61,11,"mutations"],[93,15,61,20],[94,6,61,22,"queries"],[95,4,61,30],[95,5,61,31],[96,2,62,0],[97,2,63,0],[97,11,63,9,"hydrate"],[97,18,63,16,"hydrate"],[97,19,63,17,"client"],[97,25,63,23],[97,27,63,25,"dehydratedState"],[97,42,63,40],[97,44,63,42,"options"],[97,51,63,49],[97,53,63,51],[98,4,64,2],[98,8,64,6],[98,15,64,13,"dehydratedState"],[98,30,64,28],[98,35,64,33],[98,43,64,41],[98,47,64,45,"dehydratedState"],[98,62,64,60],[98,67,64,65],[98,71,64,69],[98,73,64,71],[99,6,65,4],[100,4,66,2],[101,4,67,2],[101,10,67,8,"mutationCache"],[101,23,67,21],[101,26,67,24,"client"],[101,32,67,30],[101,33,67,31,"getMutationCache"],[101,49,67,47],[101,50,67,48],[101,51,67,49],[102,4,68,2],[102,10,68,8,"queryCache"],[102,20,68,18],[102,23,68,21,"client"],[102,29,68,27],[102,30,68,28,"getQueryCache"],[102,43,68,41],[102,44,68,42],[102,45,68,43],[103,4,69,2],[103,10,69,8,"deserializeData"],[103,25,69,23],[103,28,69,26,"options"],[103,35,69,33],[103,37,69,35,"defaultOptions"],[103,51,69,49],[103,53,69,51,"deserializeData"],[103,68,69,66],[103,72,69,70,"client"],[103,78,69,76],[103,79,69,77,"getDefaultOptions"],[103,96,69,94],[103,97,69,95],[103,98,69,96],[103,99,69,97,"hydrate"],[103,106,69,104],[103,108,69,106,"deserializeData"],[103,123,69,121],[103,127,69,125,"defaultTransformerFn"],[103,147,69,145],[104,4,70,2],[104,10,70,8,"mutations"],[104,19,70,17],[104,22,70,20,"dehydratedState"],[104,37,70,35],[104,38,70,36,"mutations"],[104,47,70,45],[104,51,70,49],[104,53,70,51],[105,4,71,2],[105,10,71,8,"queries"],[105,17,71,15],[105,20,71,18,"dehydratedState"],[105,35,71,33],[105,36,71,34,"queries"],[105,43,71,41],[105,47,71,45],[105,49,71,47],[106,4,72,2,"mutations"],[106,13,72,11],[106,14,72,12,"forEach"],[106,21,72,19],[106,22,72,20],[106,23,72,21],[107,6,72,23,"state"],[107,11,72,28],[108,6,72,30],[108,9,72,33,"mutationOptions"],[109,4,72,49],[109,5,72,50],[109,10,72,55],[110,6,73,4,"mutationCache"],[110,19,73,17],[110,20,73,18,"build"],[110,25,73,23],[110,26,74,6,"client"],[110,32,74,12],[110,34,75,6],[111,8,76,8],[111,11,76,11,"client"],[111,17,76,17],[111,18,76,18,"getDefaultOptions"],[111,35,76,35],[111,36,76,36],[111,37,76,37],[111,38,76,38,"hydrate"],[111,45,76,45],[111,47,76,47,"mutations"],[111,56,76,56],[112,8,77,8],[112,11,77,11,"options"],[112,18,77,18],[112,20,77,20,"defaultOptions"],[112,34,77,34],[112,36,77,36,"mutations"],[112,45,77,45],[113,8,78,8],[113,11,78,11,"mutationOptions"],[114,6,79,6],[114,7,79,7],[114,9,80,6,"state"],[114,14,81,4],[114,15,81,5],[115,4,82,2],[115,5,82,3],[115,6,82,4],[116,4,83,2,"queries"],[116,11,83,9],[116,12,83,10,"forEach"],[116,19,83,17],[116,20,84,4],[116,21,84,5],[117,6,84,7,"queryKey"],[117,14,84,15],[118,6,84,17,"state"],[118,11,84,22],[119,6,84,24,"queryHash"],[119,15,84,33],[120,6,84,35,"meta"],[120,10,84,39],[121,6,84,41,"promise"],[121,13,84,48],[122,6,84,50,"dehydratedAt"],[123,4,84,63],[123,5,84,64],[123,10,84,69],[124,6,85,6],[124,12,85,12,"syncData"],[124,20,85,20],[124,23,85,23,"promise"],[124,30,85,30],[124,33,85,33],[124,37,85,33,"tryResolveSync"],[124,48,85,47],[124,49,85,47,"tryResolveSync"],[124,63,85,47],[124,65,85,48,"promise"],[124,72,85,55],[124,73,85,56],[124,76,85,59],[124,81,85,64],[124,82,85,65],[125,6,86,6],[125,12,86,12,"rawData"],[125,19,86,19],[125,22,86,22,"state"],[125,27,86,27],[125,28,86,28,"data"],[125,32,86,32],[125,37,86,37],[125,42,86,42],[125,43,86,43],[125,46,86,46,"syncData"],[125,54,86,54],[125,56,86,56,"data"],[125,60,86,60],[125,63,86,63,"state"],[125,68,86,68],[125,69,86,69,"data"],[125,73,86,73],[126,6,87,6],[126,12,87,12,"data"],[126,16,87,16],[126,19,87,19,"rawData"],[126,26,87,26],[126,31,87,31],[126,36,87,36],[126,37,87,37],[126,40,87,40,"rawData"],[126,47,87,47],[126,50,87,50,"deserializeData"],[126,65,87,65],[126,66,87,66,"rawData"],[126,73,87,73],[126,74,87,74],[127,6,88,6],[127,10,88,10,"query"],[127,15,88,15],[127,18,88,18,"queryCache"],[127,28,88,28],[127,29,88,29,"get"],[127,32,88,32],[127,33,88,33,"queryHash"],[127,42,88,42],[127,43,88,43],[128,6,89,6],[128,12,89,12,"existingQueryIsPending"],[128,34,89,34],[128,37,89,37,"query"],[128,42,89,42],[128,44,89,44,"state"],[128,49,89,49],[128,50,89,50,"status"],[128,56,89,56],[128,61,89,61],[128,70,89,70],[129,6,90,6],[129,12,90,12,"existingQueryIsFetching"],[129,35,90,35],[129,38,90,38,"query"],[129,43,90,43],[129,45,90,45,"state"],[129,50,90,50],[129,51,90,51,"fetchStatus"],[129,62,90,62],[129,67,90,67],[129,77,90,77],[130,6,91,6],[130,10,91,10,"query"],[130,15,91,15],[130,17,91,17],[131,8,92,8],[131,14,92,14,"hasNewerSyncData"],[131,30,92,30],[131,33,92,33,"syncData"],[131,41,92,41],[132,8,92,45],[133,8,93,8],[134,8,94,8,"dehydratedAt"],[134,20,94,20],[134,25,94,25],[134,30,94,30],[134,31,94,31],[134,35,94,35,"dehydratedAt"],[134,47,94,47],[134,50,94,50,"query"],[134,55,94,55],[134,56,94,56,"state"],[134,61,94,61],[134,62,94,62,"dataUpdatedAt"],[134,75,94,75],[135,8,95,8],[135,12,95,12,"state"],[135,17,95,17],[135,18,95,18,"dataUpdatedAt"],[135,31,95,31],[135,34,95,34,"query"],[135,39,95,39],[135,40,95,40,"state"],[135,45,95,45],[135,46,95,46,"dataUpdatedAt"],[135,59,95,59],[135,63,95,63,"hasNewerSyncData"],[135,79,95,79],[135,81,95,81],[136,10,96,10],[136,16,96,16],[137,12,96,18,"fetchStatus"],[137,23,96,29],[137,25,96,31,"_ignored"],[137,33,96,39],[138,12,96,41],[138,15,96,44,"serializedState"],[139,10,96,60],[139,11,96,61],[139,14,96,64,"state"],[139,19,96,69],[140,10,97,10,"query"],[140,15,97,15],[140,16,97,16,"setState"],[140,24,97,24],[140,25,97,25],[141,12,98,12],[141,15,98,15,"serializedState"],[141,30,98,30],[142,12,99,12,"data"],[143,10,100,10],[143,11,100,11],[143,12,100,12],[144,8,101,8],[145,6,102,6],[145,7,102,7],[145,13,102,13],[146,8,103,8,"query"],[146,13,103,13],[146,16,103,16,"queryCache"],[146,26,103,26],[146,27,103,27,"build"],[146,32,103,32],[146,33,104,10,"client"],[146,39,104,16],[146,41,105,10],[147,10,106,12],[147,13,106,15,"client"],[147,19,106,21],[147,20,106,22,"getDefaultOptions"],[147,37,106,39],[147,38,106,40],[147,39,106,41],[147,40,106,42,"hydrate"],[147,47,106,49],[147,49,106,51,"queries"],[147,56,106,58],[148,10,107,12],[148,13,107,15,"options"],[148,20,107,22],[148,22,107,24,"defaultOptions"],[148,36,107,38],[148,38,107,40,"queries"],[148,45,107,47],[149,10,108,12,"queryKey"],[149,18,108,20],[150,10,109,12,"queryHash"],[150,19,109,21],[151,10,110,12,"meta"],[152,8,111,10],[152,9,111,11],[153,8,112,10],[154,8,113,10],[155,8,114,10],[156,10,115,12],[156,13,115,15,"state"],[156,18,115,20],[157,10,116,12,"data"],[157,14,116,16],[158,10,117,12,"fetchStatus"],[158,21,117,23],[158,23,117,25],[158,29,117,31],[159,10,118,12,"status"],[159,16,118,18],[159,18,118,20,"data"],[159,22,118,24],[159,27,118,29],[159,32,118,34],[159,33,118,35],[159,36,118,38],[159,45,118,47],[159,48,118,50,"state"],[159,53,118,55],[159,54,118,56,"status"],[160,8,119,10],[160,9,120,8],[160,10,120,9],[161,6,121,6],[162,6,122,6],[162,10,122,10,"promise"],[162,17,122,17],[162,21,122,21],[162,22,122,22,"existingQueryIsPending"],[162,44,122,44],[162,48,122,48],[162,49,122,49,"existingQueryIsFetching"],[162,72,122,72],[163,6,122,76],[164,6,123,6],[165,6,124,7,"dehydratedAt"],[165,18,124,19],[165,23,124,24],[165,28,124,29],[165,29,124,30],[165,33,124,34,"dehydratedAt"],[165,45,124,46],[165,48,124,49,"query"],[165,53,124,54],[165,54,124,55,"state"],[165,59,124,60],[165,60,124,61,"dataUpdatedAt"],[165,73,124,74],[165,74,124,75],[165,76,124,77],[166,8,125,8],[166,13,125,13,"query"],[166,18,125,18],[166,19,125,19,"fetch"],[166,24,125,24],[166,25,125,25],[166,30,125,30],[166,31,125,31],[166,33,125,33],[167,10,126,10],[168,10,127,10,"initialPromise"],[168,24,127,24],[168,26,127,26,"Promise"],[168,33,127,33],[168,34,127,34,"resolve"],[168,41,127,41],[168,42,127,42,"promise"],[168,49,127,49],[168,50,127,50],[168,51,127,51,"then"],[168,55,127,55],[168,56,127,56,"deserializeData"],[168,71,127,71],[169,8,128,8],[169,9,128,9],[169,10,128,10],[170,6,129,6],[171,4,130,4],[171,5,131,2],[171,6,131,3],[172,2,132,0],[173,0,132,1],[173,3]],"functionMap":{"names":["<global>","defaultTransformerFn","dehydrateMutation","dehydrateQuery","query.promise.then._catch$argument_0","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","defaultShouldRedactErrors","dehydrate","client.getMutationCache.getAll.flatMap$argument_0","client.getQueryCache.getAll.flatMap$argument_0","hydrate","mutations.forEach$argument_0","queries.forEach$argument_0"],"mappings":"AAA;ACE;CDE;AEC;CFO;AGC;wDCY;ODU;CHI;AKC;CLE;AMC;CNE;AOC;CPE;AQC;ICG,2ED;IEM,+FF;CRG;AWC;oBCS;GDU;IEE;KF8C;CXE"},"hasCjsExports":false},"type":"js/module"}]}