{"dependencies":[{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}},{"name":"@react-navigation/native","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":17,"index":168},"end":{"line":5,"column":52,"index":203}}],"key":"uE+cRVNnMKkS9OYKR5fpRqPul5s=","exportNames":["*"],"imports":1}},{"name":"nanoid/non-secure","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":21,"index":226},"end":{"line":6,"column":49,"index":254}}],"key":"JdWyQHWvvi7kws4n0MhZWUpiB2c=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":16,"index":272},"end":{"line":7,"column":32,"index":288}}],"key":"XN65eZP/QkNMzaBAXbG/zPyidpY=","exportNames":["*"],"imports":1}},{"name":"./withLayoutContext","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":28,"index":318},"end":{"line":8,"column":58,"index":348}}],"key":"uI8DQ+0pBl5vWiQx60egJpSWI0Q=","exportNames":["*"],"imports":1}},{"name":"../fork/native-stack/createNativeStackNavigator","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":37,"index":387},"end":{"line":9,"column":95,"index":445}}],"key":"RHp/c21WVHqsHHhJDMS04wvWTG0=","exportNames":["*"],"imports":1}},{"name":"../link/preview/LinkPreviewContext","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":29,"index":476},"end":{"line":10,"column":74,"index":521}}],"key":"XkVRz5U0xvqSwEsOtfEUIaEk8Lg=","exportNames":["*"],"imports":1}},{"name":"../navigationParams","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":27,"index":550},"end":{"line":11,"column":57,"index":580}}],"key":"KeDGhIQYe7bEwtueZKPQrXQYcV0=","exportNames":["*"],"imports":1}},{"name":"../useScreens","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":21,"index":603},"end":{"line":12,"column":45,"index":627}}],"key":"8gimF/GgYNRJ+ojtiVDaShLJVrk=","exportNames":["*"],"imports":1}},{"name":"../views/Protected","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":20,"index":649},"end":{"line":13,"column":49,"index":678}}],"key":"k1+uDYZ/MvJqE4WVPvI1cbQswMs=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n  'use client';\n\n  var _reactJsxDevRuntime = require(_dependencyMap[0], \"react/jsx-dev-runtime\");\n  var _jsxFileName = \"/app/frontend/node_modules/expo-router/build/layouts/StackClient.js\";\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.StackRouter = exports.stackRouterOverride = void 0;\n  const native_1 = require(_dependencyMap[1], \"@react-navigation/native\");\n  const non_secure_1 = require(_dependencyMap[2], \"nanoid/non-secure\");\n  const react_1 = require(_dependencyMap[3], \"react\");\n  const withLayoutContext_1 = require(_dependencyMap[4], \"./withLayoutContext\");\n  const createNativeStackNavigator_1 = require(_dependencyMap[5], \"../fork/native-stack/createNativeStackNavigator\");\n  const LinkPreviewContext_1 = require(_dependencyMap[6], \"../link/preview/LinkPreviewContext\");\n  const navigationParams_1 = require(_dependencyMap[7], \"../navigationParams\");\n  const useScreens_1 = require(_dependencyMap[8], \"../useScreens\");\n  const Protected_1 = require(_dependencyMap[9], \"../views/Protected\");\n  const NativeStackNavigator = (0, createNativeStackNavigator_1.createNativeStackNavigator)().Navigator;\n  const RNStack = (0, withLayoutContext_1.withLayoutContext)(NativeStackNavigator);\n  function isStackAction(action) {\n    return action.type === 'PUSH' || action.type === 'NAVIGATE' || action.type === 'POP' || action.type === 'POP_TO_TOP' || action.type === 'REPLACE' || action.type === 'PRELOAD';\n  }\n  const isPreviewAction = action => !!action.payload && 'params' in action.payload && typeof action.payload.params === 'object' && !!(0, navigationParams_1.getInternalExpoRouterParams)(action.payload?.params ?? undefined)['__internal__expo_router_is_preview_navigation'];\n  /**\n   * React Navigation matches a screen by its name or a 'getID' function that uniquely identifies a screen.\n   * When a screen has been uniquely identified, the Stack can only have one instance of that screen.\n   *\n   * Expo Router allows for a screen to be matched by name and path params, a 'getID' function or a singular id.\n   *\n   * Instead of reimplementing the entire StackRouter, we can override the getStateForAction method to handle the singular screen logic.\n   *\n   */\n  const stackRouterOverride = original => {\n    return {\n      getStateForAction: (state, action, options) => {\n        if (action.target && action.target !== state.key) {\n          return null;\n        }\n        if (!isStackAction(action)) {\n          return original.getStateForAction(state, action, options);\n        }\n        // The dynamic getId added to an action, `router.push('screen', { singular: true })`\n        const actionSingularOptions = action.payload && 'singular' in action.payload ? action.payload.singular : undefined;\n        // Handle if 'getID' or 'singular' is set.\n        function getIdFunction() {\n          // Actions can be fired by the user, so we do need to validate their structure.\n          if (!('payload' in action) || !action.payload || !('name' in action.payload) || typeof action.payload.name !== 'string') {\n            return;\n          }\n          const actionName = action.payload.name;\n          return (\n            // The dynamic singular added to an action, `router.push('screen', { singular: () => 'id' })`\n            getActionSingularIdFn(actionSingularOptions, actionName) ||\n            // The static getId added as a prop to `<Screen singular />` or `<Screen getId={} />`\n            options.routeGetIdList[actionName]\n          );\n        }\n        const {\n          routeParamList\n        } = options;\n        switch (action.type) {\n          case 'PUSH':\n          case 'NAVIGATE':\n            {\n              if (!state.routeNames.includes(action.payload.name)) {\n                return null;\n              }\n              // START FORK\n              const getId = getIdFunction();\n              // const getId = options.routeGetIdList[action.payload.name];\n              // END FORK\n              const id = getId?.({\n                params: action.payload.params\n              });\n              let route;\n              if (id !== undefined) {\n                route = state.routes.findLast(route => route.name === action.payload.name && id === getId?.({\n                  params: route.params\n                }));\n              } else if (action.type === 'NAVIGATE') {\n                const currentRoute = state.routes[state.index];\n                // If the route matches the current one, then navigate to it\n                if (action.payload.name === currentRoute.name && !isPreviewAction(action)) {\n                  route = currentRoute;\n                } else if (action.payload.pop) {\n                  route = state.routes.findLast(route => route.name === action.payload.name);\n                }\n              }\n              // START FORK\n              if (isPreviewAction(action) && !route) {\n                route = state.preloadedRoutes.find(route => route.name === action.payload.name && id === route.key);\n              }\n              // END FORK\n              if (!route) {\n                route = state.preloadedRoutes.find(route => route.name === action.payload.name && id === getId?.({\n                  params: route.params\n                }));\n              }\n              let params;\n              if (action.type === 'NAVIGATE' && action.payload.merge && route) {\n                params = action.payload.params !== undefined || routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...route.params,\n                  ...action.payload.params\n                } : route.params;\n              } else {\n                params = routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params;\n              }\n              let routes;\n              if (route) {\n                if (action.type === 'NAVIGATE' && action.payload.pop) {\n                  routes = [];\n                  // Get all routes until the matching one\n                  for (const r of state.routes) {\n                    if (r.key === route.key) {\n                      routes.push({\n                        ...route,\n                        path: action.payload.path !== undefined ? action.payload.path : route.path,\n                        params\n                      });\n                      break;\n                    }\n                    routes.push(r);\n                  }\n                } else {\n                  // START FORK\n                  // If there is an id, then filter out the existing route with the same id.\n                  // THIS ACTION IS DANGEROUS. This can cause React Native Screens to freeze\n                  if (id !== undefined) {\n                    routes = state.routes.filter(r => r.key !== route.key);\n                  } else if (action.type === 'NAVIGATE' && state.routes.length > 0) {\n                    // The navigation action should only replace the last route if it has the same name and path params.\n                    const lastRoute = state.routes[state.routes.length - 1];\n                    if ((0, useScreens_1.getSingularId)(lastRoute.name, {\n                      params: lastRoute.params\n                    }) === (0, useScreens_1.getSingularId)(route.name, {\n                      params\n                    })) {\n                      routes = state.routes.slice(0, -1);\n                    } else {\n                      routes = [...state.routes];\n                    }\n                  } else {\n                    routes = [...state.routes];\n                  }\n                  // If the routes length is the same as the state routes length, then we are navigating to a new route.\n                  // Otherwise we are replacing an existing route.\n                  const key = routes.length === state.routes.length && !isPreviewAction(action) ? `${action.payload.name}-${(0, non_secure_1.nanoid)()}` : route.key;\n                  routes.push({\n                    ...route,\n                    key,\n                    path: action.type === 'NAVIGATE' && action.payload.path !== undefined ? action.payload.path : route.path,\n                    params\n                  });\n                  // routes = state.routes.filter((r) => r.key !== route.key);\n                  // routes.push({\n                  //   ...route,\n                  //   path:\n                  //     action.type === 'NAVIGATE' && action.payload.path !== undefined\n                  //       ? action.payload.path\n                  //       : route.path,\n                  //   params,\n                  // });\n                  // END FORK\n                }\n              } else {\n                routes = [...state.routes, {\n                  key: `${action.payload.name}-${(0, non_secure_1.nanoid)()}`,\n                  name: action.payload.name,\n                  path: action.type === 'NAVIGATE' ? action.payload.path : undefined,\n                  params\n                }];\n              }\n              // START FORK\n              // return filterSingular(\n              const result = {\n                ...state,\n                index: routes.length - 1,\n                preloadedRoutes: state.preloadedRoutes.filter(route => routes[routes.length - 1].key !== route.key),\n                routes\n              };\n              if (actionSingularOptions) {\n                return filterSingular(result, getId);\n              }\n              return result;\n              // return {\n              //   ...state,\n              //   index: routes.length - 1,\n              //   preloadedRoutes: state.preloadedRoutes.filter(\n              //     (route) => routes[routes.length - 1].key !== route.key\n              //   ),\n              //   routes,\n              // };\n              // END FORK\n            }\n          case 'PRELOAD':\n            {\n              // START FORK\n              // This will be the case for example for protected route\n              if (!state.routeNames.includes(action.payload.name)) {\n                return null;\n              }\n              // END FORK\n              const getId = options.routeGetIdList[action.payload.name];\n              const id = getId?.({\n                params: action.payload.params\n              });\n              let route;\n              if (id !== undefined) {\n                route = state.routes.find(route => route.name === action.payload.name && id === getId?.({\n                  params: route.params\n                }));\n              }\n              if (route) {\n                return {\n                  ...state,\n                  routes: state.routes.map(r => {\n                    if (r.key !== route?.key) {\n                      return r;\n                    }\n                    return {\n                      ...r,\n                      params: routeParamList[action.payload.name] !== undefined ? {\n                        ...routeParamList[action.payload.name],\n                        ...action.payload.params\n                      } : action.payload.params\n                    };\n                  })\n                };\n              } else {\n                // START FORK\n                const currentPreloadedRoute = {\n                  key: `${action.payload.name}-${(0, non_secure_1.nanoid)()}`,\n                  name: action.payload.name,\n                  params: routeParamList[action.payload.name] !== undefined ? {\n                    ...routeParamList[action.payload.name],\n                    ...action.payload.params\n                  } : action.payload.params\n                };\n                // END FORK\n                return {\n                  ...state,\n                  // START FORK\n                  // Adding the current preloaded route to the beginning of the preloadedRoutes array\n                  // This ensures that the preloaded route will be the next one after the visible route\n                  // and when navigation will happen, there will be no reshuffling\n                  // This is a workaround for the link preview navigation issue, when screen would freeze after navigation from native side\n                  // and reshuffling from react-navigation\n                  preloadedRoutes: [currentPreloadedRoute].concat(state.preloadedRoutes.filter(r => r.name !== action.payload.name || id !== getId?.({\n                    params: r.params\n                  })))\n                  // preloadedRoutes: state.preloadedRoutes\n                  //   .filter(\n                  //     (r) =>\n                  //       r.name !== action.payload.name ||\n                  //       id !== getId?.({ params: r.params })\n                  //   )\n                  //   .concat({\n                  //     key: `${action.payload.name}-${nanoid()}`,\n                  //     name: action.payload.name,\n                  //     params:\n                  //       routeParamList[action.payload.name] !== undefined\n                  //         ? {\n                  //             ...routeParamList[action.payload.name],\n                  //             ...action.payload.params,\n                  //           }\n                  //         : action.payload.params,\n                  //   }),\n                  // END FORK\n                };\n              }\n            }\n          default:\n            {\n              return original.getStateForAction(state, action, options);\n            }\n        }\n      }\n    };\n  };\n  exports.stackRouterOverride = stackRouterOverride;\n  function getActionSingularIdFn(actionGetId, name) {\n    if (typeof actionGetId === 'function') {\n      return options => actionGetId(name, options.params ?? {});\n    } else if (actionGetId === true) {\n      return options => (0, useScreens_1.getSingularId)(name, options);\n    }\n    return undefined;\n  }\n  /**\n   * If there is a dynamic singular on an action, then we need to filter the state to only have singular screens.\n   * As multiples may have been added before we did the singular navigation.\n   */\n  function filterSingular(state, getId) {\n    if (!state) {\n      return state;\n    }\n    if (!state.routes) {\n      return state;\n    }\n    const currentIndex = state.index || state.routes.length - 1;\n    const current = state.routes[currentIndex];\n    const name = current.name;\n    const id = getId?.({\n      params: current.params\n    });\n    if (!id) {\n      return state;\n    }\n    // TypeScript needs a type assertion here for the filter to work.\n    let routes = state.routes;\n    routes = routes.filter((route, index) => {\n      // If the route is the current route, keep it.\n      if (index === currentIndex) {\n        return true;\n      }\n      // Remove all other routes with the same name and id.\n      return name !== route.name || id !== getId?.({\n        params: route.params\n      });\n    });\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes\n    };\n  }\n  const Stack = Object.assign(props => {\n    const {\n      isStackAnimationDisabled\n    } = (0, LinkPreviewContext_1.useLinkPreviewContext)();\n    const screenOptions = (0, react_1.useMemo)(() => {\n      const condition = isStackAnimationDisabled ? () => true : shouldDisableAnimationBasedOnParams;\n      return disableAnimationInScreenOptions(props.screenOptions, condition);\n    }, [props.screenOptions, isStackAnimationDisabled]);\n    return /*#__PURE__*/_reactJsxDevRuntime.jsxDEV(RNStack, {\n      ...props,\n      screenOptions: screenOptions,\n      UNSTABLE_router: exports.stackRouterOverride\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 13\n    }, this);\n  }, {\n    Screen: RNStack.Screen,\n    Protected: Protected_1.Protected\n  });\n  function disableAnimationInScreenOptions(options, condition) {\n    if (options && typeof options === 'function') {\n      return props => {\n        const oldOptions = options(props);\n        if (condition(props.route)) {\n          return {\n            ...oldOptions,\n            animation: 'none'\n          };\n        }\n        return oldOptions ?? {};\n      };\n    }\n    return props => {\n      if (condition(props.route)) {\n        return {\n          ...(options ?? {}),\n          animation: 'none'\n        };\n      }\n      return options ?? {};\n    };\n  }\n  function shouldDisableAnimationBasedOnParams(route) {\n    const expoParams = (0, navigationParams_1.getInternalExpoRouterParams)(route.params);\n    return !!expoParams.__internal_expo_router_no_animation;\n  }\n  exports.default = Stack;\n  const StackRouter = options => {\n    const router = (0, native_1.StackRouter)(options);\n    return {\n      ...router,\n      ...(0, exports.stackRouterOverride)(router)\n    };\n  };\n  exports.StackRouter = StackRouter;\n});","lineCount":390,"map":[[2,2,1,0],[2,14,1,12],[3,2,2,0],[3,14,2,12],[5,2,2,13],[5,6,2,13,"_reactJsxDevRuntime"],[5,25,2,13],[5,28,2,13,"require"],[5,35,2,13],[5,36,2,13,"_dependencyMap"],[5,50,2,13],[6,2,2,13],[6,6,2,13,"_jsxFileName"],[6,18,2,13],[7,2,3,0,"Object"],[7,8,3,6],[7,9,3,7,"defineProperty"],[7,23,3,21],[7,24,3,22,"exports"],[7,31,3,29],[7,33,3,31],[7,45,3,43],[7,47,3,45],[8,4,3,47,"value"],[8,9,3,52],[8,11,3,54],[9,2,3,59],[9,3,3,60],[9,4,3,61],[10,2,4,0,"exports"],[10,9,4,7],[10,10,4,8,"StackRouter"],[10,21,4,19],[10,24,4,22,"exports"],[10,31,4,29],[10,32,4,30,"stackRouterOverride"],[10,51,4,49],[10,54,4,52],[10,59,4,57],[10,60,4,58],[11,2,5,0],[11,8,5,6,"native_1"],[11,16,5,14],[11,19,5,17,"require"],[11,26,5,24],[11,27,5,24,"_dependencyMap"],[11,41,5,24],[11,72,5,51],[11,73,5,52],[12,2,6,0],[12,8,6,6,"non_secure_1"],[12,20,6,18],[12,23,6,21,"require"],[12,30,6,28],[12,31,6,28,"_dependencyMap"],[12,45,6,28],[12,69,6,48],[12,70,6,49],[13,2,7,0],[13,8,7,6,"react_1"],[13,15,7,13],[13,18,7,16,"require"],[13,25,7,23],[13,26,7,23,"_dependencyMap"],[13,40,7,23],[13,52,7,31],[13,53,7,32],[14,2,8,0],[14,8,8,6,"withLayoutContext_1"],[14,27,8,25],[14,30,8,28,"require"],[14,37,8,35],[14,38,8,35,"_dependencyMap"],[14,52,8,35],[14,78,8,57],[14,79,8,58],[15,2,9,0],[15,8,9,6,"createNativeStackNavigator_1"],[15,36,9,34],[15,39,9,37,"require"],[15,46,9,44],[15,47,9,44,"_dependencyMap"],[15,61,9,44],[15,115,9,94],[15,116,9,95],[16,2,10,0],[16,8,10,6,"LinkPreviewContext_1"],[16,28,10,26],[16,31,10,29,"require"],[16,38,10,36],[16,39,10,36,"_dependencyMap"],[16,53,10,36],[16,94,10,73],[16,95,10,74],[17,2,11,0],[17,8,11,6,"navigationParams_1"],[17,26,11,24],[17,29,11,27,"require"],[17,36,11,34],[17,37,11,34,"_dependencyMap"],[17,51,11,34],[17,77,11,56],[17,78,11,57],[18,2,12,0],[18,8,12,6,"useScreens_1"],[18,20,12,18],[18,23,12,21,"require"],[18,30,12,28],[18,31,12,28,"_dependencyMap"],[18,45,12,28],[18,65,12,44],[18,66,12,45],[19,2,13,0],[19,8,13,6,"Protected_1"],[19,19,13,17],[19,22,13,20,"require"],[19,29,13,27],[19,30,13,27,"_dependencyMap"],[19,44,13,27],[19,69,13,48],[19,70,13,49],[20,2,14,0],[20,8,14,6,"NativeStackNavigator"],[20,28,14,26],[20,31,14,29],[20,32,14,30],[20,33,14,31],[20,35,14,33,"createNativeStackNavigator_1"],[20,63,14,61],[20,64,14,62,"createNativeStackNavigator"],[20,90,14,88],[20,92,14,90],[20,93,14,91],[20,94,14,92,"Navigator"],[20,103,14,101],[21,2,15,0],[21,8,15,6,"RNStack"],[21,15,15,13],[21,18,15,16],[21,19,15,17],[21,20,15,18],[21,22,15,20,"withLayoutContext_1"],[21,41,15,39],[21,42,15,40,"withLayoutContext"],[21,59,15,57],[21,61,15,59,"NativeStackNavigator"],[21,81,15,79],[21,82,15,80],[22,2,16,0],[22,11,16,9,"isStackAction"],[22,24,16,22,"isStackAction"],[22,25,16,23,"action"],[22,31,16,29],[22,33,16,31],[23,4,17,4],[23,11,17,12,"action"],[23,17,17,18],[23,18,17,19,"type"],[23,22,17,23],[23,27,17,28],[23,33,17,34],[23,37,18,8,"action"],[23,43,18,14],[23,44,18,15,"type"],[23,48,18,19],[23,53,18,24],[23,63,18,34],[23,67,19,8,"action"],[23,73,19,14],[23,74,19,15,"type"],[23,78,19,19],[23,83,19,24],[23,88,19,29],[23,92,20,8,"action"],[23,98,20,14],[23,99,20,15,"type"],[23,103,20,19],[23,108,20,24],[23,120,20,36],[23,124,21,8,"action"],[23,130,21,14],[23,131,21,15,"type"],[23,135,21,19],[23,140,21,24],[23,149,21,33],[23,153,22,8,"action"],[23,159,22,14],[23,160,22,15,"type"],[23,164,22,19],[23,169,22,24],[23,178,22,33],[24,2,23,0],[25,2,24,0],[25,8,24,6,"isPreviewAction"],[25,23,24,21],[25,26,24,25,"action"],[25,32,24,31],[25,36,24,36],[25,37,24,37],[25,38,24,38,"action"],[25,44,24,44],[25,45,24,45,"payload"],[25,52,24,52],[25,56,25,4],[25,64,25,12],[25,68,25,16,"action"],[25,74,25,22],[25,75,25,23,"payload"],[25,82,25,30],[25,86,26,4],[25,93,26,11,"action"],[25,99,26,17],[25,100,26,18,"payload"],[25,107,26,25],[25,108,26,26,"params"],[25,114,26,32],[25,119,26,37],[25,127,26,45],[25,131,27,4],[25,132,27,5],[25,133,27,6],[25,134,27,7],[25,135,27,8],[25,137,27,10,"navigationParams_1"],[25,155,27,28],[25,156,27,29,"getInternalExpoRouterParams"],[25,183,27,56],[25,185,27,58,"action"],[25,191,27,64],[25,192,27,65,"payload"],[25,199,27,72],[25,201,27,74,"params"],[25,207,27,80],[25,211,27,84,"undefined"],[25,220,27,93],[25,221,27,94],[25,222,27,95],[25,269,27,142],[25,270,27,143],[26,2,28,0],[27,0,29,0],[28,0,30,0],[29,0,31,0],[30,0,32,0],[31,0,33,0],[32,0,34,0],[33,0,35,0],[34,0,36,0],[35,2,37,0],[35,8,37,6,"stackRouterOverride"],[35,27,37,25],[35,30,37,29,"original"],[35,38,37,37],[35,42,37,42],[36,4,38,4],[36,11,38,11],[37,6,39,8,"getStateForAction"],[37,23,39,25],[37,25,39,27,"getStateForAction"],[37,26,39,28,"state"],[37,31,39,33],[37,33,39,35,"action"],[37,39,39,41],[37,41,39,43,"options"],[37,48,39,50],[37,53,39,55],[38,8,40,12],[38,12,40,16,"action"],[38,18,40,22],[38,19,40,23,"target"],[38,25,40,29],[38,29,40,33,"action"],[38,35,40,39],[38,36,40,40,"target"],[38,42,40,46],[38,47,40,51,"state"],[38,52,40,56],[38,53,40,57,"key"],[38,56,40,60],[38,58,40,62],[39,10,41,16],[39,17,41,23],[39,21,41,27],[40,8,42,12],[41,8,43,12],[41,12,43,16],[41,13,43,17,"isStackAction"],[41,26,43,30],[41,27,43,31,"action"],[41,33,43,37],[41,34,43,38],[41,36,43,40],[42,10,44,16],[42,17,44,23,"original"],[42,25,44,31],[42,26,44,32,"getStateForAction"],[42,43,44,49],[42,44,44,50,"state"],[42,49,44,55],[42,51,44,57,"action"],[42,57,44,63],[42,59,44,65,"options"],[42,66,44,72],[42,67,44,73],[43,8,45,12],[44,8,46,12],[45,8,47,12],[45,14,47,18,"actionSingularOptions"],[45,35,47,39],[45,38,47,42,"action"],[45,44,47,48],[45,45,47,49,"payload"],[45,52,47,56],[45,56,47,60],[45,66,47,70],[45,70,47,74,"action"],[45,76,47,80],[45,77,47,81,"payload"],[45,84,47,88],[45,87,48,18,"action"],[45,93,48,24],[45,94,48,25,"payload"],[45,101,48,32],[45,102,48,33,"singular"],[45,110,48,41],[45,113,49,18,"undefined"],[45,122,49,27],[46,8,50,12],[47,8,51,12],[47,17,51,21,"getIdFunction"],[47,30,51,34,"getIdFunction"],[47,31,51,34],[47,33,51,37],[48,10,52,16],[49,10,53,16],[49,14,53,20],[49,16,53,22],[49,25,53,31],[49,29,53,35,"action"],[49,35,53,41],[49,36,53,42],[49,40,54,20],[49,41,54,21,"action"],[49,47,54,27],[49,48,54,28,"payload"],[49,55,54,35],[49,59,55,20],[49,61,55,22],[49,67,55,28],[49,71,55,32,"action"],[49,77,55,38],[49,78,55,39,"payload"],[49,85,55,46],[49,86,55,47],[49,90,56,20],[49,97,56,27,"action"],[49,103,56,33],[49,104,56,34,"payload"],[49,111,56,41],[49,112,56,42,"name"],[49,116,56,46],[49,121,56,51],[49,129,56,59],[49,131,56,61],[50,12,57,20],[51,10,58,16],[52,10,59,16],[52,16,59,22,"actionName"],[52,26,59,32],[52,29,59,35,"action"],[52,35,59,41],[52,36,59,42,"payload"],[52,43,59,49],[52,44,59,50,"name"],[52,48,59,54],[53,10,60,16],[54,12,61,16],[55,12,62,16,"getActionSingularIdFn"],[55,33,62,37],[55,34,62,38,"actionSingularOptions"],[55,55,62,59],[55,57,62,61,"actionName"],[55,67,62,71],[55,68,62,72],[56,12,63,20],[57,12,64,20,"options"],[57,19,64,27],[57,20,64,28,"routeGetIdList"],[57,34,64,42],[57,35,64,43,"actionName"],[57,45,64,53],[58,10,64,54],[59,8,65,12],[60,8,66,12],[60,14,66,18],[61,10,66,20,"routeParamList"],[62,8,66,35],[62,9,66,36],[62,12,66,39,"options"],[62,19,66,46],[63,8,67,12],[63,16,67,20,"action"],[63,22,67,26],[63,23,67,27,"type"],[63,27,67,31],[64,10,68,16],[64,15,68,21],[64,21,68,27],[65,10,69,16],[65,15,69,21],[65,25,69,31],[66,12,69,33],[67,14,70,20],[67,18,70,24],[67,19,70,25,"state"],[67,24,70,30],[67,25,70,31,"routeNames"],[67,35,70,41],[67,36,70,42,"includes"],[67,44,70,50],[67,45,70,51,"action"],[67,51,70,57],[67,52,70,58,"payload"],[67,59,70,65],[67,60,70,66,"name"],[67,64,70,70],[67,65,70,71],[67,67,70,73],[68,16,71,24],[68,23,71,31],[68,27,71,35],[69,14,72,20],[70,14,73,20],[71,14,74,20],[71,20,74,26,"getId"],[71,25,74,31],[71,28,74,34,"getIdFunction"],[71,41,74,47],[71,42,74,48],[71,43,74,49],[72,14,75,20],[73,14,76,20],[74,14,77,20],[74,20,77,26,"id"],[74,22,77,28],[74,25,77,31,"getId"],[74,30,77,36],[74,33,77,39],[75,16,77,41,"params"],[75,22,77,47],[75,24,77,49,"action"],[75,30,77,55],[75,31,77,56,"payload"],[75,38,77,63],[75,39,77,64,"params"],[76,14,77,71],[76,15,77,72],[76,16,77,73],[77,14,78,20],[77,18,78,24,"route"],[77,23,78,29],[78,14,79,20],[78,18,79,24,"id"],[78,20,79,26],[78,25,79,31,"undefined"],[78,34,79,40],[78,36,79,42],[79,16,80,24,"route"],[79,21,80,29],[79,24,80,32,"state"],[79,29,80,37],[79,30,80,38,"routes"],[79,36,80,44],[79,37,80,45,"findLast"],[79,45,80,53],[79,46,80,55,"route"],[79,51,80,60],[79,55,80,65,"route"],[79,60,80,70],[79,61,80,71,"name"],[79,65,80,75],[79,70,80,80,"action"],[79,76,80,86],[79,77,80,87,"payload"],[79,84,80,94],[79,85,80,95,"name"],[79,89,80,99],[79,93,80,103,"id"],[79,95,80,105],[79,100,80,110,"getId"],[79,105,80,115],[79,108,80,118],[80,18,80,120,"params"],[80,24,80,126],[80,26,80,128,"route"],[80,31,80,133],[80,32,80,134,"params"],[81,16,80,141],[81,17,80,142],[81,18,80,143],[81,19,80,144],[82,14,81,20],[82,15,81,21],[82,21,82,25],[82,25,82,29,"action"],[82,31,82,35],[82,32,82,36,"type"],[82,36,82,40],[82,41,82,45],[82,51,82,55],[82,53,82,57],[83,16,83,24],[83,22,83,30,"currentRoute"],[83,34,83,42],[83,37,83,45,"state"],[83,42,83,50],[83,43,83,51,"routes"],[83,49,83,57],[83,50,83,58,"state"],[83,55,83,63],[83,56,83,64,"index"],[83,61,83,69],[83,62,83,70],[84,16,84,24],[85,16,85,24],[85,20,85,28,"action"],[85,26,85,34],[85,27,85,35,"payload"],[85,34,85,42],[85,35,85,43,"name"],[85,39,85,47],[85,44,85,52,"currentRoute"],[85,56,85,64],[85,57,85,65,"name"],[85,61,85,69],[85,65,85,73],[85,66,85,74,"isPreviewAction"],[85,81,85,89],[85,82,85,90,"action"],[85,88,85,96],[85,89,85,97],[85,91,85,99],[86,18,86,28,"route"],[86,23,86,33],[86,26,86,36,"currentRoute"],[86,38,86,48],[87,16,87,24],[87,17,87,25],[87,23,88,29],[87,27,88,33,"action"],[87,33,88,39],[87,34,88,40,"payload"],[87,41,88,47],[87,42,88,48,"pop"],[87,45,88,51],[87,47,88,53],[88,18,89,28,"route"],[88,23,89,33],[88,26,89,36,"state"],[88,31,89,41],[88,32,89,42,"routes"],[88,38,89,48],[88,39,89,49,"findLast"],[88,47,89,57],[88,48,89,59,"route"],[88,53,89,64],[88,57,89,69,"route"],[88,62,89,74],[88,63,89,75,"name"],[88,67,89,79],[88,72,89,84,"action"],[88,78,89,90],[88,79,89,91,"payload"],[88,86,89,98],[88,87,89,99,"name"],[88,91,89,103],[88,92,89,104],[89,16,90,24],[90,14,91,20],[91,14,92,20],[92,14,93,20],[92,18,93,24,"isPreviewAction"],[92,33,93,39],[92,34,93,40,"action"],[92,40,93,46],[92,41,93,47],[92,45,93,51],[92,46,93,52,"route"],[92,51,93,57],[92,53,93,59],[93,16,94,24,"route"],[93,21,94,29],[93,24,94,32,"state"],[93,29,94,37],[93,30,94,38,"preloadedRoutes"],[93,45,94,53],[93,46,94,54,"find"],[93,50,94,58],[93,51,94,60,"route"],[93,56,94,65],[93,60,94,70,"route"],[93,65,94,75],[93,66,94,76,"name"],[93,70,94,80],[93,75,94,85,"action"],[93,81,94,91],[93,82,94,92,"payload"],[93,89,94,99],[93,90,94,100,"name"],[93,94,94,104],[93,98,94,108,"id"],[93,100,94,110],[93,105,94,115,"route"],[93,110,94,120],[93,111,94,121,"key"],[93,114,94,124],[93,115,94,125],[94,14,95,20],[95,14,96,20],[96,14,97,20],[96,18,97,24],[96,19,97,25,"route"],[96,24,97,30],[96,26,97,32],[97,16,98,24,"route"],[97,21,98,29],[97,24,98,32,"state"],[97,29,98,37],[97,30,98,38,"preloadedRoutes"],[97,45,98,53],[97,46,98,54,"find"],[97,50,98,58],[97,51,98,60,"route"],[97,56,98,65],[97,60,98,70,"route"],[97,65,98,75],[97,66,98,76,"name"],[97,70,98,80],[97,75,98,85,"action"],[97,81,98,91],[97,82,98,92,"payload"],[97,89,98,99],[97,90,98,100,"name"],[97,94,98,104],[97,98,98,108,"id"],[97,100,98,110],[97,105,98,115,"getId"],[97,110,98,120],[97,113,98,123],[98,18,98,125,"params"],[98,24,98,131],[98,26,98,133,"route"],[98,31,98,138],[98,32,98,139,"params"],[99,16,98,146],[99,17,98,147],[99,18,98,148],[99,19,98,149],[100,14,99,20],[101,14,100,20],[101,18,100,24,"params"],[101,24,100,30],[102,14,101,20],[102,18,101,24,"action"],[102,24,101,30],[102,25,101,31,"type"],[102,29,101,35],[102,34,101,40],[102,44,101,50],[102,48,101,54,"action"],[102,54,101,60],[102,55,101,61,"payload"],[102,62,101,68],[102,63,101,69,"merge"],[102,68,101,74],[102,72,101,78,"route"],[102,77,101,83],[102,79,101,85],[103,16,102,24,"params"],[103,22,102,30],[103,25,103,28,"action"],[103,31,103,34],[103,32,103,35,"payload"],[103,39,103,42],[103,40,103,43,"params"],[103,46,103,49],[103,51,103,54,"undefined"],[103,60,103,63],[103,64,104,32,"routeParamList"],[103,78,104,46],[103,79,104,47,"action"],[103,85,104,53],[103,86,104,54,"payload"],[103,93,104,61],[103,94,104,62,"name"],[103,98,104,66],[103,99,104,67],[103,104,104,72,"undefined"],[103,113,104,81],[103,116,105,34],[104,18,106,36],[104,21,106,39,"routeParamList"],[104,35,106,53],[104,36,106,54,"action"],[104,42,106,60],[104,43,106,61,"payload"],[104,50,106,68],[104,51,106,69,"name"],[104,55,106,73],[104,56,106,74],[105,18,107,36],[105,21,107,39,"route"],[105,26,107,44],[105,27,107,45,"params"],[105,33,107,51],[106,18,108,36],[106,21,108,39,"action"],[106,27,108,45],[106,28,108,46,"payload"],[106,35,108,53],[106,36,108,54,"params"],[107,16,109,32],[107,17,109,33],[107,20,110,34,"route"],[107,25,110,39],[107,26,110,40,"params"],[107,32,110,46],[108,14,111,20],[108,15,111,21],[108,21,112,25],[109,16,113,24,"params"],[109,22,113,30],[109,25,114,28,"routeParamList"],[109,39,114,42],[109,40,114,43,"action"],[109,46,114,49],[109,47,114,50,"payload"],[109,54,114,57],[109,55,114,58,"name"],[109,59,114,62],[109,60,114,63],[109,65,114,68,"undefined"],[109,74,114,77],[109,77,115,34],[110,18,116,36],[110,21,116,39,"routeParamList"],[110,35,116,53],[110,36,116,54,"action"],[110,42,116,60],[110,43,116,61,"payload"],[110,50,116,68],[110,51,116,69,"name"],[110,55,116,73],[110,56,116,74],[111,18,117,36],[111,21,117,39,"action"],[111,27,117,45],[111,28,117,46,"payload"],[111,35,117,53],[111,36,117,54,"params"],[112,16,118,32],[112,17,118,33],[112,20,119,34,"action"],[112,26,119,40],[112,27,119,41,"payload"],[112,34,119,48],[112,35,119,49,"params"],[112,41,119,55],[113,14,120,20],[114,14,121,20],[114,18,121,24,"routes"],[114,24,121,30],[115,14,122,20],[115,18,122,24,"route"],[115,23,122,29],[115,25,122,31],[116,16,123,24],[116,20,123,28,"action"],[116,26,123,34],[116,27,123,35,"type"],[116,31,123,39],[116,36,123,44],[116,46,123,54],[116,50,123,58,"action"],[116,56,123,64],[116,57,123,65,"payload"],[116,64,123,72],[116,65,123,73,"pop"],[116,68,123,76],[116,70,123,78],[117,18,124,28,"routes"],[117,24,124,34],[117,27,124,37],[117,29,124,39],[118,18,125,28],[119,18,126,28],[119,23,126,33],[119,29,126,39,"r"],[119,30,126,40],[119,34,126,44,"state"],[119,39,126,49],[119,40,126,50,"routes"],[119,46,126,56],[119,48,126,58],[120,20,127,32],[120,24,127,36,"r"],[120,25,127,37],[120,26,127,38,"key"],[120,29,127,41],[120,34,127,46,"route"],[120,39,127,51],[120,40,127,52,"key"],[120,43,127,55],[120,45,127,57],[121,22,128,36,"routes"],[121,28,128,42],[121,29,128,43,"push"],[121,33,128,47],[121,34,128,48],[122,24,129,40],[122,27,129,43,"route"],[122,32,129,48],[123,24,130,40,"path"],[123,28,130,44],[123,30,130,46,"action"],[123,36,130,52],[123,37,130,53,"payload"],[123,44,130,60],[123,45,130,61,"path"],[123,49,130,65],[123,54,130,70,"undefined"],[123,63,130,79],[123,66,130,82,"action"],[123,72,130,88],[123,73,130,89,"payload"],[123,80,130,96],[123,81,130,97,"path"],[123,85,130,101],[123,88,130,104,"route"],[123,93,130,109],[123,94,130,110,"path"],[123,98,130,114],[124,24,131,40,"params"],[125,22,132,36],[125,23,132,37],[125,24,132,38],[126,22,133,36],[127,20,134,32],[128,20,135,32,"routes"],[128,26,135,38],[128,27,135,39,"push"],[128,31,135,43],[128,32,135,44,"r"],[128,33,135,45],[128,34,135,46],[129,18,136,28],[130,16,137,24],[130,17,137,25],[130,23,138,29],[131,18,139,28],[132,18,140,28],[133,18,141,28],[134,18,142,28],[134,22,142,32,"id"],[134,24,142,34],[134,29,142,39,"undefined"],[134,38,142,48],[134,40,142,50],[135,20,143,32,"routes"],[135,26,143,38],[135,29,143,41,"state"],[135,34,143,46],[135,35,143,47,"routes"],[135,41,143,53],[135,42,143,54,"filter"],[135,48,143,60],[135,49,143,62,"r"],[135,50,143,63],[135,54,143,68,"r"],[135,55,143,69],[135,56,143,70,"key"],[135,59,143,73],[135,64,143,78,"route"],[135,69,143,83],[135,70,143,84,"key"],[135,73,143,87],[135,74,143,88],[136,18,144,28],[136,19,144,29],[136,25,145,33],[136,29,145,37,"action"],[136,35,145,43],[136,36,145,44,"type"],[136,40,145,48],[136,45,145,53],[136,55,145,63],[136,59,145,67,"state"],[136,64,145,72],[136,65,145,73,"routes"],[136,71,145,79],[136,72,145,80,"length"],[136,78,145,86],[136,81,145,89],[136,82,145,90],[136,84,145,92],[137,20,146,32],[138,20,147,32],[138,26,147,38,"lastRoute"],[138,35,147,47],[138,38,147,50,"state"],[138,43,147,55],[138,44,147,56,"routes"],[138,50,147,62],[138,51,147,63,"state"],[138,56,147,68],[138,57,147,69,"routes"],[138,63,147,75],[138,64,147,76,"length"],[138,70,147,82],[138,73,147,85],[138,74,147,86],[138,75,147,87],[139,20,148,32],[139,24,148,36],[139,25,148,37],[139,26,148,38],[139,28,148,40,"useScreens_1"],[139,40,148,52],[139,41,148,53,"getSingularId"],[139,54,148,66],[139,56,148,68,"lastRoute"],[139,65,148,77],[139,66,148,78,"name"],[139,70,148,82],[139,72,148,84],[140,22,148,86,"params"],[140,28,148,92],[140,30,148,94,"lastRoute"],[140,39,148,103],[140,40,148,104,"params"],[141,20,148,111],[141,21,148,112],[141,22,148,113],[141,27,149,36],[141,28,149,37],[141,29,149,38],[141,31,149,40,"useScreens_1"],[141,43,149,52],[141,44,149,53,"getSingularId"],[141,57,149,66],[141,59,149,68,"route"],[141,64,149,73],[141,65,149,74,"name"],[141,69,149,78],[141,71,149,80],[142,22,149,82,"params"],[143,20,149,89],[143,21,149,90],[143,22,149,91],[143,24,149,93],[144,22,150,36,"routes"],[144,28,150,42],[144,31,150,45,"state"],[144,36,150,50],[144,37,150,51,"routes"],[144,43,150,57],[144,44,150,58,"slice"],[144,49,150,63],[144,50,150,64],[144,51,150,65],[144,53,150,67],[144,54,150,68],[144,55,150,69],[144,56,150,70],[145,20,151,32],[145,21,151,33],[145,27,152,37],[146,22,153,36,"routes"],[146,28,153,42],[146,31,153,45],[146,32,153,46],[146,35,153,49,"state"],[146,40,153,54],[146,41,153,55,"routes"],[146,47,153,61],[146,48,153,62],[147,20,154,32],[148,18,155,28],[148,19,155,29],[148,25,156,33],[149,20,157,32,"routes"],[149,26,157,38],[149,29,157,41],[149,30,157,42],[149,33,157,45,"state"],[149,38,157,50],[149,39,157,51,"routes"],[149,45,157,57],[149,46,157,58],[150,18,158,28],[151,18,159,28],[152,18,160,28],[153,18,161,28],[153,24,161,34,"key"],[153,27,161,37],[153,30,161,40,"routes"],[153,36,161,46],[153,37,161,47,"length"],[153,43,161,53],[153,48,161,58,"state"],[153,53,161,63],[153,54,161,64,"routes"],[153,60,161,70],[153,61,161,71,"length"],[153,67,161,77],[153,71,161,81],[153,72,161,82,"isPreviewAction"],[153,87,161,97],[153,88,161,98,"action"],[153,94,161,104],[153,95,161,105],[153,98,162,34],[153,101,162,37,"action"],[153,107,162,43],[153,108,162,44,"payload"],[153,115,162,51],[153,116,162,52,"name"],[153,120,162,56],[153,124,162,60],[153,125,162,61],[153,126,162,62],[153,128,162,64,"non_secure_1"],[153,140,162,76],[153,141,162,77,"nanoid"],[153,147,162,83],[153,149,162,85],[153,150,162,86],[153,152,162,88],[153,155,163,34,"route"],[153,160,163,39],[153,161,163,40,"key"],[153,164,163,43],[154,18,164,28,"routes"],[154,24,164,34],[154,25,164,35,"push"],[154,29,164,39],[154,30,164,40],[155,20,165,32],[155,23,165,35,"route"],[155,28,165,40],[156,20,166,32,"key"],[156,23,166,35],[157,20,167,32,"path"],[157,24,167,36],[157,26,167,38,"action"],[157,32,167,44],[157,33,167,45,"type"],[157,37,167,49],[157,42,167,54],[157,52,167,64],[157,56,167,68,"action"],[157,62,167,74],[157,63,167,75,"payload"],[157,70,167,82],[157,71,167,83,"path"],[157,75,167,87],[157,80,167,92,"undefined"],[157,89,167,101],[157,92,168,38,"action"],[157,98,168,44],[157,99,168,45,"payload"],[157,106,168,52],[157,107,168,53,"path"],[157,111,168,57],[157,114,169,38,"route"],[157,119,169,43],[157,120,169,44,"path"],[157,124,169,48],[158,20,170,32,"params"],[159,18,171,28],[159,19,171,29],[159,20,171,30],[160,18,172,28],[161,18,173,28],[162,18,174,28],[163,18,175,28],[164,18,176,28],[165,18,177,28],[166,18,178,28],[167,18,179,28],[168,18,180,28],[169,18,181,28],[170,16,182,24],[171,14,183,20],[171,15,183,21],[171,21,184,25],[172,16,185,24,"routes"],[172,22,185,30],[172,25,185,33],[172,26,186,28],[172,29,186,31,"state"],[172,34,186,36],[172,35,186,37,"routes"],[172,41,186,43],[172,43,187,28],[173,18,188,32,"key"],[173,21,188,35],[173,23,188,37],[173,26,188,40,"action"],[173,32,188,46],[173,33,188,47,"payload"],[173,40,188,54],[173,41,188,55,"name"],[173,45,188,59],[173,49,188,63],[173,50,188,64],[173,51,188,65],[173,53,188,67,"non_secure_1"],[173,65,188,79],[173,66,188,80,"nanoid"],[173,72,188,86],[173,74,188,88],[173,75,188,89],[173,77,188,91],[174,18,189,32,"name"],[174,22,189,36],[174,24,189,38,"action"],[174,30,189,44],[174,31,189,45,"payload"],[174,38,189,52],[174,39,189,53,"name"],[174,43,189,57],[175,18,190,32,"path"],[175,22,190,36],[175,24,190,38,"action"],[175,30,190,44],[175,31,190,45,"type"],[175,35,190,49],[175,40,190,54],[175,50,190,64],[175,53,190,67,"action"],[175,59,190,73],[175,60,190,74,"payload"],[175,67,190,81],[175,68,190,82,"path"],[175,72,190,86],[175,75,190,89,"undefined"],[175,84,190,98],[176,18,191,32,"params"],[177,16,192,28],[177,17,192,29],[177,18,193,25],[178,14,194,20],[179,14,195,20],[180,14,196,20],[181,14,197,20],[181,20,197,26,"result"],[181,26,197,32],[181,29,197,35],[182,16,198,24],[182,19,198,27,"state"],[182,24,198,32],[183,16,199,24,"index"],[183,21,199,29],[183,23,199,31,"routes"],[183,29,199,37],[183,30,199,38,"length"],[183,36,199,44],[183,39,199,47],[183,40,199,48],[184,16,200,24,"preloadedRoutes"],[184,31,200,39],[184,33,200,41,"state"],[184,38,200,46],[184,39,200,47,"preloadedRoutes"],[184,54,200,62],[184,55,200,63,"filter"],[184,61,200,69],[184,62,200,71,"route"],[184,67,200,76],[184,71,200,81,"routes"],[184,77,200,87],[184,78,200,88,"routes"],[184,84,200,94],[184,85,200,95,"length"],[184,91,200,101],[184,94,200,104],[184,95,200,105],[184,96,200,106],[184,97,200,107,"key"],[184,100,200,110],[184,105,200,115,"route"],[184,110,200,120],[184,111,200,121,"key"],[184,114,200,124],[184,115,200,125],[185,16,201,24,"routes"],[186,14,202,20],[186,15,202,21],[187,14,203,20],[187,18,203,24,"actionSingularOptions"],[187,39,203,45],[187,41,203,47],[188,16,204,24],[188,23,204,31,"filterSingular"],[188,37,204,45],[188,38,204,46,"result"],[188,44,204,52],[188,46,204,54,"getId"],[188,51,204,59],[188,52,204,60],[189,14,205,20],[190,14,206,20],[190,21,206,27,"result"],[190,27,206,33],[191,14,207,20],[192,14,208,20],[193,14,209,20],[194,14,210,20],[195,14,211,20],[196,14,212,20],[197,14,213,20],[198,14,214,20],[199,14,215,20],[200,12,216,16],[201,10,217,16],[201,15,217,21],[201,24,217,30],[202,12,217,32],[203,14,218,20],[204,14,219,20],[205,14,220,20],[205,18,220,24],[205,19,220,25,"state"],[205,24,220,30],[205,25,220,31,"routeNames"],[205,35,220,41],[205,36,220,42,"includes"],[205,44,220,50],[205,45,220,51,"action"],[205,51,220,57],[205,52,220,58,"payload"],[205,59,220,65],[205,60,220,66,"name"],[205,64,220,70],[205,65,220,71],[205,67,220,73],[206,16,221,24],[206,23,221,31],[206,27,221,35],[207,14,222,20],[208,14,223,20],[209,14,224,20],[209,20,224,26,"getId"],[209,25,224,31],[209,28,224,34,"options"],[209,35,224,41],[209,36,224,42,"routeGetIdList"],[209,50,224,56],[209,51,224,57,"action"],[209,57,224,63],[209,58,224,64,"payload"],[209,65,224,71],[209,66,224,72,"name"],[209,70,224,76],[209,71,224,77],[210,14,225,20],[210,20,225,26,"id"],[210,22,225,28],[210,25,225,31,"getId"],[210,30,225,36],[210,33,225,39],[211,16,225,41,"params"],[211,22,225,47],[211,24,225,49,"action"],[211,30,225,55],[211,31,225,56,"payload"],[211,38,225,63],[211,39,225,64,"params"],[212,14,225,71],[212,15,225,72],[212,16,225,73],[213,14,226,20],[213,18,226,24,"route"],[213,23,226,29],[214,14,227,20],[214,18,227,24,"id"],[214,20,227,26],[214,25,227,31,"undefined"],[214,34,227,40],[214,36,227,42],[215,16,228,24,"route"],[215,21,228,29],[215,24,228,32,"state"],[215,29,228,37],[215,30,228,38,"routes"],[215,36,228,44],[215,37,228,45,"find"],[215,41,228,49],[215,42,228,51,"route"],[215,47,228,56],[215,51,228,61,"route"],[215,56,228,66],[215,57,228,67,"name"],[215,61,228,71],[215,66,228,76,"action"],[215,72,228,82],[215,73,228,83,"payload"],[215,80,228,90],[215,81,228,91,"name"],[215,85,228,95],[215,89,228,99,"id"],[215,91,228,101],[215,96,228,106,"getId"],[215,101,228,111],[215,104,228,114],[216,18,228,116,"params"],[216,24,228,122],[216,26,228,124,"route"],[216,31,228,129],[216,32,228,130,"params"],[217,16,228,137],[217,17,228,138],[217,18,228,139],[217,19,228,140],[218,14,229,20],[219,14,230,20],[219,18,230,24,"route"],[219,23,230,29],[219,25,230,31],[220,16,231,24],[220,23,231,31],[221,18,232,28],[221,21,232,31,"state"],[221,26,232,36],[222,18,233,28,"routes"],[222,24,233,34],[222,26,233,36,"state"],[222,31,233,41],[222,32,233,42,"routes"],[222,38,233,48],[222,39,233,49,"map"],[222,42,233,52],[222,43,233,54,"r"],[222,44,233,55],[222,48,233,60],[223,20,234,32],[223,24,234,36,"r"],[223,25,234,37],[223,26,234,38,"key"],[223,29,234,41],[223,34,234,46,"route"],[223,39,234,51],[223,41,234,53,"key"],[223,44,234,56],[223,46,234,58],[224,22,235,36],[224,29,235,43,"r"],[224,30,235,44],[225,20,236,32],[226,20,237,32],[226,27,237,39],[227,22,238,36],[227,25,238,39,"r"],[227,26,238,40],[228,22,239,36,"params"],[228,28,239,42],[228,30,239,44,"routeParamList"],[228,44,239,58],[228,45,239,59,"action"],[228,51,239,65],[228,52,239,66,"payload"],[228,59,239,73],[228,60,239,74,"name"],[228,64,239,78],[228,65,239,79],[228,70,239,84,"undefined"],[228,79,239,93],[228,82,240,42],[229,24,241,44],[229,27,241,47,"routeParamList"],[229,41,241,61],[229,42,241,62,"action"],[229,48,241,68],[229,49,241,69,"payload"],[229,56,241,76],[229,57,241,77,"name"],[229,61,241,81],[229,62,241,82],[230,24,242,44],[230,27,242,47,"action"],[230,33,242,53],[230,34,242,54,"payload"],[230,41,242,61],[230,42,242,62,"params"],[231,22,243,40],[231,23,243,41],[231,26,244,42,"action"],[231,32,244,48],[231,33,244,49,"payload"],[231,40,244,56],[231,41,244,57,"params"],[232,20,245,32],[232,21,245,33],[233,18,246,28],[233,19,246,29],[234,16,247,24],[234,17,247,25],[235,14,248,20],[235,15,248,21],[235,21,249,25],[236,16,250,24],[237,16,251,24],[237,22,251,30,"currentPreloadedRoute"],[237,43,251,51],[237,46,251,54],[238,18,252,28,"key"],[238,21,252,31],[238,23,252,33],[238,26,252,36,"action"],[238,32,252,42],[238,33,252,43,"payload"],[238,40,252,50],[238,41,252,51,"name"],[238,45,252,55],[238,49,252,59],[238,50,252,60],[238,51,252,61],[238,53,252,63,"non_secure_1"],[238,65,252,75],[238,66,252,76,"nanoid"],[238,72,252,82],[238,74,252,84],[238,75,252,85],[238,77,252,87],[239,18,253,28,"name"],[239,22,253,32],[239,24,253,34,"action"],[239,30,253,40],[239,31,253,41,"payload"],[239,38,253,48],[239,39,253,49,"name"],[239,43,253,53],[240,18,254,28,"params"],[240,24,254,34],[240,26,254,36,"routeParamList"],[240,40,254,50],[240,41,254,51,"action"],[240,47,254,57],[240,48,254,58,"payload"],[240,55,254,65],[240,56,254,66,"name"],[240,60,254,70],[240,61,254,71],[240,66,254,76,"undefined"],[240,75,254,85],[240,78,255,34],[241,20,256,36],[241,23,256,39,"routeParamList"],[241,37,256,53],[241,38,256,54,"action"],[241,44,256,60],[241,45,256,61,"payload"],[241,52,256,68],[241,53,256,69,"name"],[241,57,256,73],[241,58,256,74],[242,20,257,36],[242,23,257,39,"action"],[242,29,257,45],[242,30,257,46,"payload"],[242,37,257,53],[242,38,257,54,"params"],[243,18,258,32],[243,19,258,33],[243,22,259,34,"action"],[243,28,259,40],[243,29,259,41,"payload"],[243,36,259,48],[243,37,259,49,"params"],[244,16,260,24],[244,17,260,25],[245,16,261,24],[246,16,262,24],[246,23,262,31],[247,18,263,28],[247,21,263,31,"state"],[247,26,263,36],[248,18,264,28],[249,18,265,28],[250,18,266,28],[251,18,267,28],[252,18,268,28],[253,18,269,28],[254,18,270,28,"preloadedRoutes"],[254,33,270,43],[254,35,270,45],[254,36,270,46,"currentPreloadedRoute"],[254,57,270,67],[254,58,270,68],[254,59,270,69,"concat"],[254,65,270,75],[254,66,270,76,"state"],[254,71,270,81],[254,72,270,82,"preloadedRoutes"],[254,87,270,97],[254,88,270,98,"filter"],[254,94,270,104],[254,95,270,106,"r"],[254,96,270,107],[254,100,270,112,"r"],[254,101,270,113],[254,102,270,114,"name"],[254,106,270,118],[254,111,270,123,"action"],[254,117,270,129],[254,118,270,130,"payload"],[254,125,270,137],[254,126,270,138,"name"],[254,130,270,142],[254,134,270,146,"id"],[254,136,270,148],[254,141,270,153,"getId"],[254,146,270,158],[254,149,270,161],[255,20,270,163,"params"],[255,26,270,169],[255,28,270,171,"r"],[255,29,270,172],[255,30,270,173,"params"],[256,18,270,180],[256,19,270,181],[256,20,270,182],[256,21,270,183],[257,18,271,28],[258,18,272,28],[259,18,273,28],[260,18,274,28],[261,18,275,28],[262,18,276,28],[263,18,277,28],[264,18,278,28],[265,18,279,28],[266,18,280,28],[267,18,281,28],[268,18,282,28],[269,18,283,28],[270,18,284,28],[271,18,285,28],[272,18,286,28],[273,18,287,28],[274,18,288,28],[275,16,289,24],[275,17,289,25],[276,14,290,20],[277,12,291,16],[278,10,292,16],[279,12,292,25],[280,14,293,20],[280,21,293,27,"original"],[280,29,293,35],[280,30,293,36,"getStateForAction"],[280,47,293,53],[280,48,293,54,"state"],[280,53,293,59],[280,55,293,61,"action"],[280,61,293,67],[280,63,293,69,"options"],[280,70,293,76],[280,71,293,77],[281,12,294,16],[282,8,295,12],[283,6,296,8],[284,4,297,4],[284,5,297,5],[285,2,298,0],[285,3,298,1],[286,2,299,0,"exports"],[286,9,299,7],[286,10,299,8,"stackRouterOverride"],[286,29,299,27],[286,32,299,30,"stackRouterOverride"],[286,51,299,49],[287,2,300,0],[287,11,300,9,"getActionSingularIdFn"],[287,32,300,30,"getActionSingularIdFn"],[287,33,300,31,"actionGetId"],[287,44,300,42],[287,46,300,44,"name"],[287,50,300,48],[287,52,300,50],[288,4,301,4],[288,8,301,8],[288,15,301,15,"actionGetId"],[288,26,301,26],[288,31,301,31],[288,41,301,41],[288,43,301,43],[289,6,302,8],[289,13,302,16,"options"],[289,20,302,23],[289,24,302,28,"actionGetId"],[289,35,302,39],[289,36,302,40,"name"],[289,40,302,44],[289,42,302,46,"options"],[289,49,302,53],[289,50,302,54,"params"],[289,56,302,60],[289,60,302,64],[289,61,302,65],[289,62,302,66],[289,63,302,67],[290,4,303,4],[290,5,303,5],[290,11,304,9],[290,15,304,13,"actionGetId"],[290,26,304,24],[290,31,304,29],[290,35,304,33],[290,37,304,35],[291,6,305,8],[291,13,305,16,"options"],[291,20,305,23],[291,24,305,28],[291,25,305,29],[291,26,305,30],[291,28,305,32,"useScreens_1"],[291,40,305,44],[291,41,305,45,"getSingularId"],[291,54,305,58],[291,56,305,60,"name"],[291,60,305,64],[291,62,305,66,"options"],[291,69,305,73],[291,70,305,74],[292,4,306,4],[293,4,307,4],[293,11,307,11,"undefined"],[293,20,307,20],[294,2,308,0],[295,2,309,0],[296,0,310,0],[297,0,311,0],[298,0,312,0],[299,2,313,0],[299,11,313,9,"filterSingular"],[299,25,313,23,"filterSingular"],[299,26,313,24,"state"],[299,31,313,29],[299,33,313,31,"getId"],[299,38,313,36],[299,40,313,38],[300,4,314,4],[300,8,314,8],[300,9,314,9,"state"],[300,14,314,14],[300,16,314,16],[301,6,315,8],[301,13,315,15,"state"],[301,18,315,20],[302,4,316,4],[303,4,317,4],[303,8,317,8],[303,9,317,9,"state"],[303,14,317,14],[303,15,317,15,"routes"],[303,21,317,21],[303,23,317,23],[304,6,318,8],[304,13,318,15,"state"],[304,18,318,20],[305,4,319,4],[306,4,320,4],[306,10,320,10,"currentIndex"],[306,22,320,22],[306,25,320,25,"state"],[306,30,320,30],[306,31,320,31,"index"],[306,36,320,36],[306,40,320,40,"state"],[306,45,320,45],[306,46,320,46,"routes"],[306,52,320,52],[306,53,320,53,"length"],[306,59,320,59],[306,62,320,62],[306,63,320,63],[307,4,321,4],[307,10,321,10,"current"],[307,17,321,17],[307,20,321,20,"state"],[307,25,321,25],[307,26,321,26,"routes"],[307,32,321,32],[307,33,321,33,"currentIndex"],[307,45,321,45],[307,46,321,46],[308,4,322,4],[308,10,322,10,"name"],[308,14,322,14],[308,17,322,17,"current"],[308,24,322,24],[308,25,322,25,"name"],[308,29,322,29],[309,4,323,4],[309,10,323,10,"id"],[309,12,323,12],[309,15,323,15,"getId"],[309,20,323,20],[309,23,323,23],[310,6,323,25,"params"],[310,12,323,31],[310,14,323,33,"current"],[310,21,323,40],[310,22,323,41,"params"],[311,4,323,48],[311,5,323,49],[311,6,323,50],[312,4,324,4],[312,8,324,8],[312,9,324,9,"id"],[312,11,324,11],[312,13,324,13],[313,6,325,8],[313,13,325,15,"state"],[313,18,325,20],[314,4,326,4],[315,4,327,4],[316,4,328,4],[316,8,328,8,"routes"],[316,14,328,14],[316,17,328,17,"state"],[316,22,328,22],[316,23,328,23,"routes"],[316,29,328,29],[317,4,329,4,"routes"],[317,10,329,10],[317,13,329,13,"routes"],[317,19,329,19],[317,20,329,20,"filter"],[317,26,329,26],[317,27,329,27],[317,28,329,28,"route"],[317,33,329,33],[317,35,329,35,"index"],[317,40,329,40],[317,45,329,45],[318,6,330,8],[319,6,331,8],[319,10,331,12,"index"],[319,15,331,17],[319,20,331,22,"currentIndex"],[319,32,331,34],[319,34,331,36],[320,8,332,12],[320,15,332,19],[320,19,332,23],[321,6,333,8],[322,6,334,8],[323,6,335,8],[323,13,335,15,"name"],[323,17,335,19],[323,22,335,24,"route"],[323,27,335,29],[323,28,335,30,"name"],[323,32,335,34],[323,36,335,38,"id"],[323,38,335,40],[323,43,335,45,"getId"],[323,48,335,50],[323,51,335,53],[324,8,335,55,"params"],[324,14,335,61],[324,16,335,63,"route"],[324,21,335,68],[324,22,335,69,"params"],[325,6,335,76],[325,7,335,77],[325,8,335,78],[326,4,336,4],[326,5,336,5],[326,6,336,6],[327,4,337,4],[327,11,337,11],[328,6,338,8],[328,9,338,11,"state"],[328,14,338,16],[329,6,339,8,"index"],[329,11,339,13],[329,13,339,15,"routes"],[329,19,339,21],[329,20,339,22,"length"],[329,26,339,28],[329,29,339,31],[329,30,339,32],[330,6,340,8,"routes"],[331,4,341,4],[331,5,341,5],[332,2,342,0],[333,2,343,0],[333,8,343,6,"Stack"],[333,13,343,11],[333,16,343,14,"Object"],[333,22,343,20],[333,23,343,21,"assign"],[333,29,343,27],[333,30,343,29,"props"],[333,35,343,34],[333,39,343,39],[334,4,344,4],[334,10,344,10],[335,6,344,12,"isStackAnimationDisabled"],[336,4,344,37],[336,5,344,38],[336,8,344,41],[336,9,344,42],[336,10,344,43],[336,12,344,45,"LinkPreviewContext_1"],[336,32,344,65],[336,33,344,66,"useLinkPreviewContext"],[336,54,344,87],[336,56,344,89],[336,57,344,90],[337,4,345,4],[337,10,345,10,"screenOptions"],[337,23,345,23],[337,26,345,26],[337,27,345,27],[337,28,345,28],[337,30,345,30,"react_1"],[337,37,345,37],[337,38,345,38,"useMemo"],[337,45,345,45],[337,47,345,47],[337,53,345,53],[338,6,346,8],[338,12,346,14,"condition"],[338,21,346,23],[338,24,346,26,"isStackAnimationDisabled"],[338,48,346,50],[338,51,346,53],[338,57,346,59],[338,61,346,63],[338,64,346,66,"shouldDisableAnimationBasedOnParams"],[338,99,346,101],[339,6,347,8],[339,13,347,15,"disableAnimationInScreenOptions"],[339,44,347,46],[339,45,347,47,"props"],[339,50,347,52],[339,51,347,53,"screenOptions"],[339,64,347,66],[339,66,347,68,"condition"],[339,75,347,77],[339,76,347,78],[340,4,348,4],[340,5,348,5],[340,7,348,7],[340,8,348,8,"props"],[340,13,348,13],[340,14,348,14,"screenOptions"],[340,27,348,27],[340,29,348,29,"isStackAnimationDisabled"],[340,53,348,53],[340,54,348,54],[340,55,348,55],[341,4,349,4],[341,24,349,12,"_reactJsxDevRuntime"],[341,43,349,12],[341,44,349,12,"jsxDEV"],[341,50,349,12],[341,51,349,13,"RNStack"],[341,58,349,20],[342,6,349,20],[342,9,349,25,"props"],[342,14,349,30],[343,6,349,32,"screenOptions"],[343,19,349,45],[343,21,349,47,"screenOptions"],[343,34,349,61],[344,6,349,62,"UNSTABLE_router"],[344,21,349,77],[344,23,349,79,"exports"],[344,30,349,86],[344,31,349,87,"stackRouterOverride"],[345,4,349,107],[346,6,349,107,"fileName"],[346,14,349,107],[346,16,349,107,"_jsxFileName"],[346,28,349,107],[347,6,349,107,"lineNumber"],[347,16,349,107],[348,6,349,107,"columnNumber"],[348,18,349,107],[349,4,349,107],[349,11,349,108],[349,12,349,109],[350,2,350,0],[350,3,350,1],[350,5,350,3],[351,4,351,4,"Screen"],[351,10,351,10],[351,12,351,12,"RNStack"],[351,19,351,19],[351,20,351,20,"Screen"],[351,26,351,26],[352,4,352,4,"Protected"],[352,13,352,13],[352,15,352,15,"Protected_1"],[352,26,352,26],[352,27,352,27,"Protected"],[353,2,353,0],[353,3,353,1],[353,4,353,2],[354,2,354,0],[354,11,354,9,"disableAnimationInScreenOptions"],[354,42,354,40,"disableAnimationInScreenOptions"],[354,43,354,41,"options"],[354,50,354,48],[354,52,354,50,"condition"],[354,61,354,59],[354,63,354,61],[355,4,355,4],[355,8,355,8,"options"],[355,15,355,15],[355,19,355,19],[355,26,355,26,"options"],[355,33,355,33],[355,38,355,38],[355,48,355,48],[355,50,355,50],[356,6,356,8],[356,13,356,16,"props"],[356,18,356,21],[356,22,356,26],[357,8,357,12],[357,14,357,18,"oldOptions"],[357,24,357,28],[357,27,357,31,"options"],[357,34,357,38],[357,35,357,39,"props"],[357,40,357,44],[357,41,357,45],[358,8,358,12],[358,12,358,16,"condition"],[358,21,358,25],[358,22,358,26,"props"],[358,27,358,31],[358,28,358,32,"route"],[358,33,358,37],[358,34,358,38],[358,36,358,40],[359,10,359,16],[359,17,359,23],[360,12,360,20],[360,15,360,23,"oldOptions"],[360,25,360,33],[361,12,361,20,"animation"],[361,21,361,29],[361,23,361,31],[362,10,362,16],[362,11,362,17],[363,8,363,12],[364,8,364,12],[364,15,364,19,"oldOptions"],[364,25,364,29],[364,29,364,33],[364,30,364,34],[364,31,364,35],[365,6,365,8],[365,7,365,9],[366,4,366,4],[367,4,367,4],[367,11,367,12,"props"],[367,16,367,17],[367,20,367,22],[368,6,368,8],[368,10,368,12,"condition"],[368,19,368,21],[368,20,368,22,"props"],[368,25,368,27],[368,26,368,28,"route"],[368,31,368,33],[368,32,368,34],[368,34,368,36],[369,8,369,12],[369,15,369,19],[370,10,370,16],[370,14,370,20,"options"],[370,21,370,27],[370,25,370,31],[370,26,370,32],[370,27,370,33],[370,28,370,34],[371,10,371,16,"animation"],[371,19,371,25],[371,21,371,27],[372,8,372,12],[372,9,372,13],[373,6,373,8],[374,6,374,8],[374,13,374,15,"options"],[374,20,374,22],[374,24,374,26],[374,25,374,27],[374,26,374,28],[375,4,375,4],[375,5,375,5],[376,2,376,0],[377,2,377,0],[377,11,377,9,"shouldDisableAnimationBasedOnParams"],[377,46,377,44,"shouldDisableAnimationBasedOnParams"],[377,47,377,45,"route"],[377,52,377,50],[377,54,377,52],[378,4,378,4],[378,10,378,10,"expoParams"],[378,20,378,20],[378,23,378,23],[378,24,378,24],[378,25,378,25],[378,27,378,27,"navigationParams_1"],[378,45,378,45],[378,46,378,46,"getInternalExpoRouterParams"],[378,73,378,73],[378,75,378,75,"route"],[378,80,378,80],[378,81,378,81,"params"],[378,87,378,87],[378,88,378,88],[379,4,379,4],[379,11,379,11],[379,12,379,12],[379,13,379,13,"expoParams"],[379,23,379,23],[379,24,379,24,"__internal_expo_router_no_animation"],[379,59,379,59],[380,2,380,0],[381,2,381,0,"exports"],[381,9,381,7],[381,10,381,8,"default"],[381,17,381,15],[381,20,381,18,"Stack"],[381,25,381,23],[382,2,382,0],[382,8,382,6,"StackRouter"],[382,19,382,17],[382,22,382,21,"options"],[382,29,382,28],[382,33,382,33],[383,4,383,4],[383,10,383,10,"router"],[383,16,383,16],[383,19,383,19],[383,20,383,20],[383,21,383,21],[383,23,383,23,"native_1"],[383,31,383,31],[383,32,383,32,"StackRouter"],[383,43,383,43],[383,45,383,45,"options"],[383,52,383,52],[383,53,383,53],[384,4,384,4],[384,11,384,11],[385,6,385,8],[385,9,385,11,"router"],[385,15,385,17],[386,6,386,8],[386,9,386,11],[386,10,386,12],[386,11,386,13],[386,13,386,15,"exports"],[386,20,386,22],[386,21,386,23,"stackRouterOverride"],[386,40,386,42],[386,42,386,44,"router"],[386,48,386,50],[387,4,387,4],[387,5,387,5],[388,2,388,0],[388,3,388,1],[389,2,389,0,"exports"],[389,9,389,7],[389,10,389,8,"StackRouter"],[389,21,389,19],[389,24,389,22,"StackRouter"],[389,35,389,33],[390,0,389,34],[390,3]],"functionMap":{"names":["<global>","isStackAction","isPreviewAction","stackRouterOverride","getStateForAction","getIdFunction","state.routes.findLast$argument_0","state.preloadedRoutes.find$argument_0","state.routes.filter$argument_0","state.preloadedRoutes.filter$argument_0","state.routes.find$argument_0","state.routes.map$argument_0","getActionSingularIdFn","<anonymous>","filterSingular","routes.filter$argument_0","Object.assign$argument_0","disableAnimationInScreenOptions","shouldDisableAnimationBasedOnParams","StackRouter"],"mappings":"AAA;ACe;CDO;wBEC;+IFG;4BGU;2BCE;YCY;aDc;sDEe,yFF;0DES,6CF;2DGK,iEH;2DGI,yFH;6DI6C,0BJ;sEKyD,sDL;kDM4B,yFN;qDOK;6BPa;yGKwB,6EL;SD0B;CHE;AYE;eCE,oDD;eCG,2DD;CZG;AcK;2BCgB;KDO;CdM;4BgBC;+CHE;KGG;ChBE;AiBI;eJE;SIS;WJE;KIQ;CjBC;AkBC;ClBG;oBmBE;CnBM"},"hasCjsExports":true},"type":"js/module"}]}